// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_Config []*Config

func (s Slice_Config) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_Config) RangeRaw(fn func(m *Config) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

// Config 配置
type Config struct {
	base    factory.Base
	objects []*Config

	Key         string `db:"key,pk" bson:"key" comment:"键" json:"key" xml:"key"`
	Label       string `db:"label" bson:"label" comment:"选项名称" json:"label" xml:"label"`
	Description string `db:"description" bson:"description" comment:"简介" json:"description" xml:"description"`
	Value       string `db:"value" bson:"value" comment:"值" json:"value" xml:"value"`
	Group       string `db:"group,pk" bson:"group" comment:"组" json:"group" xml:"group"`
	Type        string `db:"type" bson:"type" comment:"值类型(list-以半角逗号分隔的值列表)" json:"type" xml:"type"`
	Sort        int    `db:"sort" bson:"sort" comment:"排序" json:"sort" xml:"sort"`
	Disabled    string `db:"disabled" bson:"disabled" comment:"是否禁用" json:"disabled" xml:"disabled"`
	Encrypted   string `db:"encrypted" bson:"encrypted" comment:"是否加密" json:"encrypted" xml:"encrypted"`
}

// - base function

func (a *Config) Trans() *factory.Transaction {
	return a.base.Trans()
}

func (a *Config) Use(trans *factory.Transaction) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *Config) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *Config) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *Config) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *Config) Context() echo.Context {
	return a.base.Context()
}

func (a *Config) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *Config) SetNamer(namer func(string) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *Config) Namer() func(string) string {
	return a.base.Namer()
}

func (a *Config) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *Config) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

// - current function

func (a *Config) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName, connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName, a.base.ConnID()).Use(a.base.Trans())
}

func (a *Config) Objects() []*Config {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *Config) NewObjects() factory.Ranger {
	return &Slice_Config{}
}

func (a *Config) InitObjects() *[]*Config {
	a.objects = []*Config{}
	return &a.objects
}

func (a *Config) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *Config) Short_() string {
	return "config"
}

func (a *Config) Struct_() string {
	return "Config"
}

func (a *Config) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *Config) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.Use(source.Trans())
	a.SetNamer(source.Namer())
	return a
}

func (a *Config) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	base := a.base
	err := a.Param(mw, args...).SetRecv(a).One()
	a.base = base
	return err
}

func (a *Config) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
}

func (a *Config) GroupBy(keyField string, inputRows ...[]*Config) map[string][]*Config {
	var rows []*Config
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string][]*Config{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*Config{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (a *Config) KeyBy(keyField string, inputRows ...[]*Config) map[string]*Config {
	var rows []*Config
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]*Config{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (a *Config) AsKV(keyField string, valueField string, inputRows ...[]*Config) map[string]interface{} {
	var rows []*Config
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = a.Objects()
	}
	r := map[string]interface{}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (a *Config) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
}

func (a *Config) Add() (pk interface{}, err error) {

	if len(a.Type) == 0 {
		a.Type = "text"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if len(a.Encrypted) == 0 {
		a.Encrypted = "N"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()

	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *Config) Edit(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if len(a.Type) == 0 {
		a.Type = "text"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if len(a.Encrypted) == 0 {
		a.Encrypted = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *Config) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *Config) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["type"] = "text"
		}
	}
	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	if val, ok := kvset["encrypted"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["encrypted"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *Config) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		if len(a.Type) == 0 {
			a.Type = "text"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if len(a.Encrypted) == 0 {
			a.Encrypted = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		if len(a.Type) == 0 {
			a.Type = "text"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if len(a.Encrypted) == 0 {
			a.Encrypted = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})

	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *Config) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *Config) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *Config) Reset() *Config {
	a.Key = ``
	a.Label = ``
	a.Description = ``
	a.Value = ``
	a.Group = ``
	a.Type = ``
	a.Sort = 0
	a.Disabled = ``
	a.Encrypted = ``
	return a
}

func (a *Config) AsMap() map[string]interface{} {
	r := map[string]interface{}{}
	r["Key"] = a.Key
	r["Label"] = a.Label
	r["Description"] = a.Description
	r["Value"] = a.Value
	r["Group"] = a.Group
	r["Type"] = a.Type
	r["Sort"] = a.Sort
	r["Disabled"] = a.Disabled
	r["Encrypted"] = a.Encrypted
	return r
}

func (a *Config) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "key":
			a.Key = param.AsString(value)
		case "label":
			a.Label = param.AsString(value)
		case "description":
			a.Description = param.AsString(value)
		case "value":
			a.Value = param.AsString(value)
		case "group":
			a.Group = param.AsString(value)
		case "type":
			a.Type = param.AsString(value)
		case "sort":
			a.Sort = param.AsInt(value)
		case "disabled":
			a.Disabled = param.AsString(value)
		case "encrypted":
			a.Encrypted = param.AsString(value)
		}
	}
}

func (a *Config) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Key":
			a.Key = param.AsString(vv)
		case "Label":
			a.Label = param.AsString(vv)
		case "Description":
			a.Description = param.AsString(vv)
		case "Value":
			a.Value = param.AsString(vv)
		case "Group":
			a.Group = param.AsString(vv)
		case "Type":
			a.Type = param.AsString(vv)
		case "Sort":
			a.Sort = param.AsInt(vv)
		case "Disabled":
			a.Disabled = param.AsString(vv)
		case "Encrypted":
			a.Encrypted = param.AsString(vv)
		}
	}
}

func (a *Config) AsRow() map[string]interface{} {
	r := map[string]interface{}{}
	r["key"] = a.Key
	r["label"] = a.Label
	r["description"] = a.Description
	r["value"] = a.Value
	r["group"] = a.Group
	r["type"] = a.Type
	r["sort"] = a.Sort
	r["disabled"] = a.Disabled
	r["encrypted"] = a.Encrypted
	return r
}

func (a *Config) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return factory.BatchValidate(a.Short_(), kvset)
}

func (a *Config) Validate(field string, value interface{}) error {
	return factory.Validate(a.Short_(), field, value)
}
