package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/admpub/confl"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/sqlbuilder"
	"github.com/webx-top/db/mysql"
	//"github.com/webx-top/com"
)

var cfg = &config{
	SchemaConfig: &SchemaConfig{},
	ModelConfig:  &ModelConfig{},
}
var configFile string
var memberTemplate = "\t%v\t%v\t`db:\"%v\" bson:\"%v\" comment:\"%v\" json:\"%v\" xml:\"%v\"`"
var replaces = &map[string]string{
	"packageName":  "",
	"imports":      "",
	"structName":   "",
	"attributes":   "",
	"reset":        "",
	"tableName":    "",
	"beforeInsert": "",
	"afterInsert":  "",
	"beforeUpdate": "",
	"beforeDelete": "",
}
var structFuncs = map[string]string{
	`Trans`:        `Trans`,
	`Use`:          `Use`,
	`Objects`:      `Objects`,
	`NewObjects`:   `NewObjects`,
	`NewParam`:     `NewParam`,
	`SetParam`:     `SetParam`,
	`Get`:          `Get`,
	`List`:         `List`,
	`ListByOffset`: `ListByOffset`,
	`Add`:          `Add`,
	`Edit`:         `Edit`,
	`Upsert`:       `Upsert`,
	`Delete`:       `Delete`,
	`Count`:        `Count`,
}
var structTemplate = `//Do not edit this file, which is automatically generated by the generator.

package {{packageName}}

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	{{imports}}
)

type {{structName}} struct {
	param   *factory.Param
	trans	*factory.Transaction
	objects []*{{structName}}
	
{{attributes}}
}

func (this *{{structName}}) Trans() *factory.Transaction {
	return this.trans
}

func (this *{{structName}}) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *{{structName}}) Objects() []*{{structName}} {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *{{structName}}) NewObjects() *[]*{{structName}} {
	this.objects = []*{{structName}}{}
	return &this.objects
}

func (this *{{structName}}) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetTrans(this.trans).SetCollection("{{tableName}}").SetModel(this)
}

func (this *{{structName}}) SetParam(param *factory.Param) factory.Model {
	this.param = param
	return this
}

func (this *{{structName}}) Param() *factory.Param {
	if this.param == nil {
		return this.NewParam()
	}
	return this.param
}

func (this *{{structName}}) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *{{structName}}) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *{{structName}}) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *{{structName}}) Add() (pk interface{}, err error) {
	{{beforeInsert}}
	pk, err = this.Param().SetSend(this).Insert()
	{{afterInsert}}
	return
}

func (this *{{structName}}) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	{{beforeUpdate}}
	return this.Setter(mw, args...).SetSend(this).Update()
}

func (this *{{structName}}) Setter(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	return this.Param().SetArgs(args...).SetMiddleware(mw)
}

func (this *{{structName}}) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) error {
	return this.Setter(mw, args...).SetSend(map[string]interface{}{
		field: value,
	}).Update()
}

func (this *{{structName}}) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Upsert(func(){
		{{beforeUpdate}}
	},func(){
		{{beforeInsert}}
	})
	{{afterInsert}}
	return 
}

func (this *{{structName}}) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	{{beforeDelete}}
	return this.Param().SetArgs(args...).SetMiddleware(mw).Delete()
}

func (this *{{structName}}) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return this.Param().SetArgs(args...).SetMiddleware(mw).Count()
}

func (this *{{structName}}) Reset() *{{structName}} {
{{reset}}
	return this
}
`

var modelReplaces = &map[string]string{
	"packageName":       "",
	"imports":           "",
	"structName":        "",
	"schemaPackagePath": "",
	"schemaPackageName": "",
	"baseName":          "",
}
var modelBaseTemplate = `package {{packageName}}

import (
	"github.com/webx-top/echo"
	{{imports}}
)

type {{structName}} struct {
	echo.Context
}
`

var modelTemplate = `package {{packageName}}

import (
	"{{schemaPackagePath}}"
	"github.com/webx-top/echo"
	{{imports}}
)
				
func New{{structName}}(ctx echo.Context) *{{structName}} {
	return &{{structName}}{
		{{structName}}: &{{schemaPackageName}}.{{structName}}{},
		{{baseName}}:   &{{baseName}}{Context: ctx},
	}
}

type {{structName}} struct {
	*{{schemaPackageName}}.{{structName}}
	*{{baseName}}
}

`

type SchemaConfig struct {
	SaveDir     string `json:"saveDir"`
	ImportPath  string `json:"importPath"`
	PackageName string `json:"packageName"`
}

type ModelConfig struct {
	SaveDir     string `json:"saveDir"`
	ImportPath  string `json:"importPath"`
	PackageName string `json:"packageName"`
	BaseName    string `json:"baseName"`
}

type config struct {
	Username       string          `json:"username"`
	Password       string          `json:"password"`
	Host           string          `json:"host"`
	Engine         string          `json:"engine"`
	Database       string          `json:"database"`
	Prefix         string          `json:"prefix"`
	SchemaConfig   *SchemaConfig   `json:"schemaConfig"`
	ModelConfig    *ModelConfig    `json:"modelConfig"`
	Schema         string          `json:"schema"`
	AutoTimeFields *AutoTimeFields `json:"autoTime"`
}

type AutoTimeFields struct {
	//update操作时，某个字段自动设置为当前时间（map的键和值分别为表名称和字段名称。当表名称设置为“*”时，代表所有表中的这个字段）
	Update map[string][]string `json:"update"`

	//insert操作时，某个字段自动设置为当前时间（map的键和值分别为表名称和字段名称。当表名称设置为“*”时，代表所有表中的这个字段）
	Insert map[string][]string `json:"insert"`
}

func main() {
	flag.StringVar(&configFile, `c`, ``, `-c conf.yaml`)

	//DBSettings
	flag.StringVar(&cfg.Username, `u`, `root`, `-u user`)
	flag.StringVar(&cfg.Password, `p`, ``, `-p password`)
	flag.StringVar(&cfg.Host, `h`, `localhost`, `-h host`)
	flag.StringVar(&cfg.Engine, `e`, `mysql`, `-e engine`)
	flag.StringVar(&cfg.Database, `d`, `blog`, `-d database`)
	flag.StringVar(&cfg.Prefix, `pre`, ``, `-pre prefix`)

	//DBSchema
	flag.StringVar(&cfg.SchemaConfig.ImportPath, `import`, ``, `-import github.com/webx-top/project/app/dbschema`)
	flag.StringVar(&cfg.SchemaConfig.PackageName, `pkg`, `dbschema`, `-pkg packageName`)
	flag.StringVar(&cfg.SchemaConfig.SaveDir, `o`, `dbschema`, `-o targetDir`)

	//Model
	flag.StringVar(&cfg.ModelConfig.BaseName, `mbase`, `Base`, `-mbase Base`)
	flag.StringVar(&cfg.ModelConfig.ImportPath, `mimport`, ``, `-mimport github.com/webx-top/project/app/model`)
	flag.StringVar(&cfg.ModelConfig.SaveDir, `mo`, ``, `-mo targetDir`)
	flag.StringVar(&cfg.ModelConfig.PackageName, `mpkg`, `model`, `-mpkg packageName`)

	//Postgres schema
	flag.StringVar(&cfg.Schema, `schema`, `public`, `-schema schemaName`)
	autoTime := flag.String(`autoTime`, `{"update":{"*":["updated"]},"insert":{"*":["created"]}}`, `-autoTime <json-data>`)
	flag.Parse()

	var err error
	if len(configFile) > 0 {
		_, err = confl.DecodeFile(configFile, cfg)
		if err != nil {
			log.Fatal(err)
		}
	}
	if len(cfg.ModelConfig.SaveDir) > 0 {
		cfg.ModelConfig.SaveDir = strings.TrimSuffix(cfg.ModelConfig.SaveDir, `/`)
		cfg.ModelConfig.SaveDir = strings.TrimSuffix(cfg.ModelConfig.SaveDir, `\`)
		if len(cfg.ModelConfig.PackageName) == 0 {
			cfg.ModelConfig.PackageName = filepath.Base(cfg.ModelConfig.SaveDir)
			switch cfg.ModelConfig.PackageName {
			case `.`, `/`, `\`:
				cfg.ModelConfig.PackageName = `model`
			}
		}
	}
	//com.Dump(cfg)
	var sess sqlbuilder.Database
	switch cfg.Engine {
	case `mymysql`, `mysql`:
		fallthrough
	default:
		settings := mysql.ConnectionURL{
			Host:     cfg.Host,
			Database: cfg.Database,
			User:     cfg.Username,
			Password: cfg.Password,
		}
		sess, err = mysql.Open(settings)
	}
	if err != nil {
		log.Fatal(err)
	}
	if cfg.AutoTimeFields == nil && len(*autoTime) > 0 {
		cfg.AutoTimeFields = &AutoTimeFields{}

		// JSON
		if (*autoTime)[0] == '{' {
			err = json.Unmarshal([]byte(*autoTime), cfg.AutoTimeFields)
			if err != nil {
				log.Fatal(err)
			}
		} else { // update(*:updated)/insert(*:created) 括号内的格式：<表1>:<字段1>,<字段2>,<...字段N>;<表2>:<字段1>,<字段2>,<...字段N>
			cfg.AutoTimeFields.Update = make(map[string][]string)
			cfg.AutoTimeFields.Insert = make(map[string][]string)
			for _, par := range strings.Split(*autoTime, `/`) {
				par = strings.TrimSpace(par)
				switch {
				case strings.HasPrefix(par, `update(`):
					par = strings.TrimPrefix(par, `update(`)
					par = strings.TrimSuffix(par, `)`)
					for _, item := range strings.Split(par, `;`) {
						t := strings.SplitN(item, `:`, 2)
						if len(t) > 1 {
							t[0] = strings.TrimSpace(t[0])
							t[1] = strings.TrimSpace(t[1])
							if len(t[0]) == 0 || len(t[1]) == 0 {
								continue
							}
							if _, ok := cfg.AutoTimeFields.Update[t[0]]; !ok {
								cfg.AutoTimeFields.Update[t[0]] = []string{}
							}
							for _, field := range strings.Split(t[1], `,`) {
								field = strings.TrimSpace(field)
								if len(field) == 0 {
									continue
								}
								cfg.AutoTimeFields.Update[t[0]] = append(cfg.AutoTimeFields.Update[t[0]], field)
							}
						}
					}

				case strings.HasPrefix(par, `insert(`):
					par = strings.TrimPrefix(par, `insert(`)
					par = strings.TrimSuffix(par, `)`)
					for _, item := range strings.Split(par, `;`) {
						t := strings.SplitN(item, `:`, 2)
						if len(t) > 1 {
							t[0] = strings.TrimSpace(t[0])
							t[1] = strings.TrimSpace(t[1])
							if len(t[0]) == 0 || len(t[1]) == 0 {
								continue
							}
							if _, ok := cfg.AutoTimeFields.Insert[t[0]]; !ok {
								cfg.AutoTimeFields.Insert[t[0]] = []string{}
							}
							for _, field := range strings.Split(t[1], `,`) {
								field = strings.TrimSpace(field)
								if len(field) == 0 {
									continue
								}
								cfg.AutoTimeFields.Insert[t[0]] = append(cfg.AutoTimeFields.Insert[t[0]], field)
							}
						}
					}
				}
			}
		}
	}
	defer sess.Close()
	tables, err := sess.Collections()
	if err != nil {
		log.Fatal(err)
	}
	log.Printf(`Found tables: %v`, tables)
	err = os.MkdirAll(cfg.SchemaConfig.SaveDir, os.ModePerm)
	if err != nil {
		panic(err.Error())
	}
	allFields := map[string]map[string]factory.FieldInfo{}
	hasPrefix := len(cfg.Prefix) > 0
	for _, tableName := range tables {
		structName := TableToStructName(tableName, cfg.Prefix)
		imports := ``
		goFields, fields, fieldNames := GetTableFields(cfg.Engine, sess, tableName)
		fieldBlock := strings.Join(goFields, "\n")
		noPrefixTableName := tableName
		if hasPrefix {
			noPrefixTableName = strings.TrimPrefix(tableName, cfg.Prefix)
		}
		var resets string
		for key, fieldName := range fieldNames {
			f := fields[fieldName]
			if key > 0 {
				resets += "\n"
			}
			resets += "	this." + f.GoName + " = " + ZeroValue(f.GoType)
		}
		replaceMap := *replaces
		replaceMap["packageName"] = cfg.SchemaConfig.PackageName
		replaceMap["structName"] = structName
		replaceMap["attributes"] = fieldBlock
		replaceMap["reset"] = resets
		replaceMap["tableName"] = noPrefixTableName
		replaceMap["beforeInsert"] = ""
		replaceMap["beforeUpdate"] = ""
		replaceMap["beforeDelete"] = ""
		replaceMap["afterInsert"] = ""

		importTime := false
		if cfg.AutoTimeFields != nil {
			_fieldNames, ok := cfg.AutoTimeFields.Insert[`*`]
			if !ok {
				_fieldNames, ok = cfg.AutoTimeFields.Insert[tableName]
			}
			if ok && len(_fieldNames) > 0 {
				beforeInsert := ``
				newLine := ``
				for _, _fieldName := range _fieldNames {
					fieldInf, ok := fields[_fieldName]
					if !ok {
						continue
					}
					switch fieldInf.GoType {
					case `uint`, `int`, `uint32`, `int32`, `int64`, `uint64`:
						beforeInsert += newLine + `this.` + fieldInf.GoName + ` = ` + fieldInf.GoType + `(time.Now().Unix())`
						newLine = "\n\t"
						importTime = true
					case `string`:
						//TODO
					}
				}
				afterInsert := ``
				newLine2 := ``
				newTab2 := ``
				for _, fieldInf := range fields {
					if fieldInf.AutoIncrement && fieldInf.PrimaryKey {
						beforeInsert += newLine + `this.` + fieldInf.GoName + ` = 0`
						newLine = "\n\t"
						var extData string
						if fieldInf.GoType != `int64` {
							extData = ` else if v, y := pk.(int64); y {
` + newTab2 + `			this.` + fieldInf.GoName + ` = ` + fieldInf.GoType + `(v)
` + newTab2 + `		}`
						}
						afterInsert += newLine2 + `if err == nil && pk != nil {
` + newTab2 + `		if v, y := pk.(` + fieldInf.GoType + `); y {
` + newTab2 + `			this.` + fieldInf.GoName + ` = v
` + newTab2 + `		}` + extData + `
` + newTab2 + `	}`
						newLine2 = "\n\t"
						newTab2 = "\t"
						break
					}
				}
				replaceMap["afterInsert"] = afterInsert
				replaceMap["beforeInsert"] = beforeInsert
			}
			_fieldNames, ok = cfg.AutoTimeFields.Update[`*`]
			if !ok {
				_fieldNames, ok = cfg.AutoTimeFields.Update[tableName]
			}
			if ok && len(_fieldNames) > 0 {
				beforeUpdate := ``
				newLine := ``
				for _, _fieldName := range _fieldNames {
					fieldInf, ok := fields[_fieldName]
					if !ok {
						continue
					}
					switch fieldInf.GoType {
					case `uint`, `int`, `uint32`, `int32`, `int64`, `uint64`:
						beforeUpdate += newLine + `this.` + fieldInf.GoName + ` = ` + fieldInf.GoType + `(time.Now().Unix())`
						newLine = "\n\t"
						importTime = true
					case `string`:
						//TODO
					}
				}
				replaceMap["beforeUpdate"] = beforeUpdate
			}
		}
		if importTime {
			imports += "\n\t" + `"time"`
		}

		replaceMap["imports"] = imports

		content := structTemplate
		for tag, val := range replaceMap {
			content = strings.Replace(content, `{{`+tag+`}}`, val, -1)
		}

		saveAs := filepath.Join(cfg.SchemaConfig.SaveDir, structName) + `.go`
		file, err := os.Create(saveAs)
		if err == nil {
			_, err = file.WriteString(content)
		}
		if err != nil {
			log.Println(err)
		} else {
			log.Println(`Generated schema struct:`, structName)
		}

		if len(cfg.ModelConfig.PackageName) > 0 && len(cfg.ModelConfig.SaveDir) > 0 {
			os.MkdirAll(cfg.ModelConfig.SaveDir, 0777)
			modelFile := filepath.Join(cfg.ModelConfig.SaveDir, structName) + `.go`
			_, err := os.Stat(modelFile)
			if err != nil && os.IsNotExist(err) {
				file, err := os.Create(modelFile)
				if err == nil {
					mr := *modelReplaces
					baseName := `Base`
					if len(cfg.ModelConfig.BaseName) > 0 {
						baseName = cfg.ModelConfig.BaseName
					}
					mr["packageName"] = cfg.ModelConfig.PackageName
					mr["imports"] = ""
					mr["structName"] = structName
					mr["baseName"] = baseName
					mr["schemaPackagePath"] = cfg.SchemaConfig.ImportPath
					mr["schemaPackageName"] = cfg.SchemaConfig.PackageName
					content := modelTemplate
					for tag, val := range mr {
						content = strings.Replace(content, `{{`+tag+`}}`, val, -1)
					}
					_, err = file.WriteString(content)
				}
				if err != nil {
					log.Println(err)
				} else {
					log.Println(`Generated model struct:`, structName)
				}
			}
		}

		allFields[noPrefixTableName] = fields
	}

	content := `//Do not edit this file, which is automatically generated by the generator.

package {{packageName}}

import (
	"github.com/webx-top/db/lib/factory"
)

func init(){
	{{initCode}}
}

`
	dataContent := strings.Replace(fmt.Sprintf(`factory.Fields=%#v`+"\n", allFields), `map[string]factory.FieldInfo`, `map[string]*factory.FieldInfo`, -1)
	dataContent = strings.Replace(dataContent, `:factory.FieldInfo`, `:&factory.FieldInfo`, -1)
	content = strings.Replace(content, `{{packageName}}`, cfg.SchemaConfig.PackageName, -1)
	content = strings.Replace(content, `{{initCode}}`, dataContent, -1)
	saveAs := filepath.Join(cfg.SchemaConfig.SaveDir, `init`) + `.go`
	file, err := os.Create(saveAs)
	if err == nil {
		_, err = file.WriteString(content)
	}
	if err != nil {
		log.Println(err)
	} else {
		log.Println(`Generated init.go`)
	}
	if len(cfg.ModelConfig.PackageName) > 0 && len(cfg.ModelConfig.SaveDir) > 0 {
		structName := `Base`
		if len(cfg.ModelConfig.BaseName) > 0 {
			structName = cfg.ModelConfig.BaseName
		}
		os.MkdirAll(cfg.ModelConfig.SaveDir, 0777)
		modelFile := filepath.Join(cfg.ModelConfig.SaveDir, structName) + `.go`
		_, err := os.Stat(modelFile)
		if err != nil && os.IsNotExist(err) {
			file, err := os.Create(modelFile)
			if err == nil {
				mr := *modelReplaces
				mr["packageName"] = cfg.ModelConfig.PackageName
				mr["imports"] = ""
				mr["structName"] = structName
				mr["schemaPackagePath"] = cfg.SchemaConfig.ImportPath
				mr["schemaPackageName"] = cfg.SchemaConfig.PackageName
				content := modelBaseTemplate
				for tag, val := range mr {
					content = strings.Replace(content, `{{`+tag+`}}`, val, -1)
				}
				_, err = file.WriteString(content)
			}
			if err != nil {
				log.Println(err)
			} else {
				log.Println(`Generated model struct:`, structName)
			}
		}
	}

	log.Println(`End.`)
}

func TableToStructName(tableName string, prefix string) string {
	if len(prefix) > 0 {
		tableName = strings.TrimPrefix(tableName, prefix)
	}
	return factory.ToCamleCase(tableName)
}

func ZeroValue(typ string) string {
	switch typ {
	case `uint`, `int`, `uint32`, `int32`, `int64`, `uint64`:
		return `0`
	case `float32`, `float64`:
		return `0.0`
	case `bool`:
		return `false`
	case `string`:
		return "``"
	case `byte[]`:
		return `nil`
	case `time.Time`:
		return `time.Time{}`
	default:
		panic(`undefined zero value for ` + typ)
	}
}

func DataType(fieldInfo *factory.FieldInfo) string {
	switch fieldInfo.DataType {
	case `int`, `tinyint`, `smallint`, `mediumint`:
		if fieldInfo.Unsigned {
			return `uint`
		}
		return `int`
	case `bigint`:
		if fieldInfo.Unsigned {
			return `uint64`
		}
		return `int64`
	case `decimal`, `double`:
		return `float64`
	case `float`:
		return `float32`
	case `bit`, `binary`, `varbinary`, `tinyblob`, `blob`, `mediumblob`, `longblob`: //二进制
		return `byte[]`
	case `geometry`, `point`, `linestring`, `polygon`, `multipoint`, `multilinestring`, `multipolygon`, `geometrycollection`: //几何图形
		return `byte[]`

	//postgreSQL
	case `boolean`:
		return `bool`
	case `oid`:
		if fieldInfo.Unsigned {
			return `uint64`
		}
		return `int64`

	default:
		return `string`
	}
}

func GetTableFields(engine string, d sqlbuilder.Database, tableName string) ([]string, map[string]factory.FieldInfo, []string) {
	switch engine {
	case "mymysql", "mysql":
		fallthrough
	default:
		return getMySQLTableFields(d, tableName)
	}
}
