package main

var memberTemplate = "\t%v\t%v\t`db:\"%v\" bson:\"%v\" comment:\"%v\" json:\"%v\" xml:\"%v\"`"
var replaces = &map[string]string{
	"packageName":   "",
	"imports":       "",
	"structName":    "",
	"structComment": "",
	"attributes":    "",
	"reset":         "",
	"asMap":         "",
	"asRow":         "",
	"tableName":     "",
	"beforeInsert":  "",
	"afterInsert":   "",
	"beforeUpdate":  "",
	"setUpdatedAt":  "",
	"beforeDelete":  "",
}
var structFuncs = map[string]string{
	`Trans`:         `Trans`,
	`Use`:           `Use`,
	`Objects`:       `Objects`,
	`NewObjects`:    `NewObjects`,
	`NewParam`:      `NewParam`,
	`SetParam`:      `SetParam`,
	`Get`:           `Get`,
	`List`:          `List`,
	`ListByOffset`:  `ListByOffset`,
	`Add`:           `Add`,
	`Edit`:          `Edit`,
	`Upsert`:        `Upsert`,
	`Delete`:        `Delete`,
	`Count`:         `Count`,
	`GroupBy`:       `GroupBy`,
	`KeyBy`:         `KeyBy`,
	`Setter`:        `Setter`,
	`SetField`:      `SetField`,
	`SetFields`:     `SetFields`,
	`Reset`:         `Reset`,
	`AsMap`:         `AsMap`,
	`AsRow`:         `AsRow`,
	`BatchValidate`: `BatchValidate`,
	`Validate`:      `Validate`,
}
var structTemplate = `// @generated Do not edit this file, which is automatically generated by the generator.

package {{packageName}}

import (
	"fmt"

	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	{{imports}}
)

// {{structName}} {{structComment}}
type {{structName}} struct {
	param   *factory.Param
	trans	*factory.Transaction
	objects []*{{structName}}
	namer   func(string) string
	connID  int
	
{{attributes}}
}

func (this *{{structName}}) Trans() *factory.Transaction {
	return this.trans
}

func (this *{{structName}}) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *{{structName}}) SetConnID(connID int) factory.Model {
	this.connID = connID
	return this
}

func (this *{{structName}}) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName,connID[0]).Use(this.trans)
	}
	return factory.NewModel(structName,this.connID).Use(this.trans)
}

func (this *{{structName}}) Objects() []*{{structName}} {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *{{structName}}) NewObjects() *[]*{{structName}} {
	this.objects = []*{{structName}}{}
	return &this.objects
}

func (this *{{structName}}) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(this.connID).SetTrans(this.trans).SetCollection(this.Name_()).SetModel(this)
}

func (this *{{structName}}) SetNamer(namer func (string) string) factory.Model {
	this.namer = namer
	return this
}

func (this *{{structName}}) Short_() string {
	return "{{tableName}}"
}

func (this *{{structName}}) Struct_() string {
	return "{{structName}}"
}

func (this *{{structName}}) Name_() string {
	if this.namer != nil {
		return WithPrefix(this.namer(this.Short_()))
	}
	return WithPrefix(factory.TableNamerGet(this.Short_())(this))
}

func (this *{{structName}}) SetParam(param *factory.Param) factory.Model {
	this.param = param
	return this
}

func (this *{{structName}}) Param() *factory.Param {
	if this.param == nil {
		return this.NewParam()
	}
	return this.param
}

func (this *{{structName}}) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *{{structName}}) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *{{structName}}) GroupBy(keyField string, inputRows ...[]*{{structName}}) map[string][]*{{structName}} {
	var rows []*{{structName}}
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string][]*{{structName}}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*{{structName}}{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (this *{{structName}}) KeyBy(keyField string, inputRows ...[]*{{structName}}) map[string]*{{structName}} {
	var rows []*{{structName}}
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string]*{{structName}}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (this *{{structName}}) AsKV(keyField string, valueField string, inputRows ...[]*{{structName}}) map[string]interface{} {
	var rows []*{{structName}}
	if len(inputRows) > 0 {
		rows = inputRows[0]
	} else {
		rows = this.Objects()
	}
	r := map[string]interface{}{}
	for _, row := range rows {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (this *{{structName}}) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *{{structName}}) Add() (pk interface{}, err error) {
	{{beforeInsert}}
	pk, err = this.Param().SetSend(this).Insert()
	{{afterInsert}}
	return
}

func (this *{{structName}}) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	{{beforeUpdate}}
	return this.Setter(mw, args...).SetSend(this).Update()
}

func (this *{{structName}}) Setter(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	return this.Param().SetArgs(args...).SetMiddleware(mw)
}

func (this *{{structName}}) SetField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) error {
	return this.SetFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (this *{{structName}}) SetFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) error {
	{{setUpdatedAt}}
	return this.Setter(mw, args...).SetSend(kvset).Update()
}

func (this *{{structName}}) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Upsert(func(){
		{{beforeUpdate}}
	},func(){
		{{beforeInsert}}
	})
	{{afterInsert}}
	return 
}

func (this *{{structName}}) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	{{beforeDelete}}
	return this.Param().SetArgs(args...).SetMiddleware(mw).Delete()
}

func (this *{{structName}}) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return this.Param().SetArgs(args...).SetMiddleware(mw).Count()
}

func (this *{{structName}}) Reset() *{{structName}} {
{{reset}}
	return this
}

func (this *{{structName}}) AsMap() map[string]interface{} {
	r := map[string]interface{}{}
{{asMap}}
	return r
}

func (this *{{structName}}) AsRow() map[string]interface{} {
	r := map[string]interface{}{}
{{asRow}}
	return r
}

func (this *{{structName}}) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = this.AsRow()
	}
	return factory.BatchValidate(this.Short_(), kvset)
}

func (this *{{structName}}) Validate(field string, value interface{}) error {
	return factory.Validate(this.Short_(), field, value)
}

`

var modelReplaces = &map[string]string{
	"packageName":       "",
	"imports":           "",
	"structName":        "",
	"schemaPackagePath": "",
	"schemaPackageName": "",
	"baseName":          "",
}
var modelBaseTemplate = `package {{packageName}}

import (
	"github.com/webx-top/echo"
	{{imports}}
)

type {{structName}} struct {
	echo.Context
}
`

var modelTemplate = `package {{packageName}}

import (
	"{{schemaPackagePath}}"
	"github.com/webx-top/echo"
	{{imports}}
)
				
func New{{structName}}(ctx echo.Context) *{{structName}} {
	return &{{structName}}{
		{{structName}}: &{{schemaPackageName}}.{{structName}}{},
		{{baseName}}:   &{{baseName}}{Context: ctx},
	}
}

type {{structName}} struct {
	*{{schemaPackageName}}.{{structName}}
	*{{baseName}}
}

`

var initFileTemplate = `// @generated Do not edit this file, which is automatically generated by the generator.

package {{packageName}}

import (
	"github.com/webx-top/db/lib/factory"
)

var WithPrefix = func(tableName string) string {
	return "{{prefix}}" + tableName
}

var DBI = factory.NewDBI()

func init(){
	factory.DBIRegister(DBI,"{{dbKey}}")
	{{initCode}}
}

`
