// @generated Do not edit this file, which is automatically generated by the generator.

package dbschema

import (
	"fmt"

	"time"

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_OfficialFilmItem []*OfficialFilmItem

func (s Slice_OfficialFilmItem) Range(fn func(m factory.Model) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialFilmItem) RangeRaw(fn func(m *OfficialFilmItem) error) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_OfficialFilmItem) GroupBy(keyField string) map[string][]*OfficialFilmItem {
	r := map[string][]*OfficialFilmItem{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*OfficialFilmItem{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_OfficialFilmItem) KeyBy(keyField string) map[string]*OfficialFilmItem {
	r := map[string]*OfficialFilmItem{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_OfficialFilmItem) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_OfficialFilmItem) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store, len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}

func (s Slice_OfficialFilmItem) FromList(data interface{}) Slice_OfficialFilmItem {
	values, ok := data.([]*OfficialFilmItem)
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &OfficialFilmItem{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)

	return s
}

func NewOfficialFilmItem(ctx echo.Context) *OfficialFilmItem {
	m := &OfficialFilmItem{}
	m.SetContext(ctx)
	return m
}

// OfficialFilmItem 影片
type OfficialFilmItem struct {
	base    factory.Base
	objects []*OfficialFilmItem

	Id                 uint64  `db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	Sn                 string  `db:"sn" bson:"sn" comment:"序列号" json:"sn" xml:"sn"`
	Category1          uint    `db:"category1" bson:"category1" comment:"顶级分类ID" json:"category1" xml:"category1"`
	Category2          uint    `db:"category2" bson:"category2" comment:"二级分类ID" json:"category2" xml:"category2"`
	Category3          uint    `db:"category3" bson:"category3" comment:"三级分类ID" json:"category3" xml:"category3"`
	CategoryId         uint    `db:"category_id" bson:"category_id" comment:"最底层分类ID" json:"category_id" xml:"category_id"`
	OwnerId            uint64  `db:"owner_id" bson:"owner_id" comment:"发布者" json:"owner_id" xml:"owner_id"`
	OwnerType          string  `db:"owner_type" bson:"owner_type" comment:"所有者类型(customer-前台客户;user-后台用户)" json:"owner_type" xml:"owner_type"`
	Title              string  `db:"title" bson:"title" comment:"影片标题" json:"title" xml:"title"`
	Name               string  `db:"name" bson:"name" comment:"影片名称" json:"name" xml:"name"`
	Alias              string  `db:"alias" bson:"alias" comment:"影片别名" json:"alias" xml:"alias"`
	Keywords           string  `db:"keywords" bson:"keywords" comment:"关键词(用半角逗号隔开)" json:"keywords" xml:"keywords"`
	Chapter            uint    `db:"chapter" bson:"chapter" comment:"章节编号(比如:第一季则设置为1)" json:"chapter" xml:"chapter"`
	PictureQuality     string  `db:"picture_quality" bson:"picture_quality" comment:"画质(BD/HD/1080P)" json:"picture_quality" xml:"picture_quality"`
	MainActors         string  `db:"main_actors" bson:"main_actors" comment:"主演(多个用半角逗号隔开)" json:"main_actors" xml:"main_actors"`
	Directors          string  `db:"directors" bson:"directors" comment:"导演(多个用半角逗号隔开)" json:"directors" xml:"directors"`
	Screenwriters      string  `db:"screenwriters" bson:"screenwriters" comment:"编剧(多个用半角逗号隔开)" json:"screenwriters" xml:"screenwriters"`
	IssuedAreas        string  `db:"issued_areas" bson:"issued_areas" comment:"发行地区(多个用半角逗号隔开)" json:"issued_areas" xml:"issued_areas"`
	IssuedYear         uint    `db:"issued_year" bson:"issued_year" comment:"发行年份" json:"issued_year" xml:"issued_year"`
	Languages          string  `db:"languages" bson:"languages" comment:"对白语言(多个用半角逗号隔开)" json:"languages" xml:"languages"`
	Duration           uint    `db:"duration" bson:"duration" comment:"时长(分钟)" json:"duration" xml:"duration"`
	Released           uint    `db:"released" bson:"released" comment:"上映时间" json:"released" xml:"released"`
	Image              string  `db:"image" bson:"image" comment:"缩略图" json:"image" xml:"image"`
	ImageOriginal      string  `db:"image_original" bson:"image_original" comment:"原始图" json:"image_original" xml:"image_original"`
	ImagePoster        string  `db:"image_poster" bson:"image_poster" comment:"海报图" json:"image_poster" xml:"image_poster"`
	Summary            string  `db:"summary" bson:"summary" comment:"摘要" json:"summary" xml:"summary"`
	Content            string  `db:"content" bson:"content" comment:"内容" json:"content" xml:"content"`
	Contype            string  `db:"contype" bson:"contype" comment:"内容类型" json:"contype" xml:"contype"`
	Created            uint    `db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated            uint    `db:"updated" bson:"updated" comment:"修改时间" json:"updated" xml:"updated"`
	Disabled           string  `db:"disabled" bson:"disabled" comment:"是否禁用" json:"disabled" xml:"disabled"`
	Template           string  `db:"template" bson:"template" comment:"模版" json:"template" xml:"template"`
	Comments           uint64  `db:"comments" bson:"comments" comment:"评论数量" json:"comments" xml:"comments"`
	CloseComment       string  `db:"close_comment" bson:"close_comment" comment:"关闭评论" json:"close_comment" xml:"close_comment"`
	CommentAutoDisplay string  `db:"comment_auto_display" bson:"comment_auto_display" comment:"自动显示评论" json:"comment_auto_display" xml:"comment_auto_display"`
	Rating             float64 `db:"rating" bson:"rating" comment:"影片最终评分(满分10)" json:"rating" xml:"rating"`
	RatingImdb         float64 `db:"rating_imdb" bson:"rating_imdb" comment:"IMDB评分" json:"rating_imdb" xml:"rating_imdb"`
	RatingDouban       float64 `db:"rating_douban" bson:"rating_douban" comment:"豆瓣评分" json:"rating_douban" xml:"rating_douban"`
	RatingTmdb         float64 `db:"rating_tmdb" bson:"rating_tmdb" comment:"TMDB评分" json:"rating_tmdb" xml:"rating_tmdb"`
	RatingComment      float64 `db:"rating_comment" bson:"rating_comment" comment:"短评评分(满分10)" json:"rating_comment" xml:"rating_comment"`
	RatingComments     uint64  `db:"rating_comments" bson:"rating_comments" comment:"评分评论数量" json:"rating_comments" xml:"rating_comments"`
	RatingReviews      uint64  `db:"rating_reviews" bson:"rating_reviews" comment:"影评数量" json:"rating_reviews" xml:"rating_reviews"`
	RatingReview       float64 `db:"rating_review" bson:"rating_review" comment:"影评评分(满分10)" json:"rating_review" xml:"rating_review"`
	Likes              uint64  `db:"likes" bson:"likes" comment:"好评数量" json:"likes" xml:"likes"`
	Hates              uint64  `db:"hates" bson:"hates" comment:"差评数量" json:"hates" xml:"hates"`
	Views              uint64  `db:"views" bson:"views" comment:"浏览次数" json:"views" xml:"views"`
	Types              string  `db:"types" bson:"types" comment:"类型(多个用半角逗号隔开)" json:"types" xml:"types"`
	Tags               string  `db:"tags" bson:"tags" comment:"标签" json:"tags" xml:"tags"`
	IsPreview          string  `db:"is_preview" bson:"is_preview" comment:"是否(Y/N)是预告片" json:"is_preview" xml:"is_preview"`
	IsMutiple          string  `db:"is_mutiple" bson:"is_mutiple" comment:"是否(Y/N)连续剧" json:"is_mutiple" xml:"is_mutiple"`
	Completed          string  `db:"completed" bson:"completed" comment:"是否(Y/N)已完结" json:"completed" xml:"completed"`
	LatestEpisode      uint    `db:"latest_episode" bson:"latest_episode" comment:"连续剧的最新一集" json:"latest_episode" xml:"latest_episode"`
	Playable           string  `db:"playable" bson:"playable" comment:"是否(Y/N)可播放" json:"playable" xml:"playable"`
	Price              float64 `db:"price" bson:"price" comment:"每集价格" json:"price" xml:"price"`
	Eticket            uint    `db:"eticket" bson:"eticket" comment:"每集观影券" json:"eticket" xml:"eticket"`
	WithEticketPrice   float64 `db:"with_eticket_price" bson:"with_eticket_price" comment:"带观影券时的每集价格" json:"with_eticket_price" xml:"with_eticket_price"`
	Trys               uint    `db:"trys" bson:"trys" comment:"每集试看(秒,0代表不限制)" json:"trys" xml:"trys"`
	FreeLevel          uint    `db:"free_level" bson:"free_level" comment:"免费观看最低等级" json:"free_level" xml:"free_level"`
	FirstLetter        string  `db:"first_letter" bson:"first_letter" comment:"首字母" json:"first_letter" xml:"first_letter"`
	Pinyin             string  `db:"pinyin" bson:"pinyin" comment:"拼音" json:"pinyin" xml:"pinyin"`
	OpeningEnd         uint    `db:"opening_end" bson:"opening_end" comment:"片头结束时间" json:"opening_end" xml:"opening_end"`
	EndingStart        uint    `db:"ending_start" bson:"ending_start" comment:"片尾开始时间" json:"ending_start" xml:"ending_start"`
	SkipsAdDuration    string  `db:"skips_ad_duration" bson:"skips_ad_duration" comment:"跳过广告的时段(多个时段用半角逗号隔开,时段格式:广告开始时间-广告结束时间)" json:"skips_ad_duration" xml:"skips_ad_duration"`
	Recommend          string  `db:"recommend" bson:"recommend" comment:"是否(Y/N)推荐" json:"recommend" xml:"recommend"`
	Licensed           string  `db:"licensed" bson:"licensed" comment:"是否(Y/N)正版授权" json:"licensed" xml:"licensed"`
}

// - base function

func (a *OfficialFilmItem) Trans() factory.Transactioner {
	return a.base.Trans()
}

func (a *OfficialFilmItem) Use(trans factory.Transactioner) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *OfficialFilmItem) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *OfficialFilmItem) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *OfficialFilmItem) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *OfficialFilmItem) Context() echo.Context {
	return a.base.Context()
}

func (a *OfficialFilmItem) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *OfficialFilmItem) ConnID() int {
	return a.base.ConnID()
}

func (a *OfficialFilmItem) SetNamer(namer func(factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *OfficialFilmItem) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *OfficialFilmItem) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *OfficialFilmItem) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

func (a *OfficialFilmItem) New(structName string, connID ...int) factory.Model {
	return a.base.New(structName, connID...)
}

func (a *OfficialFilmItem) Base_() factory.Baser {
	return &a.base
}

// - current function

func (a *OfficialFilmItem) Objects() []*OfficialFilmItem {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *OfficialFilmItem) XObjects() Slice_OfficialFilmItem {
	return Slice_OfficialFilmItem(a.Objects())
}

func (a *OfficialFilmItem) NewObjects() factory.Ranger {
	return &Slice_OfficialFilmItem{}
}

func (a *OfficialFilmItem) InitObjects() *[]*OfficialFilmItem {
	a.objects = []*OfficialFilmItem{}
	return &a.objects
}

func (a *OfficialFilmItem) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *OfficialFilmItem) Short_() string {
	return "official_film_item"
}

func (a *OfficialFilmItem) Struct_() string {
	return "OfficialFilmItem"
}

func (a *OfficialFilmItem) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *OfficialFilmItem) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.SetConnID(source.ConnID())
	a.SetNamer(source.Namer())
	return a
}

func (a *OfficialFilmItem) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *OfficialFilmItem) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialFilmItem:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialFilmItem(*v))
		case []*OfficialFilmItem:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialFilmItem(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialFilmItem) GroupBy(keyField string, inputRows ...[]*OfficialFilmItem) map[string][]*OfficialFilmItem {
	var rows Slice_OfficialFilmItem
	if len(inputRows) > 0 {
		rows = Slice_OfficialFilmItem(inputRows[0])
	} else {
		rows = Slice_OfficialFilmItem(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *OfficialFilmItem) KeyBy(keyField string, inputRows ...[]*OfficialFilmItem) map[string]*OfficialFilmItem {
	var rows Slice_OfficialFilmItem
	if len(inputRows) > 0 {
		rows = Slice_OfficialFilmItem(inputRows[0])
	} else {
		rows = Slice_OfficialFilmItem(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *OfficialFilmItem) AsKV(keyField string, valueField string, inputRows ...[]*OfficialFilmItem) param.Store {
	var rows Slice_OfficialFilmItem
	if len(inputRows) > 0 {
		rows = Slice_OfficialFilmItem(inputRows[0])
	} else {
		rows = Slice_OfficialFilmItem(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *OfficialFilmItem) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*OfficialFilmItem:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialFilmItem(*v))
		case []*OfficialFilmItem:
			err = DBI.FireReaded(a, queryParam, Slice_OfficialFilmItem(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *OfficialFilmItem) Insert() (pk interface{}, err error) {
	a.Created = uint(time.Now().Unix())
	a.Id = 0
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "markdown"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if len(a.CloseComment) == 0 {
		a.CloseComment = "N"
	}
	if len(a.CommentAutoDisplay) == 0 {
		a.CommentAutoDisplay = "N"
	}
	if len(a.IsPreview) == 0 {
		a.IsPreview = "N"
	}
	if len(a.IsMutiple) == 0 {
		a.IsMutiple = "N"
	}
	if len(a.Completed) == 0 {
		a.Completed = "Y"
	}
	if len(a.Playable) == 0 {
		a.Playable = "N"
	}
	if len(a.Recommend) == 0 {
		a.Recommend = "N"
	}
	if len(a.Licensed) == 0 {
		a.Licensed = "N"
	}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *OfficialFilmItem) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "markdown"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if len(a.CloseComment) == 0 {
		a.CloseComment = "N"
	}
	if len(a.CommentAutoDisplay) == 0 {
		a.CommentAutoDisplay = "N"
	}
	if len(a.IsPreview) == 0 {
		a.IsPreview = "N"
	}
	if len(a.IsMutiple) == 0 {
		a.IsMutiple = "N"
	}
	if len(a.Completed) == 0 {
		a.Completed = "Y"
	}
	if len(a.Playable) == 0 {
		a.Playable = "N"
	}
	if len(a.Recommend) == 0 {
		a.Recommend = "N"
	}
	if len(a.Licensed) == 0 {
		a.Licensed = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *OfficialFilmItem) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "markdown"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if len(a.CloseComment) == 0 {
		a.CloseComment = "N"
	}
	if len(a.CommentAutoDisplay) == 0 {
		a.CommentAutoDisplay = "N"
	}
	if len(a.IsPreview) == 0 {
		a.IsPreview = "N"
	}
	if len(a.IsMutiple) == 0 {
		a.IsMutiple = "N"
	}
	if len(a.Completed) == 0 {
		a.Completed = "Y"
	}
	if len(a.Playable) == 0 {
		a.Playable = "N"
	}
	if len(a.Recommend) == 0 {
		a.Recommend = "N"
	}
	if len(a.Licensed) == 0 {
		a.Licensed = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *OfficialFilmItem) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "markdown"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if len(a.CloseComment) == 0 {
		a.CloseComment = "N"
	}
	if len(a.CommentAutoDisplay) == 0 {
		a.CommentAutoDisplay = "N"
	}
	if len(a.IsPreview) == 0 {
		a.IsPreview = "N"
	}
	if len(a.IsMutiple) == 0 {
		a.IsMutiple = "N"
	}
	if len(a.Completed) == 0 {
		a.Completed = "Y"
	}
	if len(a.Playable) == 0 {
		a.Playable = "N"
	}
	if len(a.Recommend) == 0 {
		a.Recommend = "N"
	}
	if len(a.Licensed) == 0 {
		a.Licensed = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialFilmItem) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {
	a.Updated = uint(time.Now().Unix())
	if len(a.OwnerType) == 0 {
		a.OwnerType = "customer"
	}
	if len(a.Contype) == 0 {
		a.Contype = "markdown"
	}
	if len(a.Disabled) == 0 {
		a.Disabled = "N"
	}
	if len(a.CloseComment) == 0 {
		a.CloseComment = "N"
	}
	if len(a.CommentAutoDisplay) == 0 {
		a.CommentAutoDisplay = "N"
	}
	if len(a.IsPreview) == 0 {
		a.IsPreview = "N"
	}
	if len(a.IsMutiple) == 0 {
		a.IsMutiple = "N"
	}
	if len(a.Completed) == 0 {
		a.Completed = "Y"
	}
	if len(a.Playable) == 0 {
		a.Playable = "N"
	}
	if len(a.Recommend) == 0 {
		a.Recommend = "N"
	}
	if len(a.Licensed) == 0 {
		a.Licensed = "N"
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *OfficialFilmItem) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *OfficialFilmItem) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {

	if val, ok := kvset["owner_type"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["owner_type"] = "customer"
		}
	}
	if val, ok := kvset["contype"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["contype"] = "markdown"
		}
	}
	if val, ok := kvset["disabled"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["disabled"] = "N"
		}
	}
	if val, ok := kvset["close_comment"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["close_comment"] = "N"
		}
	}
	if val, ok := kvset["comment_auto_display"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["comment_auto_display"] = "N"
		}
	}
	if val, ok := kvset["is_preview"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["is_preview"] = "N"
		}
	}
	if val, ok := kvset["is_mutiple"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["is_mutiple"] = "N"
		}
	}
	if val, ok := kvset["completed"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["completed"] = "Y"
		}
	}
	if val, ok := kvset["playable"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["playable"] = "N"
		}
	}
	if val, ok := kvset["recommend"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["recommend"] = "N"
		}
	}
	if val, ok := kvset["licensed"]; ok && val != nil {
		if v, ok := val.(string); ok && len(v) == 0 {
			kvset["licensed"] = "N"
		}
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *OfficialFilmItem) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *OfficialFilmItem) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error {
		a.Updated = uint(time.Now().Unix())
		if len(a.OwnerType) == 0 {
			a.OwnerType = "customer"
		}
		if len(a.Contype) == 0 {
			a.Contype = "markdown"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if len(a.CloseComment) == 0 {
			a.CloseComment = "N"
		}
		if len(a.CommentAutoDisplay) == 0 {
			a.CommentAutoDisplay = "N"
		}
		if len(a.IsPreview) == 0 {
			a.IsPreview = "N"
		}
		if len(a.IsMutiple) == 0 {
			a.IsMutiple = "N"
		}
		if len(a.Completed) == 0 {
			a.Completed = "Y"
		}
		if len(a.Playable) == 0 {
			a.Playable = "N"
		}
		if len(a.Recommend) == 0 {
			a.Recommend = "N"
		}
		if len(a.Licensed) == 0 {
			a.Licensed = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error {
		a.Created = uint(time.Now().Unix())
		a.Id = 0
		if len(a.OwnerType) == 0 {
			a.OwnerType = "customer"
		}
		if len(a.Contype) == 0 {
			a.Contype = "markdown"
		}
		if len(a.Disabled) == 0 {
			a.Disabled = "N"
		}
		if len(a.CloseComment) == 0 {
			a.CloseComment = "N"
		}
		if len(a.CommentAutoDisplay) == 0 {
			a.CommentAutoDisplay = "N"
		}
		if len(a.IsPreview) == 0 {
			a.IsPreview = "N"
		}
		if len(a.IsMutiple) == 0 {
			a.IsMutiple = "N"
		}
		if len(a.Completed) == 0 {
			a.Completed = "Y"
		}
		if len(a.Playable) == 0 {
			a.Playable = "N"
		}
		if len(a.Recommend) == 0 {
			a.Recommend = "N"
		}
		if len(a.Licensed) == 0 {
			a.Licensed = "N"
		}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			a.Id = v
		} else if v, y := pk.(int64); y {
			a.Id = uint64(v)
		}
	}
	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	}
	return
}

func (a *OfficialFilmItem) Delete(mw func(db.Result) db.Result, args ...interface{}) (err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *OfficialFilmItem) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {

	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *OfficialFilmItem) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *OfficialFilmItem) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *OfficialFilmItem) Reset() *OfficialFilmItem {
	a.Id = 0
	a.Sn = ``
	a.Category1 = 0
	a.Category2 = 0
	a.Category3 = 0
	a.CategoryId = 0
	a.OwnerId = 0
	a.OwnerType = ``
	a.Title = ``
	a.Name = ``
	a.Alias = ``
	a.Keywords = ``
	a.Chapter = 0
	a.PictureQuality = ``
	a.MainActors = ``
	a.Directors = ``
	a.Screenwriters = ``
	a.IssuedAreas = ``
	a.IssuedYear = 0
	a.Languages = ``
	a.Duration = 0
	a.Released = 0
	a.Image = ``
	a.ImageOriginal = ``
	a.ImagePoster = ``
	a.Summary = ``
	a.Content = ``
	a.Contype = ``
	a.Created = 0
	a.Updated = 0
	a.Disabled = ``
	a.Template = ``
	a.Comments = 0
	a.CloseComment = ``
	a.CommentAutoDisplay = ``
	a.Rating = 0.0
	a.RatingImdb = 0.0
	a.RatingDouban = 0.0
	a.RatingTmdb = 0.0
	a.RatingComment = 0.0
	a.RatingComments = 0
	a.RatingReviews = 0
	a.RatingReview = 0.0
	a.Likes = 0
	a.Hates = 0
	a.Views = 0
	a.Types = ``
	a.Tags = ``
	a.IsPreview = ``
	a.IsMutiple = ``
	a.Completed = ``
	a.LatestEpisode = 0
	a.Playable = ``
	a.Price = 0.0
	a.Eticket = 0
	a.WithEticketPrice = 0.0
	a.Trys = 0
	a.FreeLevel = 0
	a.FirstLetter = ``
	a.Pinyin = ``
	a.OpeningEnd = 0
	a.EndingStart = 0
	a.SkipsAdDuration = ``
	a.Recommend = ``
	a.Licensed = ``
	return a
}

func (a *OfficialFilmItem) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["Id"] = a.Id
		r["Sn"] = a.Sn
		r["Category1"] = a.Category1
		r["Category2"] = a.Category2
		r["Category3"] = a.Category3
		r["CategoryId"] = a.CategoryId
		r["OwnerId"] = a.OwnerId
		r["OwnerType"] = a.OwnerType
		r["Title"] = a.Title
		r["Name"] = a.Name
		r["Alias"] = a.Alias
		r["Keywords"] = a.Keywords
		r["Chapter"] = a.Chapter
		r["PictureQuality"] = a.PictureQuality
		r["MainActors"] = a.MainActors
		r["Directors"] = a.Directors
		r["Screenwriters"] = a.Screenwriters
		r["IssuedAreas"] = a.IssuedAreas
		r["IssuedYear"] = a.IssuedYear
		r["Languages"] = a.Languages
		r["Duration"] = a.Duration
		r["Released"] = a.Released
		r["Image"] = a.Image
		r["ImageOriginal"] = a.ImageOriginal
		r["ImagePoster"] = a.ImagePoster
		r["Summary"] = a.Summary
		r["Content"] = a.Content
		r["Contype"] = a.Contype
		r["Created"] = a.Created
		r["Updated"] = a.Updated
		r["Disabled"] = a.Disabled
		r["Template"] = a.Template
		r["Comments"] = a.Comments
		r["CloseComment"] = a.CloseComment
		r["CommentAutoDisplay"] = a.CommentAutoDisplay
		r["Rating"] = a.Rating
		r["RatingImdb"] = a.RatingImdb
		r["RatingDouban"] = a.RatingDouban
		r["RatingTmdb"] = a.RatingTmdb
		r["RatingComment"] = a.RatingComment
		r["RatingComments"] = a.RatingComments
		r["RatingReviews"] = a.RatingReviews
		r["RatingReview"] = a.RatingReview
		r["Likes"] = a.Likes
		r["Hates"] = a.Hates
		r["Views"] = a.Views
		r["Types"] = a.Types
		r["Tags"] = a.Tags
		r["IsPreview"] = a.IsPreview
		r["IsMutiple"] = a.IsMutiple
		r["Completed"] = a.Completed
		r["LatestEpisode"] = a.LatestEpisode
		r["Playable"] = a.Playable
		r["Price"] = a.Price
		r["Eticket"] = a.Eticket
		r["WithEticketPrice"] = a.WithEticketPrice
		r["Trys"] = a.Trys
		r["FreeLevel"] = a.FreeLevel
		r["FirstLetter"] = a.FirstLetter
		r["Pinyin"] = a.Pinyin
		r["OpeningEnd"] = a.OpeningEnd
		r["EndingStart"] = a.EndingStart
		r["SkipsAdDuration"] = a.SkipsAdDuration
		r["Recommend"] = a.Recommend
		r["Licensed"] = a.Licensed
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "Id":
			r["Id"] = a.Id
		case "Sn":
			r["Sn"] = a.Sn
		case "Category1":
			r["Category1"] = a.Category1
		case "Category2":
			r["Category2"] = a.Category2
		case "Category3":
			r["Category3"] = a.Category3
		case "CategoryId":
			r["CategoryId"] = a.CategoryId
		case "OwnerId":
			r["OwnerId"] = a.OwnerId
		case "OwnerType":
			r["OwnerType"] = a.OwnerType
		case "Title":
			r["Title"] = a.Title
		case "Name":
			r["Name"] = a.Name
		case "Alias":
			r["Alias"] = a.Alias
		case "Keywords":
			r["Keywords"] = a.Keywords
		case "Chapter":
			r["Chapter"] = a.Chapter
		case "PictureQuality":
			r["PictureQuality"] = a.PictureQuality
		case "MainActors":
			r["MainActors"] = a.MainActors
		case "Directors":
			r["Directors"] = a.Directors
		case "Screenwriters":
			r["Screenwriters"] = a.Screenwriters
		case "IssuedAreas":
			r["IssuedAreas"] = a.IssuedAreas
		case "IssuedYear":
			r["IssuedYear"] = a.IssuedYear
		case "Languages":
			r["Languages"] = a.Languages
		case "Duration":
			r["Duration"] = a.Duration
		case "Released":
			r["Released"] = a.Released
		case "Image":
			r["Image"] = a.Image
		case "ImageOriginal":
			r["ImageOriginal"] = a.ImageOriginal
		case "ImagePoster":
			r["ImagePoster"] = a.ImagePoster
		case "Summary":
			r["Summary"] = a.Summary
		case "Content":
			r["Content"] = a.Content
		case "Contype":
			r["Contype"] = a.Contype
		case "Created":
			r["Created"] = a.Created
		case "Updated":
			r["Updated"] = a.Updated
		case "Disabled":
			r["Disabled"] = a.Disabled
		case "Template":
			r["Template"] = a.Template
		case "Comments":
			r["Comments"] = a.Comments
		case "CloseComment":
			r["CloseComment"] = a.CloseComment
		case "CommentAutoDisplay":
			r["CommentAutoDisplay"] = a.CommentAutoDisplay
		case "Rating":
			r["Rating"] = a.Rating
		case "RatingImdb":
			r["RatingImdb"] = a.RatingImdb
		case "RatingDouban":
			r["RatingDouban"] = a.RatingDouban
		case "RatingTmdb":
			r["RatingTmdb"] = a.RatingTmdb
		case "RatingComment":
			r["RatingComment"] = a.RatingComment
		case "RatingComments":
			r["RatingComments"] = a.RatingComments
		case "RatingReviews":
			r["RatingReviews"] = a.RatingReviews
		case "RatingReview":
			r["RatingReview"] = a.RatingReview
		case "Likes":
			r["Likes"] = a.Likes
		case "Hates":
			r["Hates"] = a.Hates
		case "Views":
			r["Views"] = a.Views
		case "Types":
			r["Types"] = a.Types
		case "Tags":
			r["Tags"] = a.Tags
		case "IsPreview":
			r["IsPreview"] = a.IsPreview
		case "IsMutiple":
			r["IsMutiple"] = a.IsMutiple
		case "Completed":
			r["Completed"] = a.Completed
		case "LatestEpisode":
			r["LatestEpisode"] = a.LatestEpisode
		case "Playable":
			r["Playable"] = a.Playable
		case "Price":
			r["Price"] = a.Price
		case "Eticket":
			r["Eticket"] = a.Eticket
		case "WithEticketPrice":
			r["WithEticketPrice"] = a.WithEticketPrice
		case "Trys":
			r["Trys"] = a.Trys
		case "FreeLevel":
			r["FreeLevel"] = a.FreeLevel
		case "FirstLetter":
			r["FirstLetter"] = a.FirstLetter
		case "Pinyin":
			r["Pinyin"] = a.Pinyin
		case "OpeningEnd":
			r["OpeningEnd"] = a.OpeningEnd
		case "EndingStart":
			r["EndingStart"] = a.EndingStart
		case "SkipsAdDuration":
			r["SkipsAdDuration"] = a.SkipsAdDuration
		case "Recommend":
			r["Recommend"] = a.Recommend
		case "Licensed":
			r["Licensed"] = a.Licensed
		}
	}
	return r
}

func (a *OfficialFilmItem) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
		case "id":
			a.Id = param.AsUint64(value)
		case "sn":
			a.Sn = param.AsString(value)
		case "category1":
			a.Category1 = param.AsUint(value)
		case "category2":
			a.Category2 = param.AsUint(value)
		case "category3":
			a.Category3 = param.AsUint(value)
		case "category_id":
			a.CategoryId = param.AsUint(value)
		case "owner_id":
			a.OwnerId = param.AsUint64(value)
		case "owner_type":
			a.OwnerType = param.AsString(value)
		case "title":
			a.Title = param.AsString(value)
		case "name":
			a.Name = param.AsString(value)
		case "alias":
			a.Alias = param.AsString(value)
		case "keywords":
			a.Keywords = param.AsString(value)
		case "chapter":
			a.Chapter = param.AsUint(value)
		case "picture_quality":
			a.PictureQuality = param.AsString(value)
		case "main_actors":
			a.MainActors = param.AsString(value)
		case "directors":
			a.Directors = param.AsString(value)
		case "screenwriters":
			a.Screenwriters = param.AsString(value)
		case "issued_areas":
			a.IssuedAreas = param.AsString(value)
		case "issued_year":
			a.IssuedYear = param.AsUint(value)
		case "languages":
			a.Languages = param.AsString(value)
		case "duration":
			a.Duration = param.AsUint(value)
		case "released":
			a.Released = param.AsUint(value)
		case "image":
			a.Image = param.AsString(value)
		case "image_original":
			a.ImageOriginal = param.AsString(value)
		case "image_poster":
			a.ImagePoster = param.AsString(value)
		case "summary":
			a.Summary = param.AsString(value)
		case "content":
			a.Content = param.AsString(value)
		case "contype":
			a.Contype = param.AsString(value)
		case "created":
			a.Created = param.AsUint(value)
		case "updated":
			a.Updated = param.AsUint(value)
		case "disabled":
			a.Disabled = param.AsString(value)
		case "template":
			a.Template = param.AsString(value)
		case "comments":
			a.Comments = param.AsUint64(value)
		case "close_comment":
			a.CloseComment = param.AsString(value)
		case "comment_auto_display":
			a.CommentAutoDisplay = param.AsString(value)
		case "rating":
			a.Rating = param.AsFloat64(value)
		case "rating_imdb":
			a.RatingImdb = param.AsFloat64(value)
		case "rating_douban":
			a.RatingDouban = param.AsFloat64(value)
		case "rating_tmdb":
			a.RatingTmdb = param.AsFloat64(value)
		case "rating_comment":
			a.RatingComment = param.AsFloat64(value)
		case "rating_comments":
			a.RatingComments = param.AsUint64(value)
		case "rating_reviews":
			a.RatingReviews = param.AsUint64(value)
		case "rating_review":
			a.RatingReview = param.AsFloat64(value)
		case "likes":
			a.Likes = param.AsUint64(value)
		case "hates":
			a.Hates = param.AsUint64(value)
		case "views":
			a.Views = param.AsUint64(value)
		case "types":
			a.Types = param.AsString(value)
		case "tags":
			a.Tags = param.AsString(value)
		case "is_preview":
			a.IsPreview = param.AsString(value)
		case "is_mutiple":
			a.IsMutiple = param.AsString(value)
		case "completed":
			a.Completed = param.AsString(value)
		case "latest_episode":
			a.LatestEpisode = param.AsUint(value)
		case "playable":
			a.Playable = param.AsString(value)
		case "price":
			a.Price = param.AsFloat64(value)
		case "eticket":
			a.Eticket = param.AsUint(value)
		case "with_eticket_price":
			a.WithEticketPrice = param.AsFloat64(value)
		case "trys":
			a.Trys = param.AsUint(value)
		case "free_level":
			a.FreeLevel = param.AsUint(value)
		case "first_letter":
			a.FirstLetter = param.AsString(value)
		case "pinyin":
			a.Pinyin = param.AsString(value)
		case "opening_end":
			a.OpeningEnd = param.AsUint(value)
		case "ending_start":
			a.EndingStart = param.AsUint(value)
		case "skips_ad_duration":
			a.SkipsAdDuration = param.AsString(value)
		case "recommend":
			a.Recommend = param.AsString(value)
		case "licensed":
			a.Licensed = param.AsString(value)
		}
	}
}

func (a *OfficialFilmItem) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
	case map[string]interface{}:
		for kk, vv := range k {
			a.Set(kk, vv)
		}
	default:
		var (
			kk string
			vv interface{}
		)
		if k, y := key.(string); y {
			kk = k
		} else {
			kk = fmt.Sprint(key)
		}
		if len(value) > 0 {
			vv = value[0]
		}
		switch kk {
		case "Id":
			a.Id = param.AsUint64(vv)
		case "Sn":
			a.Sn = param.AsString(vv)
		case "Category1":
			a.Category1 = param.AsUint(vv)
		case "Category2":
			a.Category2 = param.AsUint(vv)
		case "Category3":
			a.Category3 = param.AsUint(vv)
		case "CategoryId":
			a.CategoryId = param.AsUint(vv)
		case "OwnerId":
			a.OwnerId = param.AsUint64(vv)
		case "OwnerType":
			a.OwnerType = param.AsString(vv)
		case "Title":
			a.Title = param.AsString(vv)
		case "Name":
			a.Name = param.AsString(vv)
		case "Alias":
			a.Alias = param.AsString(vv)
		case "Keywords":
			a.Keywords = param.AsString(vv)
		case "Chapter":
			a.Chapter = param.AsUint(vv)
		case "PictureQuality":
			a.PictureQuality = param.AsString(vv)
		case "MainActors":
			a.MainActors = param.AsString(vv)
		case "Directors":
			a.Directors = param.AsString(vv)
		case "Screenwriters":
			a.Screenwriters = param.AsString(vv)
		case "IssuedAreas":
			a.IssuedAreas = param.AsString(vv)
		case "IssuedYear":
			a.IssuedYear = param.AsUint(vv)
		case "Languages":
			a.Languages = param.AsString(vv)
		case "Duration":
			a.Duration = param.AsUint(vv)
		case "Released":
			a.Released = param.AsUint(vv)
		case "Image":
			a.Image = param.AsString(vv)
		case "ImageOriginal":
			a.ImageOriginal = param.AsString(vv)
		case "ImagePoster":
			a.ImagePoster = param.AsString(vv)
		case "Summary":
			a.Summary = param.AsString(vv)
		case "Content":
			a.Content = param.AsString(vv)
		case "Contype":
			a.Contype = param.AsString(vv)
		case "Created":
			a.Created = param.AsUint(vv)
		case "Updated":
			a.Updated = param.AsUint(vv)
		case "Disabled":
			a.Disabled = param.AsString(vv)
		case "Template":
			a.Template = param.AsString(vv)
		case "Comments":
			a.Comments = param.AsUint64(vv)
		case "CloseComment":
			a.CloseComment = param.AsString(vv)
		case "CommentAutoDisplay":
			a.CommentAutoDisplay = param.AsString(vv)
		case "Rating":
			a.Rating = param.AsFloat64(vv)
		case "RatingImdb":
			a.RatingImdb = param.AsFloat64(vv)
		case "RatingDouban":
			a.RatingDouban = param.AsFloat64(vv)
		case "RatingTmdb":
			a.RatingTmdb = param.AsFloat64(vv)
		case "RatingComment":
			a.RatingComment = param.AsFloat64(vv)
		case "RatingComments":
			a.RatingComments = param.AsUint64(vv)
		case "RatingReviews":
			a.RatingReviews = param.AsUint64(vv)
		case "RatingReview":
			a.RatingReview = param.AsFloat64(vv)
		case "Likes":
			a.Likes = param.AsUint64(vv)
		case "Hates":
			a.Hates = param.AsUint64(vv)
		case "Views":
			a.Views = param.AsUint64(vv)
		case "Types":
			a.Types = param.AsString(vv)
		case "Tags":
			a.Tags = param.AsString(vv)
		case "IsPreview":
			a.IsPreview = param.AsString(vv)
		case "IsMutiple":
			a.IsMutiple = param.AsString(vv)
		case "Completed":
			a.Completed = param.AsString(vv)
		case "LatestEpisode":
			a.LatestEpisode = param.AsUint(vv)
		case "Playable":
			a.Playable = param.AsString(vv)
		case "Price":
			a.Price = param.AsFloat64(vv)
		case "Eticket":
			a.Eticket = param.AsUint(vv)
		case "WithEticketPrice":
			a.WithEticketPrice = param.AsFloat64(vv)
		case "Trys":
			a.Trys = param.AsUint(vv)
		case "FreeLevel":
			a.FreeLevel = param.AsUint(vv)
		case "FirstLetter":
			a.FirstLetter = param.AsString(vv)
		case "Pinyin":
			a.Pinyin = param.AsString(vv)
		case "OpeningEnd":
			a.OpeningEnd = param.AsUint(vv)
		case "EndingStart":
			a.EndingStart = param.AsUint(vv)
		case "SkipsAdDuration":
			a.SkipsAdDuration = param.AsString(vv)
		case "Recommend":
			a.Recommend = param.AsString(vv)
		case "Licensed":
			a.Licensed = param.AsString(vv)
		}
	}
}

func (a *OfficialFilmItem) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		r["id"] = a.Id
		r["sn"] = a.Sn
		r["category1"] = a.Category1
		r["category2"] = a.Category2
		r["category3"] = a.Category3
		r["category_id"] = a.CategoryId
		r["owner_id"] = a.OwnerId
		r["owner_type"] = a.OwnerType
		r["title"] = a.Title
		r["name"] = a.Name
		r["alias"] = a.Alias
		r["keywords"] = a.Keywords
		r["chapter"] = a.Chapter
		r["picture_quality"] = a.PictureQuality
		r["main_actors"] = a.MainActors
		r["directors"] = a.Directors
		r["screenwriters"] = a.Screenwriters
		r["issued_areas"] = a.IssuedAreas
		r["issued_year"] = a.IssuedYear
		r["languages"] = a.Languages
		r["duration"] = a.Duration
		r["released"] = a.Released
		r["image"] = a.Image
		r["image_original"] = a.ImageOriginal
		r["image_poster"] = a.ImagePoster
		r["summary"] = a.Summary
		r["content"] = a.Content
		r["contype"] = a.Contype
		r["created"] = a.Created
		r["updated"] = a.Updated
		r["disabled"] = a.Disabled
		r["template"] = a.Template
		r["comments"] = a.Comments
		r["close_comment"] = a.CloseComment
		r["comment_auto_display"] = a.CommentAutoDisplay
		r["rating"] = a.Rating
		r["rating_imdb"] = a.RatingImdb
		r["rating_douban"] = a.RatingDouban
		r["rating_tmdb"] = a.RatingTmdb
		r["rating_comment"] = a.RatingComment
		r["rating_comments"] = a.RatingComments
		r["rating_reviews"] = a.RatingReviews
		r["rating_review"] = a.RatingReview
		r["likes"] = a.Likes
		r["hates"] = a.Hates
		r["views"] = a.Views
		r["types"] = a.Types
		r["tags"] = a.Tags
		r["is_preview"] = a.IsPreview
		r["is_mutiple"] = a.IsMutiple
		r["completed"] = a.Completed
		r["latest_episode"] = a.LatestEpisode
		r["playable"] = a.Playable
		r["price"] = a.Price
		r["eticket"] = a.Eticket
		r["with_eticket_price"] = a.WithEticketPrice
		r["trys"] = a.Trys
		r["free_level"] = a.FreeLevel
		r["first_letter"] = a.FirstLetter
		r["pinyin"] = a.Pinyin
		r["opening_end"] = a.OpeningEnd
		r["ending_start"] = a.EndingStart
		r["skips_ad_duration"] = a.SkipsAdDuration
		r["recommend"] = a.Recommend
		r["licensed"] = a.Licensed
		return r
	}
	for _, field := range onlyFields {
		switch field {
		case "id":
			r["id"] = a.Id
		case "sn":
			r["sn"] = a.Sn
		case "category1":
			r["category1"] = a.Category1
		case "category2":
			r["category2"] = a.Category2
		case "category3":
			r["category3"] = a.Category3
		case "category_id":
			r["category_id"] = a.CategoryId
		case "owner_id":
			r["owner_id"] = a.OwnerId
		case "owner_type":
			r["owner_type"] = a.OwnerType
		case "title":
			r["title"] = a.Title
		case "name":
			r["name"] = a.Name
		case "alias":
			r["alias"] = a.Alias
		case "keywords":
			r["keywords"] = a.Keywords
		case "chapter":
			r["chapter"] = a.Chapter
		case "picture_quality":
			r["picture_quality"] = a.PictureQuality
		case "main_actors":
			r["main_actors"] = a.MainActors
		case "directors":
			r["directors"] = a.Directors
		case "screenwriters":
			r["screenwriters"] = a.Screenwriters
		case "issued_areas":
			r["issued_areas"] = a.IssuedAreas
		case "issued_year":
			r["issued_year"] = a.IssuedYear
		case "languages":
			r["languages"] = a.Languages
		case "duration":
			r["duration"] = a.Duration
		case "released":
			r["released"] = a.Released
		case "image":
			r["image"] = a.Image
		case "image_original":
			r["image_original"] = a.ImageOriginal
		case "image_poster":
			r["image_poster"] = a.ImagePoster
		case "summary":
			r["summary"] = a.Summary
		case "content":
			r["content"] = a.Content
		case "contype":
			r["contype"] = a.Contype
		case "created":
			r["created"] = a.Created
		case "updated":
			r["updated"] = a.Updated
		case "disabled":
			r["disabled"] = a.Disabled
		case "template":
			r["template"] = a.Template
		case "comments":
			r["comments"] = a.Comments
		case "close_comment":
			r["close_comment"] = a.CloseComment
		case "comment_auto_display":
			r["comment_auto_display"] = a.CommentAutoDisplay
		case "rating":
			r["rating"] = a.Rating
		case "rating_imdb":
			r["rating_imdb"] = a.RatingImdb
		case "rating_douban":
			r["rating_douban"] = a.RatingDouban
		case "rating_tmdb":
			r["rating_tmdb"] = a.RatingTmdb
		case "rating_comment":
			r["rating_comment"] = a.RatingComment
		case "rating_comments":
			r["rating_comments"] = a.RatingComments
		case "rating_reviews":
			r["rating_reviews"] = a.RatingReviews
		case "rating_review":
			r["rating_review"] = a.RatingReview
		case "likes":
			r["likes"] = a.Likes
		case "hates":
			r["hates"] = a.Hates
		case "views":
			r["views"] = a.Views
		case "types":
			r["types"] = a.Types
		case "tags":
			r["tags"] = a.Tags
		case "is_preview":
			r["is_preview"] = a.IsPreview
		case "is_mutiple":
			r["is_mutiple"] = a.IsMutiple
		case "completed":
			r["completed"] = a.Completed
		case "latest_episode":
			r["latest_episode"] = a.LatestEpisode
		case "playable":
			r["playable"] = a.Playable
		case "price":
			r["price"] = a.Price
		case "eticket":
			r["eticket"] = a.Eticket
		case "with_eticket_price":
			r["with_eticket_price"] = a.WithEticketPrice
		case "trys":
			r["trys"] = a.Trys
		case "free_level":
			r["free_level"] = a.FreeLevel
		case "first_letter":
			r["first_letter"] = a.FirstLetter
		case "pinyin":
			r["pinyin"] = a.Pinyin
		case "opening_end":
			r["opening_end"] = a.OpeningEnd
		case "ending_start":
			r["ending_start"] = a.EndingStart
		case "skips_ad_duration":
			r["skips_ad_duration"] = a.SkipsAdDuration
		case "recommend":
			r["recommend"] = a.Recommend
		case "licensed":
			r["licensed"] = a.Licensed
		}
	}
	return r
}

func (a *OfficialFilmItem) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialFilmItem) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *OfficialFilmItem) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *OfficialFilmItem) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
