// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x59\x6f\xdb\xca\xd5\xcf\xe2\xaf\x98\x08\x41\x30\x0c\x14\x3a\x0f\x1f\xbe\x07\x07\x2a\x6a\x27\xf1\xad\xe1\xc6\x09\xec\xdc\xb4\x80\x61\x04\x23\xf2\x50\x66\xc5\x45\x1d\x8e\xb6\x4b\xf0\xbf\x17\xb3\x91\xc3\x9d\x72\x9c\x34\x69\x0b\x04\xb1\x34\x3c\x73\xf6\x75\x38\x3a\x39\x41\x7f\x5e\x42\x0c\x94\x30\xf0\xd0\xbb\x04\xc5\x09\x43\xe0\x05\x0c\xb1\x87\x20\x45\x7e\x10\xc2\x0c\xed\x1e\x02\xf7\x01\x05\x29\x22\x1b\x96\x44\x84\x05\x2e\x09\xc3\x03\x2a\xf7\x2d\x0e\x88\x3d\x80\x5e\x48\xa8\x63\x59\x6b\xe2\xae\xc8\x12\x50\x96\x39\x9f\xe4\xc7\x6b\x12\x41\x9e\x5b\x56\x10\xad\x13\xca\x10\xb6\x26\x53\x3f\x62\x53\x6b\x92\x65\x94\xc4\x4b\x40\xcf\x57\x33\xf4\x7c\x8b\x4e\xe7\xc8\xb9\x14\x30\x69\x9e\x5b\x93\x69\x96\x3d\xdf\xe6\xb9\x80\x83\xd8\xe3\x18\x26\xd3\x65\xc0\x1e\x36\x0b\xc7\x4d\xa2\x93\x1d\x2c\xf6\xaf\x58\xb2\x3e\x71\x93\x68\xda\xf1\xc8\x5b\x74\x3f\x39\x09\x83\xc5\x89\x4f\x5c\x96\xd0\x43\x17\x14\xb8\x0f\x49\xdf\xb3\x93\x35\xa1\x24\x9a\x5a\xb6\x65\xb1\xc3\x1a\xd0\x6d\x18\xb8\xf0\x35\xcb\x9c\x5b\x46\x37\x2e\x93\x92\xa3\xbb\xfb\x97\xb5\x25\xcb\xf2\x37\xb1\x8b\x70\xda\xbe\xc3\x46\x37\x5c\x31\xd8\x8f\x11\x87\xc3\x11\x52\x7c\x3a\x1f\x12\x0f\x42\x1b\x01\xa5\x09\x45\xfa\x6f\x66\x4d\xfc\x84\xa2\xaf\x33\x24\x94\x28\x95\x9a\xf2\xe5\x49\xe0\x73\x18\xbe\xea\xc7\x78\x6b\xbf\x11\xdf\x9e\xcd\x51\x1c\x84\xe2\xf9\x84\x02\xdb\xd0\x98\x2f\x5b\x93\x49\x6e\xf1\x7f\x6a\x29\x0e\x42\x6b\x24\xa3\x37\x64\x67\xf0\x5a\x17\xf6\x67\x62\xf7\x37\x9a\x6c\xd6\xe7\x07\xbc\x82\xc3\x45\x00\xa1\x87\x52\x46\x83\x78\x69\xa3\x88\xac\xef\xe4\xe7\xfb\xa6\xb9\x38\x6d\xc1\x55\x2f\x54\x96\x17\x82\xd1\x64\x57\x17\xcd\x8b\xc8\x5a\xac\x25\x3b\xe7\x2c\xfd\x40\xd6\xd8\xb6\x26\x93\xed\x0a\x0e\x42\xdc\x88\x39\xb7\x6b\x1a\xc4\x0c\x73\xc0\x3b\xcd\xdf\xbd\x2d\xb5\xf2\x75\x86\x04\x1c\xbd\xe3\x3b\xee\xdf\xa0\x67\x07\xa5\x10\xb9\x80\xe6\x2d\x5e\xc6\x19\xe2\x1a\x32\x80\xc8\x7a\x0d\xb1\x87\xd5\x82\x60\xd4\x36\xb5\x48\x47\xe8\xf0\x0a\x0e\x03\x1a\x1c\xa3\xbf\x1f\xa6\xbd\x52\x78\x9a\xec\x8e\x95\xf5\x2c\xbd\xfa\x52\x17\x75\x86\xb6\x24\xdc\x40\x55\x7a\x91\x08\x9c\x5b\x96\x50\x28\xa4\x35\xd6\x7e\x80\x74\xe2\x59\xc9\xd9\xfd\xb1\xa2\x7e\xa6\x24\x4e\xfd\x84\x46\x98\x89\x4f\x40\x53\xd3\x5e\x52\x98\xcf\xea\x91\x8d\xee\xee\xdb\x44\x8e\xc8\x0a\x70\xe5\xd1\x2c\x84\x18\xa7\xb6\x2d\xe5\x0f\xbc\x7d\xab\x06\xe8\x5d\xe0\xed\x95\x8d\xb4\x0a\x9c\x16\x8e\x9a\xce\x3a\x24\xd6\x05\x4d\xa2\xbf\x06\x29\xc3\x1e\x61\x04\x05\x31\x03\xea\x13\x17\xb2\xdc\xee\xc8\xd6\x99\x35\x11\x5a\x4c\x67\x28\x59\x71\x3e\xf9\x46\x07\x37\xc3\xcb\xb6\x78\x64\x3e\x4b\x56\x42\x02\x9d\xd2\xf8\xd6\x52\x3a\xbd\xb7\x42\x57\x06\xae\x54\xc2\x8b\xb6\x98\xe5\x0f\x1d\xce\xf8\x4d\xb2\xc3\x02\xa3\x83\x0d\x53\x98\xc8\xb8\x0f\x4c\xd2\x32\xb2\x53\x1d\xd3\x32\xf0\xa5\xa2\x52\xa1\xb5\x2a\x94\x94\xd1\x71\x1c\xdb\x9a\x58\x25\xa0\xf6\x93\x6b\xd8\xd5\x38\xc3\x2e\xdb\x23\x5e\xf4\x9c\xb7\x49\xcc\x60\xcf\xec\x46\xa6\xe7\x92\x45\x5d\x52\x45\xce\x2d\x30\xb5\x95\xe3\xb2\x0b\xaa\x11\xe2\x64\x4f\x4e\x50\x03\x9d\xfe\xfe\x36\x89\x22\x88\x59\x9e\xcb\x32\x5b\x87\x4b\xc5\x17\x4e\x7d\x41\x52\x40\x08\x15\xf5\xf2\x9c\xa4\x60\x4d\x92\xc5\x3f\xc0\x65\x69\x5b\x21\x6e\x6b\x42\x24\xc0\x19\x63\x34\x58\x6c\x18\xa4\x12\xec\xf9\x16\xbd\x92\x9f\x64\x37\x22\x59\x7e\x85\x04\x49\xae\x33\x16\x24\xb1\x76\x47\xd2\x52\x05\x85\x3b\x63\x1b\xbd\xd4\xcc\x89\x05\x22\xf6\x89\x00\x92\xda\x20\x0e\xc7\xe8\x28\xe8\x32\x70\xdb\x50\xfe\x9e\x82\x8c\x8d\x56\xa4\x76\xb5\x6d\xe0\x34\x14\xf2\x62\x5f\x69\x04\xd2\x4f\xa9\x6a\xbb\x9a\x1f\x74\x91\xe9\x32\xf8\x00\xad\xf7\x5b\x88\xd9\xc7\x6b\x9c\xc4\xc8\x71\x9c\x45\x92\x84\xdd\x24\x4a\x58\xe9\xca\xc7\x50\xb8\xb8\xc0\x89\xef\x8f\xa5\x21\xa1\x8f\xa1\xa2\x65\xb7\x2b\xea\x6a\x9a\xba\x80\x1b\x63\x82\xf8\xf2\x1d\x76\xc5\x1f\x9e\xcc\x86\x74\x5f\x42\x1f\x63\x69\xfe\x91\xe2\x98\xff\x8f\x24\x60\xad\xff\xd4\x55\xaf\x87\xb8\x81\x63\x34\x69\xb9\xc7\x96\x8d\x64\x2b\xc9\xa6\xf2\xd4\x9e\x41\x99\x3e\xf1\x92\x84\x45\x61\x2a\x83\x45\x2c\xf6\x8a\x61\x6c\x1b\x2d\x86\xdc\x13\xed\xa4\x1c\xde\xc2\xb9\x81\x74\x13\x32\x1b\x15\x1f\x67\x88\xd0\x65\xca\x3d\xaf\x52\x18\xaa\x7c\x71\x46\x02\x5f\xcb\x29\x91\xda\x68\x5e\x76\xc3\x85\x22\xae\x61\xa7\x1e\x73\x96\x3f\x04\x9e\x17\xc2\x8e\x50\xc0\xd1\x4e\xac\x9c\xd1\x65\x8a\x39\x45\xe9\xbd\x79\x5d\x87\x47\x6c\xd6\x59\xcf\xdd\x50\x0a\x31\x1b\x95\xf8\xae\x61\x87\xd3\x62\xa5\xe8\xa2\x94\x17\x4b\x25\xb4\x18\x21\xf0\x11\xef\x1d\x94\xfb\xa2\x3f\xa1\xd7\xa6\xd4\x1a\xfc\x1a\x76\x62\x87\x41\x61\x26\xb7\xdc\xbd\xbe\xb7\x45\xa6\xab\x66\xd4\x8a\x02\xfa\xb0\x94\xd1\xc9\xa3\xc8\x6e\xc7\xd5\xeb\x08\x1f\x65\xdd\xc1\x76\x4b\xe5\x29\xac\xab\x8b\x53\xd3\xb0\x7c\xa4\xa9\x18\x4b\x81\xde\x9d\xde\xf7\xd3\xfd\x7b\x49\xb8\xb3\xc7\x51\x48\x5b\x9f\x63\xe2\x14\x18\x06\x44\xbc\x86\x5d\x49\x4c\x6b\x53\x0c\x85\xd4\xa0\xf2\xa2\x95\x4c\x96\xf7\xe3\xbe\x8c\x03\x56\x22\x7f\xd9\xae\x43\x43\x81\x1d\x23\x90\xe6\xa1\x80\x1c\x94\x48\xc7\x5a\x33\x1e\x9b\x6e\x23\x61\xf5\xc2\x3b\xf0\xc9\x26\x64\x17\xf2\xab\x88\x9f\xcb\xd8\x83\x3d\x6e\x38\xd3\x2d\x30\xe9\x44\x35\x8f\x92\x89\x3b\x0c\x41\x84\x15\x26\x22\xc1\x7d\x55\x0f\xa4\x8f\x92\xa1\x6c\xf7\x90\x50\xf6\x15\xb7\xe4\xcc\x69\x96\x39\x9f\xc9\x22\x54\x67\x32\xd3\x01\x3c\xe2\x5b\x27\x22\x13\x78\x00\x93\x92\xc1\xc0\x53\x26\x36\x9d\xf4\x9f\x35\xfc\xff\x6f\x01\x7b\xf8\x44\xc1\x0f\x0a\xf5\x29\x58\x4c\xaa\x51\x6c\x00\x16\x6d\x90\x96\x92\xfe\x06\x0c\x13\x47\xeb\x44\xee\xed\x2f\xdb\x9f\xce\x78\xef\x8d\xd3\x64\x43\x5d\xa8\x1f\xbd\xb4\xd4\x0a\xa3\xcd\x91\x7b\xca\x8a\x6e\xf3\xe7\x3c\x6f\xa8\x07\x65\x0e\x22\x65\x91\x54\xcf\x94\x70\xa3\xcb\x0c\x17\xec\x11\x45\x06\x03\xa5\xf2\x24\xc6\x2e\x3a\xe6\xd3\xb9\xb2\x86\x1c\x69\xcc\xbe\x87\xeb\x11\xcb\x99\x85\x6f\xe4\x80\xba\xbe\x49\x02\xbc\x2c\x70\x59\x6e\xc0\xdd\x62\x62\x3b\x1f\x63\x10\xe3\xab\x44\x82\xe6\x48\xe2\x55\x42\x09\xb3\xfd\x73\x03\xf4\x20\x63\xea\x74\x10\xa1\xa5\x4f\x85\xe6\xe8\xdd\xf9\xa5\x73\x11\x50\xb8\x01\xe2\x05\xf1\x12\x93\x19\x2a\x51\x35\x4f\x8b\x0c\x8a\x72\x7f\x09\xac\xb9\xac\x31\xa9\x29\x95\x38\x9a\x84\xc1\xab\xd1\x35\x3c\xb1\xdf\x60\x62\x0c\xa5\xe0\x6e\xcd\x31\x74\x86\xfa\x6d\xb8\x26\x4b\x98\xa1\x34\xf8\x03\xf8\xae\x2e\x9b\x0a\x04\x36\x87\xf8\xff\xff\x9b\x19\xd6\x0d\x7c\x24\x08\x56\x8a\x0b\xff\x8e\x88\x53\x49\xaf\x42\x88\x1e\xdb\x17\x35\xa8\xdd\x56\x9f\xc8\x12\x30\x67\x55\x7c\xbb\x0d\xfe\x00\xcc\x59\x2e\xed\xc8\xa9\xda\x8e\xd0\x80\x7d\x84\x0f\x8c\xc3\x6b\x19\x07\x87\x8f\xf2\x11\xfe\x75\x26\x4f\x15\x73\x6b\xe2\x72\x3d\x2b\x74\x86\xcb\x68\xe6\x9b\x4e\x92\xee\x02\xe6\x3e\xa8\xe3\x4c\x70\xb7\x0e\xe6\x63\xaa\x54\x9c\xcb\xfd\xab\xa5\x76\x9d\xf2\xc1\x7d\xd8\xbb\x66\x1d\x15\xfa\xe5\x56\x8c\xfe\x02\xfb\x93\x23\x37\x70\x57\x4b\xfa\x68\xbc\x5b\xbb\x7e\x3e\xab\x95\x3a\x90\xd3\xda\xcf\x67\x67\x28\x88\xd7\x1b\x76\x93\xec\x84\xef\xb7\x9c\xc5\x0c\x1f\xe0\x6e\x09\x45\x94\x23\x68\x95\xb9\x68\x37\x0b\x42\x46\xc7\xc9\x77\xcd\x3b\x74\x55\xc0\xf3\x76\xd3\x9a\xe4\x08\xc2\x14\x86\xb7\x55\x3a\x2c\xf3\x4c\x2b\xd9\xa5\x4e\x5d\x0b\x03\x05\xab\xf5\x40\xf6\x38\x95\xfd\xe2\x0a\xab\x6a\x60\x40\x5d\x23\xcf\x74\x47\x28\xb0\x76\x02\xfa\x0b\x29\xac\xa2\x03\x53\xf8\x01\xdd\xf1\x1c\x78\x7e\xf8\xe8\xfb\x29\x1c\x5f\xca\x12\xb1\xed\xe7\x2f\x66\x4a\x3c\xc9\xee\x13\x17\xb4\xf1\xb8\xff\x57\xd4\xfe\x53\x8a\xda\x99\xe7\x61\x1b\xe1\xf5\xaa\x1a\x2c\xd5\x3e\x3c\xcb\x9c\x73\xf0\x13\x0a\x97\x71\x0a\x94\xa9\x7c\xd1\xdb\x89\x6b\x6e\xf1\xd4\xa5\x40\x58\x10\x2f\xa7\x33\x44\x66\xdc\x82\x76\xf9\x32\xb5\xf9\xfa\xb4\x90\x62\xbd\x9a\xa1\x6a\x53\xcf\xb7\x0a\xa7\x84\xd8\xe3\xcd\xbc\x64\x86\x3b\x48\x96\x39\x67\x3e\x03\x5a\x61\xcf\x70\x99\x17\x2f\x8e\x62\x16\x3c\x93\xd7\x91\x0d\xf4\x7b\x2f\x78\x8a\x91\xa7\x50\xf5\xef\x6b\x8f\x30\x9d\x9a\x1f\x99\x2c\xb4\xa6\x24\xae\x32\xf7\xd4\xa5\xde\xf0\xe7\x85\x89\x4c\x2c\x7d\x73\x4b\x81\x68\x2c\xf9\x3e\x64\x4a\x92\x1a\x4f\xda\x12\x26\xe6\x61\x33\xec\x1f\x65\x07\xe2\xfb\xe0\x32\xf0\x8c\xdc\xfe\xcb\xda\x45\xcb\x52\x0f\xa1\x7e\x46\xf6\xfd\x26\x6a\xe5\xae\xd5\x42\xa3\x03\xe6\x5c\x16\xf9\x74\xc0\x60\xbe\x00\x42\x77\xf7\xba\xfb\xf9\xb1\x91\x24\x11\x9c\x1f\x24\xff\x3c\xf3\x4a\x86\x8a\x13\x6b\xf0\x02\xf6\x36\x09\x37\x51\x9c\x1a\x2f\x9a\x35\xb3\xbc\xaf\x92\x1b\x8a\x37\xcd\xb1\x07\x7b\x85\xa5\x7c\x1f\xab\xa4\x14\x69\xa9\x44\x78\x27\x80\xef\xd1\x1c\xb9\x49\xe4\xdc\xc6\x64\x05\x6f\x49\x0a\x12\x63\x87\xe7\x28\xbf\xaa\xf9\x8f\x81\xf4\xa9\x82\xbc\x4f\x33\xe3\x5d\xa9\xc2\xae\x76\xa8\x4e\x6e\xc7\x7b\xd7\xfe\x69\xdd\xeb\x47\x25\x08\x15\x8c\xff\xb5\xfe\x36\x2a\x79\xf5\x2a\xe9\xdf\xeb\x7a\xb7\xc0\x84\xdb\x8d\xf1\xba\xea\x88\x57\xed\xc1\xc6\x24\xb9\xc2\x8f\x34\xd1\x54\xa8\xa9\xfd\x42\x86\xb8\x0a\xc2\x81\x4e\x25\xb9\x99\x35\xc9\xc7\xd6\x55\x13\x7f\x9f\x54\xab\x6d\x0a\xac\x83\xfe\xe8\xbc\x7d\x0b\x4c\x1a\xc6\x3b\x63\x4f\x50\x69\x05\x4f\xb5\x6a\x2b\x06\xa1\x97\xc4\x9a\x44\xc5\x65\x16\x09\x26\x47\x65\x33\xc2\x74\x64\xc9\x58\x72\xc5\x6a\x19\x45\x52\xe0\x5a\x10\x95\xb7\x59\x2a\xbe\x24\xf7\x8e\x0f\xa2\x17\xd1\x77\xc9\xda\x1d\x7a\x39\xa2\x3d\x6b\x86\x4d\x2f\xab\x03\x17\x45\xd6\xa2\x8f\x7f\x4c\xcf\xd6\x3f\xb6\x34\x47\x88\xee\xfe\x47\xb0\xa0\x86\x7b\x75\x15\x14\xb5\xa4\xf4\x3e\x57\xac\xbc\x1a\x35\xaf\x38\x8d\x69\xe8\x44\x28\x76\xd1\x2f\xe7\x9a\x6f\xa4\xdf\x36\x8b\xe5\xdf\x34\x40\x05\x3e\x5a\xaf\xcc\xd1\xfc\x98\x36\xd1\x3c\x2f\x1a\x33\x8a\x89\xd1\x10\x15\xde\xd8\xef\x56\xef\x20\x04\x06\x8f\x71\xab\xce\x4e\x52\xa2\xfc\x86\x8c\xa4\x78\xea\x6c\xf8\x3d\xfe\xfc\x89\x07\x31\x4d\xf3\xa8\xe9\x4b\x30\x72\xfc\xf4\x25\x69\x7d\xd7\xf9\xeb\x89\x6c\xb0\xff\x0e\x46\x18\xd5\xb8\x14\xe4\x8f\x19\xb5\xba\xcd\x31\xaa\x23\x79\x9b\x6c\xe2\xc7\x25\xd8\xc6\x39\x67\x9f\x66\x25\x99\xa1\x01\x7d\x1f\xa4\x6c\xa8\x8b\x68\x67\x66\x91\x24\xe1\x58\x5e\x14\x99\x01\x66\x6e\x20\x05\x86\xdb\x2f\x8b\x66\xd9\x2b\xd4\xb8\x7e\x29\x36\x88\x4b\x97\xc4\xc9\xb2\xe7\x5b\xe7\x2a\xcf\xd1\x1c\x89\x8f\x5f\xaa\x77\x30\x47\xbe\x29\x97\x17\x8a\x93\x38\x54\xb3\x0a\x17\xfb\x88\x8b\xdb\xea\xdc\xbe\xdc\x2f\x6e\x61\xc9\x93\xfb\x56\x09\xc4\xe5\x83\xb3\xd8\x93\x5c\xc8\x3d\xb9\xbc\x88\x3f\x95\x62\xe4\xf9\x54\x5c\xc7\x77\x4c\xa9\x4a\xb1\xca\x1b\xce\x93\xf2\xe2\x78\x6d\xb4\x30\xc4\x31\x8e\x6b\x25\x90\x48\xf6\xc7\xb1\x26\x4f\x46\x4b\xf6\x4e\xd1\x00\xb3\x06\xb7\x79\xc7\x5d\xf3\x36\x5b\xe8\x4e\x90\x26\xbb\x8e\x16\xd6\xd6\xbf\x10\x59\xc1\xa1\x71\xa1\x9a\x6f\x33\xc4\x5d\xc1\xe1\x5b\x85\xbd\x12\xc2\x6a\xe1\x4a\x57\xfb\x8b\xe3\x26\xf1\x16\x28\xbb\x65\x84\xd7\x6b\xe9\x14\x67\xa9\x7a\xe8\x11\x46\x3e\x1f\xd6\xe2\x64\x99\xb3\x68\x57\x37\xbd\x8f\xbd\x0e\x3d\x0d\x8d\x00\x98\xcb\x54\xe9\xb8\xa4\x0a\xea\xa1\x9a\x59\x85\x12\xb8\xb0\x2b\x38\x34\x4e\xe8\xdb\xf5\x2b\xce\xbb\x85\x7e\x57\x33\xb4\x35\x7e\x83\x23\x2f\xb2\x4f\xe4\xd5\x14\x2c\x9f\x8a\xfb\xe5\x9c\x77\x4f\xde\x6c\x12\x9b\x79\xf7\x8e\x05\xe8\x6a\x85\x74\xe3\xce\xd7\x2b\xaf\x83\xf8\x92\xd8\x1e\xf8\x68\xa5\x7e\xbf\x22\xb8\x54\xa1\xf7\x06\x29\xdb\x71\x2c\x73\xb4\x12\x94\x8c\x66\x45\x2e\x1b\xbf\x7e\x58\xc1\xa1\x60\x47\x07\xa5\xd4\x7d\xf1\x22\x4d\xf0\x30\x97\x1a\xbb\x7b\x7d\x5f\x40\x6b\x4d\x69\x11\x8f\x74\x97\x66\x70\x7c\x93\xbf\x6c\xbb\x9d\xc5\xf0\x96\x11\xee\x72\x96\xf2\x50\xfa\x89\x12\xdb\xd5\xcf\x9d\xd8\xae\x2a\x89\xad\x83\xd9\x47\x26\xb6\x73\xc2\xdc\x87\x2f\x24\x0c\xc4\xd8\xd6\x37\xa3\x1b\x3f\x84\xe3\xa1\x21\x20\x8d\xee\x5e\x2d\x20\xe2\x48\xf3\xda\xcd\xf6\x51\x1c\xc2\x54\x09\x96\x57\xdc\xd4\x01\xc1\x40\x59\x2e\x36\x0e\x9c\x91\x18\xcc\x36\x59\x68\xa5\xee\x1b\xef\x94\x39\x13\xff\x0a\x00\x00\xff\xff\x0f\x9c\x4b\x43\x6b\x3a\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 14955, mode: os.FileMode(420), modTime: time.Unix(1642588408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x51\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x1d\xa7\x69\xc2\x40\x6c\x2b\x01\x2c\x8c\x9b\x44\x88\xff\x7d\x02\x27\x9d\xe7\x34\xad\x7a\xc3\x8f\xc7\xfb\x7e\xdf\x67\x68\xb9\xd8\xf1\x4a\x41\x08\x6c\x33\x2c\x1f\xb9\x56\x31\x62\xdc\xe8\xd6\x3a\x0f\x04\xa3\x59\x08\xec\xa7\xa8\x95\xe6\xe7\x96\x0d\xf7\x75\x8c\x33\x8c\x66\x55\xe3\xeb\xbe\x64\xc2\xea\xe5\x41\x95\xc7\x8f\xde\xb6\x4b\x25\x6a\x7b\x6b\x4f\x96\xb7\x77\x96\xfb\xa6\x5c\x6e\xb9\xf0\xd6\x9d\x96\x2d\xaf\x1a\xc3\x7d\x63\xcd\x0c\xa3\x10\x1c\x37\x95\x82\xf9\xae\x80\xf9\x13\xac\xd6\xc0\xbe\x66\xba\x2e\xc6\x8c\x37\x7f\xca\x38\x21\x28\x23\x63\xc4\x14\x23\x84\x10\xde\xf6\x46\xc0\xa3\x3a\x24\x7c\xef\x7a\xe1\x07\x6b\x44\xf8\x23\x24\x48\xf6\x60\x8d\x57\x47\x4f\x61\x31\x69\x81\x80\x91\x53\xbe\x77\x06\xee\x26\x5b\x01\x23\x34\x29\xad\x60\x1a\xd0\x50\x67\x2f\x6b\xd3\x02\xa3\x88\x23\xc6\xfe\xd4\xe6\xe0\xff\x53\xee\xf2\x47\x02\x58\xdc\x98\x3a\x39\x91\x26\x65\xa7\x44\x5f\xf9\xa0\x20\x6a\x25\x76\x84\x82\x72\xce\xba\x91\x2d\xd3\xec\x5f\x3f\x78\x2f\x25\xa1\x40\xda\x1d\x34\xc6\x2b\xb7\xe5\x42\x85\x58\xa4\x39\xc3\x2c\x9a\x86\x35\xdb\x5c\x58\xad\x41\xb3\xb3\xd2\xa7\x5c\xf9\xb0\x4e\x0a\xa9\x65\x24\x98\x4f\x27\xef\x97\x9a\x9e\x7a\x61\x59\xf5\x75\xb0\x2f\xb2\xf1\x44\x1f\x20\x75\x10\x59\xb2\x1f\xaa\xeb\xf7\x9e\xc2\xf3\xb2\x00\xee\xaa\x0e\x18\x63\x23\xf2\x51\x02\xef\x80\x7e\x93\xf7\x0c\x33\x48\x32\xc6\xde\x60\xff\xd6\x74\x7e\xc3\x2b\x45\x84\x35\x12\x16\xb2\x64\x0f\x56\xb7\xb6\x37\xb2\x2b\xa0\x4b\x17\xfa\x0a\x9b\xfc\xfa\x3d\x9d\x53\x8c\xfe\x80\x53\x22\x3f\x88\xeb\xae\x10\x31\xfa\x53\x5c\xac\xfe\x7b\x4f\xe9\x56\x26\x0e\xe5\xc8\x95\x9f\x02\xee\xd2\xc0\x62\x08\xd7\xc1\x4b\xf1\x8e\xf3\x71\xec\xbb\x93\xca\x7d\x3e\x91\x0c\x9f\x03\x40\xb1\x80\x64\x8f\xdd\x1b\x49\x28\x65\x9b\xa4\x5c\x11\x7d\x79\x6d\x84\xd2\xe7\x40\x07\xb1\x94\x72\xc4\x7f\x03\x00\x00\xff\xff\xdb\xcb\xc7\xf8\x8a\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1162, mode: os.FileMode(420), modTime: time.Unix(1638179685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
