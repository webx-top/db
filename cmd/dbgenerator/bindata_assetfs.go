// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x6b\x6f\xdc\xb8\xf1\xf3\xea\x57\xf0\x16\x41\x40\x05\x1b\x39\x1f\x8a\x7e\x48\xe0\xa2\x6b\xe7\x7c\x35\x7c\x49\x0c\x3b\x97\x16\x30\x0c\x83\x2b\x8d\xd6\xea\x4a\xe2\x96\xe2\xbe\x6e\xa1\xff\x5e\xf0\x21\x89\x7a\x6b\xfd\x82\xaf\x57\x20\x88\x57\xe2\x70\xde\x9c\x19\x8e\xc8\xa3\x23\xf4\xf7\x39\xc4\xc0\x08\x07\x0f\x7d\xa6\x28\xa6\x1c\x81\x17\x70\xc4\xef\x83\x04\xf9\x41\x08\x13\xb4\xb9\x0f\xdc\x7b\x14\x24\x88\xac\x38\x8d\x08\x0f\x5c\x12\x86\x3b\x54\xcc\x9b\xed\x10\xbf\x87\xec\x05\x65\x8e\x65\x2d\x89\xbb\x20\x73\x40\xfb\xbd\x73\xa9\x7e\x7e\x25\x11\xa4\xa9\x65\x05\xd1\x92\x32\x8e\xb0\x35\x1a\xfb\x11\x1f\x5b\xa3\xfd\x9e\x91\x78\x0e\xe8\xcd\x62\x82\xde\xac\xd1\xc7\x63\xe4\x9c\x4b\x98\x24\x4d\xad\xd1\x78\xbf\x7f\xb3\x4e\x53\x09\x07\xb1\x27\x30\x8c\xc6\xf3\x80\xdf\xaf\x66\x8e\x4b\xa3\xa3\x0d\xcc\xb6\xef\x39\x5d\x1e\xb9\x34\x1a\xb7\x0c\x79\xb3\xf6\x91\xa3\x30\x98\x1d\xf9\xc4\xe5\x94\xed\x86\x41\x1d\x2d\xc9\x3c\x88\x09\x0f\x68\xdc\x36\x01\xdc\x7b\xda\x35\x76\xb4\x24\x8c\x44\x63\xcb\xb6\x2c\xbe\x5b\x02\xba\x0e\x03\x17\xee\xf6\x7b\xe7\x9a\xb3\x95\xcb\x95\xaa\xd0\xcd\xed\xbb\xca\x2b\xcb\xf2\x57\xb1\x8b\x70\xd2\x3c\xc3\x46\x57\x42\x93\xd8\x8f\x91\x80\xc3\x11\xd2\x2c\x3b\x5f\xa8\x07\xa1\x8d\x80\x31\xca\x50\xf6\x77\x6f\x8d\x7c\xca\xd0\xdd\x04\x49\xad\x2b\x2b\x24\xe2\xf5\x28\xf0\x05\x8c\x78\xeb\xc7\x78\x6d\x7f\x92\x4f\x3f\x1d\xa3\x38\x08\xe5\xf8\x88\x01\x5f\xb1\x58\xbc\xb6\x46\xa3\xd4\x12\xff\xf4\xab\x38\x08\xad\x81\x8c\x5e\x91\x8d\xc1\x6b\x55\xd8\xd7\xc4\xee\x2f\x8c\xae\x96\x27\x3b\xbc\x80\xdd\x59\x00\xa1\x87\x12\xce\x82\x78\x6e\xa3\x88\x2c\x6f\xd4\xef\xdb\xba\xb9\x04\x6d\xc9\x55\x27\xd4\x3e\xcd\x05\x63\x74\x53\x15\xcd\x8b\xc8\x52\xbe\xa3\x1b\x67\x9a\x7c\x21\x4b\x6c\x5b\xa3\xd1\x7a\x01\x3b\x29\x6e\xc4\x9d\xeb\x25\x0b\x62\x8e\x05\xe0\x4d\xc6\xdf\xad\xad\xb4\x72\x37\x41\x12\x8e\xdd\x88\x19\xb7\x9f\xd0\x4f\x3b\xad\x10\xf5\x02\x1d\x37\x78\x99\x60\x48\x68\xc8\x00\x22\xcb\x25\xc4\x1e\xd6\x2f\x24\xa3\xb6\xa9\x45\x36\x40\x87\x17\xb0\xeb\xd1\xe0\x10\xfd\xbd\x98\xf6\x0a\xe1\x19\xdd\x1c\x2a\xeb\x34\xb9\xf8\x51\x15\x75\x82\xd6\x24\x5c\x41\x59\x7a\x19\x08\x9c\x6b\x4e\x19\xe4\xd2\x1a\xef\x5e\x40\x3a\x39\x56\x70\x76\x7b\xa8\xa8\xdf\x19\x89\x13\x9f\xb2\x08\x73\xf9\x0b\x58\x62\xda\x4b\x09\xf3\x5d\x0f\xd9\xe8\xe6\xb6\x49\xe4\x88\x2c\x00\x97\x86\x26\x21\xc4\x38\xb1\x6d\x25\x7f\xe0\x6d\x1b\x35\xc0\x6e\x02\x6f\xab\x6d\x94\xa9\xc0\x69\xe0\xa8\xee\xac\x7d\x62\x9d\x31\x1a\xfd\x1a\x24\x1c\x7b\x84\x13\x14\xc4\x1c\x98\x4f\x5c\xd8\xa7\x76\x4b\xb4\xde\x5b\x23\xa9\xc5\x64\x82\xe8\x42\xf0\x29\x26\x3a\xb8\xbe\xbc\x6c\x4b\xac\xcc\x9f\xe8\x42\x4a\x90\x85\x34\x31\xb5\x90\x2e\x9b\x5b\xa2\xab\x16\xae\x52\xc2\xdb\xa6\x35\x2b\x06\x1d\xc1\xf8\x15\xdd\x60\x89\xd1\xc1\x86\x29\x4c\x64\xc2\x07\x46\x49\xb1\xb2\x93\x6c\x4d\xab\x85\xaf\x14\x95\x48\xad\x95\xa1\x94\x8c\x8e\xe3\xd8\xd6\xc8\x2a\x00\x33\x3f\xf9\x0a\x9b\x0a\x67\xd8\xe5\x5b\x24\x92\x9e\x73\x4a\x63\x0e\x5b\x6e\xd7\x22\xbd\x90\x2c\x6a\x93\x2a\x72\xae\x81\xeb\xa9\x02\x97\x9d\x53\x8d\x90\x20\x7b\x74\x84\x6a\xe8\xb2\xe7\x53\x1a\x45\x10\xf3\x34\x55\x69\xb6\x0a\x97\xc8\x07\x41\x7d\x46\x12\x40\x08\xe5\xf9\xf2\x84\x24\x60\x8d\xe8\xec\xdf\xe0\xf2\xa4\x29\x11\x37\x55\x2d\x0a\x60\xca\x39\x0b\x66\x2b\x0e\x89\x02\x7b\xb3\x46\xef\xd5\x2f\x55\xbe\x28\x96\xdf\x23\x49\x52\xe8\x4c\x14\x12\x99\x3b\x92\x86\x2c\x28\xdd\x19\xdb\x39\x6f\xf2\x99\xc8\x69\x20\xb3\xa2\x56\x07\x71\x04\x4a\x47\x83\x17\x2b\xb7\x09\xe7\x6f\x09\xa8\xc5\xd1\x8c\xd5\x2e\x17\x0e\x82\x88\xc6\x9e\x4f\x2c\xcc\x40\xba\x49\x95\xad\x57\xf1\x84\x36\x32\x6d\x26\xef\xa1\xf5\xf3\x1a\x62\xfe\xed\x2b\xa6\x31\x72\x1c\x67\x46\x69\xd8\x4e\xa2\x80\x55\xce\x7c\x08\x85\xb3\x33\x4c\x7d\x7f\x28\x0d\x05\x7d\x08\x95\x4c\x76\xbb\xa4\xae\xba\xad\x73\xb8\x21\x26\x88\xcf\x3f\x63\x57\xfe\x11\xe1\xac\x4f\xf7\x05\xf4\x21\x5c\x8b\x59\xb6\x40\xdf\xc8\xab\x1c\xed\x65\x55\xfc\x64\x38\x16\xff\x23\x05\x58\xa9\x62\xb3\xdc\xd9\x21\x80\x81\x63\x30\xfb\x6a\x8e\xad\xca\xd1\x46\x92\x75\xa1\xf4\x9c\x5e\x99\x2e\x45\x62\xc3\x32\xbd\xa1\x77\x19\x6e\xf9\xb2\x53\x0c\x63\xda\x60\x31\xd4\x9c\x68\xa3\xe4\xf0\x66\xce\x15\x24\xab\x90\xdb\x28\xff\x39\x41\x84\xcd\x13\xe1\xbd\xa5\xf4\x52\xe6\x4b\x30\x12\xf8\x99\x9c\x0a\xa9\x8d\x8e\x8b\x9a\x3a\x57\xc4\x57\xd8\xe8\x61\xc1\xf2\x97\xc0\xf3\x42\xd8\x10\x06\x38\xda\xc8\x37\x53\x36\x4f\xb0\xa0\xa8\x56\x40\x5a\xd5\xe1\x01\x93\xbb\xed\x07\x1b\x9c\xe4\x6f\xf2\xa2\x4b\xbb\xbc\x92\xb6\x41\xdb\x15\x83\x96\x90\x64\xb3\xfb\x89\x8b\x84\x71\x67\x04\x69\xf1\x6c\x06\xe7\xb7\x0a\x7f\x1e\xfd\xdd\x15\x63\x10\xf3\x41\x09\xe0\x9b\x4a\x43\xd8\x6e\x48\x44\xb9\x99\xb2\x5c\x55\xb7\x90\xd8\xe1\x94\xb4\xae\x41\x6f\x3e\xde\x76\xcb\xf4\xaf\x82\x70\x6b\xc9\xa3\x91\x36\x8e\x63\xe2\xe4\x18\xfa\x6d\x57\x10\xcb\x74\x28\xf7\x88\x25\x25\x36\x92\xd9\xa7\xdd\xb8\xcf\xe3\x80\x17\xc8\xdf\x35\xeb\xd0\x50\x60\xcb\x8e\xa8\x30\xa4\x86\xec\x95\x28\x5b\x34\xf5\x85\xa5\x71\x65\xef\x73\xd8\xec\xc5\x67\xf0\xc9\x2a\xe4\x67\xea\x51\x2e\x84\xf3\xd8\x83\x2d\xae\xc4\x52\x39\xa2\x12\x7e\x39\xfb\xdb\x2a\x8a\x87\x21\x48\xef\xc2\x44\x46\xaa\x3b\x3d\x20\x7d\x1f\x93\xbe\xb0\x75\x4f\x19\x17\x3e\x5d\x0b\x7e\xe3\xfd\xde\xf9\x4e\x66\xa1\xee\xe9\x8c\x7b\xf0\xc8\xa7\x56\x44\x26\x70\x0f\x26\x2d\x83\x81\x67\x26\x0a\x2f\x22\x97\xc0\xcc\x74\xfd\x19\x6a\x2e\x26\x53\x05\x5a\x0a\xde\x66\xa3\x40\xf3\xf5\xcf\x80\xdf\x5f\x32\xf0\x83\x2d\x2e\xc3\xe2\x99\x5d\x0a\x61\x06\x60\x5e\x48\x65\x8a\x61\xbf\x00\xc7\x33\x27\x53\xa3\x9a\xdb\x9d\x40\x2f\xa7\xa2\x7a\xc7\x09\x5d\x31\x17\xaa\xcd\x9b\x86\x3c\x61\x94\x49\x6a\x4e\x51\x11\xd8\xc5\xb8\x70\x95\x62\x58\x39\x8e\x1e\x55\x62\xe9\x41\x2d\xe3\xe0\x4c\x23\xe4\x7b\x40\x9e\xc1\xc0\x98\x6a\xe9\xd8\x79\xe9\x2d\xac\xa8\x02\xa4\xdc\x1b\x99\xe5\x93\x50\x27\x56\x9b\x1f\x31\x51\x00\x66\x29\x4e\x11\x10\xc1\x59\xc8\x72\x05\xee\x1a\x13\xdb\xf9\x16\x83\xdc\x07\x2b\x24\xe8\x18\x29\xbc\x5a\x28\x69\xbd\xff\xac\x80\xed\xd4\x6a\xfc\xd8\x8b\xd0\xca\xda\x4b\xc7\xe8\xf3\xc9\xb9\x73\x16\x30\xb8\x02\xe2\x05\xf1\x1c\x93\x09\x2a\x50\xd5\xdb\x4e\x06\x45\x35\xbf\x00\xce\xb8\xac\x30\x99\x51\x2a\x70\xd4\x09\x83\x57\xa1\x6b\x38\x64\xb7\xc1\xe4\x7e\x96\x81\xbb\x36\xf7\xb3\x13\xd4\x6d\xc3\x25\x99\xc3\x04\x25\xc1\xef\x20\x66\xb5\xd9\x54\x22\x90\x95\xdf\x5f\xff\x32\x31\xac\x1b\xf8\x48\x12\x2c\xa5\x25\xf1\x8c\x88\x53\x0a\xcc\xd9\xda\x6c\xb3\x7d\x9e\xbd\x9a\x6d\x75\x49\xe6\x80\x05\xab\xf2\xe9\x3a\xf8\x1d\xb0\x60\xb9\xb0\xa3\xa0\x6a\x3b\x52\x03\xf6\x01\x3e\x30\x0c\xaf\x65\x74\x20\x1f\xe4\x23\xe2\x71\xa2\xda\x93\xa9\x35\x72\x85\x9e\x35\x3a\xc3\x65\x32\xe6\xeb\x4e\x92\x6c\x02\xee\xde\xeb\xbe\x28\xb8\x6b\x07\x8b\xfd\xae\x52\x9c\x2b\xfc\xab\x21\xeb\x7d\xb4\x46\x43\xbc\x6b\xd2\x92\xdb\xdf\xad\x65\x0f\x41\x62\x7f\x72\xe4\x06\xee\x72\x31\x30\x18\xef\xda\xae\x36\x7a\x33\xa5\xf6\xc4\xb4\xe6\x46\xef\x04\x05\xf1\x72\xc5\xaf\xe8\x46\xfa\x7e\x43\x53\xa7\xbf\x13\xbc\x26\x0c\x31\x81\xa0\x51\x66\x69\xd6\x10\x62\x9c\x13\xb2\xd1\xdf\xd0\x07\xe5\x23\x62\xd6\x71\x8b\xae\x72\xf8\x9b\x0f\xb7\xc2\xb3\x11\x84\x09\xf4\x4f\x2b\xd5\x66\x66\x73\x8c\x6e\x12\xa7\xaa\x85\x9e\xbc\xd5\xd8\xd9\x3d\x4c\x65\x7f\x70\x85\x95\x35\xd0\xa3\xae\x81\xcd\xe1\x01\x0a\xac\xb4\x52\xff\x40\x0a\x2b\xe9\xc0\x14\xbe\x47\x77\x22\x06\x9e\xec\xbe\xf9\x7e\x02\x87\xa7\x32\x2a\xa7\xbd\xfe\x64\xa6\xc5\x53\xec\x3e\x71\x42\x1b\x8e\xfb\xff\x49\xed\x7f\x25\xa9\x9d\xc7\x09\x30\x8e\x6d\x84\x97\x8b\xf2\x7a\x29\x97\xe2\xfb\xbd\x73\x02\x3e\x65\xa0\x26\xe8\x90\xd1\x59\x8c\x67\x0c\xe3\xb1\xcb\x80\xf0\x20\x9e\x8f\x27\x88\x4c\x84\x11\xed\xe2\xc3\x6c\xfd\x53\x6c\x2e\xc8\x72\x31\x41\xe5\xba\x5e\x4c\x95\x7e\x09\xb1\x27\xea\xf9\x8c\x7b\xc9\xdf\xd4\xe7\xc0\x4a\xec\x19\x5e\xf3\xf6\xed\x41\xcc\x82\x67\xf2\x3a\xb0\x86\xfe\x6d\xe9\x11\x0e\x4f\xb0\xef\xc9\x95\xad\x30\xa6\x8f\x8a\x18\x99\xae\x34\x77\x79\x00\xaa\xca\xbd\x12\xe3\xb9\x91\x4c\x2c\x5d\x9b\x97\x1c\xd1\x50\xf2\x5d\xc8\xb4\x24\x15\x9e\x32\x5b\x98\x98\x87\x18\x62\xfb\x20\x4b\x10\xdf\x07\x97\x83\x67\x84\xf8\x97\xb1\xcc\xf6\x19\x4c\x93\x09\x53\x5d\x47\xbd\x9c\xf4\xef\x57\x87\x18\xe9\x80\x55\x73\xa2\xd2\x7d\xd2\x63\x33\x5f\x02\xa1\x9b\xdb\xac\x0e\x7a\xd9\xe5\x94\xf1\xaa\x24\x10\x31\x58\x31\x94\xb7\xaf\xc1\x0b\xf8\x29\x0d\x57\x51\x9c\x18\xdf\xae\x33\x66\x45\x85\xa5\x26\xe4\x1f\xaf\x63\x0f\xb6\x1a\x4b\xf1\x89\x57\x4b\x29\xa3\x53\x81\xf0\x46\x02\xdf\xa2\x63\xe4\xd2\xc8\xb9\x8e\xc9\x02\x4e\x49\x02\x0a\x63\x8b\xef\xe8\x55\x57\xf1\x20\x03\xe9\x53\xad\xf4\x2e\xcd\x0c\x77\xa6\x12\xbb\x99\x4b\xb5\x72\x7b\x88\x7f\x6d\x9f\xd6\xc1\x5e\x2a\x4a\xe4\xcc\xff\x49\x3d\x6e\x50\x00\xeb\x54\xd2\x6b\x70\x3e\xe9\x79\x43\x1c\xaf\xbc\xe3\x2b\xd7\x63\x43\x22\x5d\xee\x4a\x06\xdd\x44\x2a\xab\xf9\xac\x87\x3c\x65\x22\x80\x3e\x2a\x8a\x13\x6b\x94\x1e\x98\x64\x9f\x51\xb6\xee\x45\x56\x91\x75\xfb\x02\xc2\x0e\x8a\x20\x8b\x75\x02\xbc\x85\x85\xc1\xf9\xea\x1a\xb8\x22\xe9\x4d\xf9\x13\x14\x19\x92\xa7\x4a\x09\x28\xb7\x82\xef\x88\x35\x8a\xf2\x73\x41\x0a\xac\x2f\xa6\x7c\x50\x61\x45\x01\xeb\xa8\xe2\x4a\xe8\x22\x9e\x28\x25\x54\xc2\x49\x71\x58\xa8\xb4\xaa\xd4\xdc\xe1\xe1\xe4\x6d\xf4\x2c\x19\xac\x45\x57\x07\xd4\xab\xf5\x00\xd2\xc9\xea\xf0\xe5\xf5\x1c\x2e\xd7\x9b\xc1\x9e\xd3\x05\xb7\x7f\x66\x1f\x3c\xa8\x28\xaf\xaa\xed\x31\xe9\xac\xdb\x1b\x33\x2b\x0e\x71\xcb\x1f\xf2\xa4\x5f\x9f\x57\xc2\x2e\x51\x80\xe8\x9d\x37\x73\x2e\xf2\xc7\x61\x51\xf0\xb1\xfe\x96\x93\x1b\x10\xf7\x72\x58\x47\x1e\x13\x6d\xfa\xae\xd7\xe2\x04\xc6\x54\x21\x20\xb6\x9f\x3c\x1c\x35\xc8\xf1\xe8\x98\xd4\xc3\x75\x9f\x0b\xc8\xa6\xcb\x43\x36\xd7\xdd\x3d\xa6\x7a\xbf\xa7\x7d\x9f\x2a\x59\xd0\xcd\x58\x7d\x07\x00\x35\x94\xdd\x5d\x5e\x54\x3a\x04\x63\x9e\x6d\x1d\xb2\xf1\x96\xb5\x43\x1b\xfd\xa2\x09\xf5\x48\xfa\x4d\x8d\xb3\xf4\x51\xdd\xae\xc0\x47\xcb\x85\xd9\x4a\x3d\x64\x3b\x6f\xf6\xf7\x87\xf4\xcd\x64\x1f\x0f\x0d\x8c\x2c\x9f\x21\x84\x87\x75\xcf\x5a\xf7\xfb\x0a\xe5\x23\x92\x97\xe6\xa9\xb5\x31\xe3\x89\xf1\x27\xee\x99\x65\x34\x0f\x6a\x94\x49\x46\x0e\x6f\x94\x29\x5a\xcf\xda\x28\x7b\x22\x1b\x74\x74\xc7\x1e\x6c\x84\x41\x89\x38\x27\x7f\x48\x4b\xac\xdd\x1c\x83\x76\x8d\xa7\x74\x15\x3f\x2c\xc0\xd6\xbe\x4b\x75\x69\x56\x91\xe9\x71\x91\x9f\xb7\x41\xc2\xfb\x52\x7d\x33\x33\x33\x4a\xc3\xa1\xbc\x68\x32\x3d\xcc\x5c\x41\x02\x1c\x37\xdf\x12\xd8\xef\xdf\xa3\xda\xb9\x7b\x39\x41\x9e\xb6\x27\xce\x7e\xff\x66\xed\x5c\xa4\x29\x3a\x46\xf2\xe7\x8f\xf2\xe1\xfb\x81\x27\x9b\xd4\x4d\x12\x1a\x87\xba\x9f\x24\xc4\x3e\xe0\xc6\x8e\xfe\xce\x5a\xcc\x97\x07\x67\xd5\x97\xd6\x46\x09\xe4\x99\xb1\x69\xec\x29\x2e\xd4\x9c\x54\xdd\xc0\x1a\x2b\x31\xd2\x74\x2c\xef\x61\x39\xa6\x54\x85\x58\xc5\xd5\x96\x51\x71\x63\xa8\xd2\xfe\x31\xc4\x31\x3e\xaf\x29\x20\x19\xec\x0f\x63\x4d\x7d\xc9\x2a\xd8\xfb\x88\x7a\x98\x35\xb8\x4d\x5b\x2e\x19\x35\xd9\x22\xab\xdf\x18\xdd\xb4\xec\x7e\xec\xec\x6a\xe0\x02\x76\xb5\x9b\x34\x62\xda\x3e\xbf\x0c\xa7\x6e\xe6\xe8\xab\x31\xc2\xb7\xc9\x46\x96\x48\xf6\x27\xa4\xef\xe3\x8c\x5c\x1a\xf3\x20\x5e\x81\x4e\xd7\x5a\x4d\x0b\xd8\x3d\x56\x49\x17\x52\x49\x99\x52\x0a\x17\xfd\x87\xe3\xd2\x78\x0d\x8c\x5f\x73\x22\xf2\xbc\x72\xa6\x69\xa2\x07\x3d\xc2\xc9\xf7\xdd\x52\x7e\x41\x94\xac\x96\x27\xfd\x1c\x7b\x2d\xfa\xed\x3b\xbb\xa7\x9a\x3a\x7e\xe9\x3a\x9a\xa1\x55\x21\x6e\xcd\x47\x0e\x93\xbe\xee\x21\x59\x70\x68\xf1\x62\x4f\x9d\x7b\xcd\x01\xf5\xd1\xe5\xbe\xd3\xf5\xa2\x7e\x2e\xd7\x9c\xca\x09\xaa\xc1\xaa\x90\x48\xba\xc1\x02\x76\xb5\x6f\xca\xcd\x1e\x26\xbf\xd0\x4a\x0f\x5b\x4c\xd0\xda\xb8\x7e\xaa\x7d\x46\x1d\xa6\xc4\x6a\x54\x5e\xad\x32\xa5\x11\xcf\x6b\xc2\x10\x96\xa0\x8b\x85\xd6\xb6\x7c\x5a\x97\x0e\x30\x88\x57\x72\x7a\xe0\xa3\x85\xbe\xba\x29\xb9\xd4\xf6\xf9\x84\xb4\x17\x0a\x2c\xc7\x68\x21\x29\x19\xe5\x9a\x7a\x6d\x5c\xfc\x5b\xc0\x2e\x67\x27\x0b\x4b\xca\x8b\xf2\xa3\x1f\x92\x07\xbd\x26\x6e\x3e\xdc\xe6\xd0\x99\xa6\x32\x11\x0f\x74\xfc\xba\xf1\x1f\xe5\xf9\xeb\x76\xb7\x37\xfc\x67\x80\xe3\x4f\x13\x11\x4c\x5e\x51\x68\xbf\x78\xdd\xa1\xfd\xa2\x14\xda\x5b\x98\x7d\x60\x68\xff\x35\x48\xd4\x01\x4b\x97\xc6\x9e\xec\x1f\x9c\xd2\x68\x49\x57\xb1\x97\x4c\x50\x42\x19\xaf\xd7\x1b\xf9\x55\xf0\xbb\xfc\x30\x49\x71\x1d\xdf\xf9\x0a\x1b\x81\x13\x18\x56\xdb\x13\xbd\x7b\x63\xa8\xa9\xa2\x31\x8b\x52\xe6\x7c\x63\x1e\xb0\x93\x1d\x96\x64\xf3\xcd\x9f\x60\xcc\x99\xc6\x1e\xb6\x6d\xe7\x52\xd0\x99\x63\x52\x3a\x63\x6d\x5c\x2c\x1f\x24\xea\x34\x69\x38\xb5\xf4\x2c\xe2\x0b\x32\xaf\x47\xfe\x13\xc2\xdd\xfb\x1f\x24\x0c\x64\xa7\xa2\xab\x97\x69\x08\x29\xa2\xa0\x84\x34\xb6\xb2\xfa\x05\x22\x8e\x5a\xc9\x76\x7d\xaf\x24\xbf\x0a\x95\x09\x92\xfc\x18\xbe\x6e\xa4\xf6\xd4\xa0\xf9\xc4\x9e\xaf\x1a\x06\xb3\x75\x16\x1a\xa9\xfb\xc6\x81\x37\xc1\xc4\x7f\x03\x00\x00\xff\xff\x62\x30\xcf\x9e\x82\x43\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 17282, mode: os.FileMode(420), modTime: time.Unix(1731215171, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
