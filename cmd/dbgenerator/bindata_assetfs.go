// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x5b\x6f\xdb\x38\xd6\xcf\xd6\xaf\x60\x8d\xa2\xa0\x02\x57\x99\x87\x0f\xdf\x43\x06\x5e\xac\x93\x4e\x66\x83\x4c\xd3\x20\xe9\x74\x17\x08\x82\x80\x96\x8e\x1c\xad\x25\xd1\x4b\xd1\x76\x3c\x86\xfe\xfb\x82\xa4\x28\x51\x77\x39\x49\x83\xce\xee\x02\x83\x69\x4c\x1d\x9e\xfb\x95\xa2\x8e\x8f\xd1\x5f\x17\x10\x03\x23\x1c\x3c\xf4\x89\xa2\x98\x72\x04\x5e\xc0\x11\x7f\x0c\x12\xe4\x07\x21\x4c\xd0\xf6\x31\x70\x1f\x51\x90\x20\xb2\xe6\x34\x22\x3c\x70\x49\x18\xee\x50\xb1\x6f\xbe\x43\xfc\x11\xf4\x02\x65\x8e\x65\xad\x88\xbb\x24\x0b\x40\xfb\xbd\x73\xad\xfe\xbc\x22\x11\xa4\xa9\x65\x05\xd1\x8a\x32\x8e\xb0\x35\x1a\xfb\x11\x1f\x5b\xa3\xfd\x9e\x91\x78\x01\xe8\xfd\x72\x82\xde\x6f\xd0\xc9\x14\x39\x17\x12\x26\x49\x53\x6b\x34\xde\xef\xdf\x6f\xd2\x54\xc2\x41\xec\x09\x0c\xa3\xf1\x22\xe0\x8f\xeb\xb9\xe3\xd2\xe8\x78\x0b\xf3\xa7\x8f\x9c\xae\x8e\x5d\x1a\x8d\x5b\x1e\x79\xf3\xf6\x27\xc7\x61\x30\x3f\xf6\x89\xcb\x29\xdb\x0d\x83\x3a\x5e\x91\x45\x10\x13\x1e\xd0\xb8\x6d\x03\xb8\x8f\xb4\xeb\xd9\xf1\x8a\x30\x12\x8d\x2d\xdb\xb2\xf8\x6e\x05\xe8\x36\x0c\x5c\x78\xd8\xef\x9d\x5b\xce\xd6\x2e\x57\xaa\x42\x77\xf7\x47\x95\x25\xcb\xf2\xd7\xb1\x8b\x70\xd2\xbc\xc3\x46\x37\x42\x93\xd8\x8f\x91\x80\xc3\x11\xca\x58\x76\x3e\x53\x0f\x42\x1b\x01\x63\x94\x21\xfd\xef\xde\x1a\xf9\x94\xa1\x87\x09\x92\x5a\x57\x56\x48\xc4\xf2\x28\xf0\x05\x8c\x58\xf5\x63\xbc\xb1\x7f\x96\xbf\xde\x4d\x51\x1c\x84\xf2\xf9\x88\x01\x5f\xb3\x58\x2c\x5b\xa3\x51\x6a\x89\xff\xb2\xa5\x38\x08\xad\x81\x8c\xde\x90\xad\xc1\x6b\x55\xd8\x1f\x89\xdd\x5f\x19\x5d\xaf\x4e\x77\x78\x09\xbb\xf3\x00\x42\x0f\x25\x9c\x05\xf1\xc2\x46\x11\x59\xdd\xa9\xbf\xef\xeb\xe6\x12\xb4\x25\x57\x9d\x50\xfb\x34\x17\x8c\xd1\x6d\x55\x34\x2f\x22\x2b\xb9\x46\xb7\xce\x2c\xf9\x4c\x56\xd8\xb6\x46\xa3\xcd\x12\x76\x52\xdc\x88\x3b\xb7\x2b\x16\xc4\x1c\x0b\xc0\x3b\xcd\xdf\xbd\xad\xb4\xf2\x30\x41\x12\x8e\xdd\x89\x1d\xf7\x3f\xa3\x77\xbb\x4c\x21\x6a\x01\x4d\x1b\xbc\x4c\x30\x24\x34\x64\x00\x91\xd5\x0a\x62\x0f\x67\x0b\x92\x51\xdb\xd4\x22\x1b\xa0\xc3\x4b\xd8\xf5\x68\x70\x88\xfe\xde\x4c\x7b\x85\xf0\x8c\x6e\x0f\x95\x75\x96\x5c\x7e\xab\x8a\x3a\x41\x1b\x12\xae\xa1\x2c\xbd\x4c\x04\xce\x2d\xa7\x0c\x72\x69\x8d\xb5\x37\x90\x4e\x3e\x2b\x38\xbb\x3f\x54\xd4\xaf\x8c\xc4\x89\x4f\x59\x84\xb9\xfc\x0b\x58\x62\xda\x4b\x09\xf3\x35\x7b\x64\xa3\xbb\xfb\x26\x91\x23\xb2\x04\x5c\x7a\x34\x09\x21\xc6\x89\x6d\x2b\xf9\x03\xef\xa9\x51\x03\xec\x2e\xf0\x9e\x32\x1b\x69\x15\x38\x0d\x1c\xd5\x9d\xb5\x4f\xac\x73\x46\xa3\xdf\x82\x84\x63\x8f\x70\x82\x82\x98\x03\xf3\x89\x0b\xfb\xd4\x6e\xc9\xd6\x7b\x6b\x24\xb5\x98\x4c\x10\x5d\x0a\x3e\xc5\x46\x07\xd7\xc3\xcb\xb6\x44\x64\xbe\xa3\x4b\x29\x81\x4e\x69\x62\x6b\x21\x9d\xde\x5b\xa2\xab\x02\x57\x29\xe1\x43\x53\xcc\x8a\x87\x8e\x60\xfc\x86\x6e\xb1\xc4\xe8\x60\xc3\x14\x26\x32\xe1\x03\xa3\xa4\x88\xec\x44\xc7\xb4\x0a\x7c\xa5\xa8\x44\x6a\xad\x0c\xa5\x64\x74\x1c\xc7\xb6\x46\x56\x01\xa8\xfd\xe4\x0a\xb6\x15\xce\xb0\xcb\x9f\x90\x28\x7a\xce\x19\x8d\x39\x3c\x71\xbb\x96\xe9\x85\x64\x51\x9b\x54\x91\x73\x0b\x3c\xdb\x2a\x70\xd9\x39\xd5\x08\x09\xb2\xc7\xc7\xa8\x86\x4e\xff\x3e\xa3\x51\x04\x31\x4f\x53\x55\x66\xab\x70\x89\xfc\x21\xa8\xcf\x49\x02\x08\xa1\xbc\x5e\x9e\x92\x04\xac\x11\x9d\xff\x13\x5c\x9e\x34\x15\xe2\xa6\xae\x45\x01\xcc\x38\x67\xc1\x7c\xcd\x21\x51\x60\xef\x37\xe8\xa3\xfa\x4b\xb5\x2f\x8a\xe5\x8f\x48\x92\x14\x3a\x13\x8d\x84\x76\x47\xd2\x50\x05\xa5\x3b\x63\x1b\x1d\x69\xe6\xe4\x02\x91\xfb\x64\x00\x29\x6d\x10\x47\x60\x74\x32\xe8\x22\x70\x9b\x50\xfe\x9e\x80\x8a\x8d\x46\xa4\x76\xb9\x6d\x10\x34\x32\xe4\xf9\xbe\xc2\x08\xa4\x9b\x52\xd9\x76\x15\x3f\x68\x23\xd3\x66\xf0\x1e\x5a\xbf\x6c\x20\xe6\x5f\xae\x30\x8d\x91\xe3\x38\x73\x4a\xc3\x76\x12\x05\xac\x72\xe5\x43\x28\x9c\x9f\x63\xea\xfb\x43\x69\x28\xe8\x43\xa8\x68\xd9\xed\x92\xba\xea\xa6\xce\xe1\x86\x98\x20\xbe\xf8\x84\x5d\xf9\x8f\x48\x66\x7d\xba\x2f\xa0\x0f\xb1\xb4\xf8\x93\xe1\x58\xfc\x1f\x29\xc0\x4a\xff\xa9\xab\x5e\x07\x71\x03\xc7\x60\xd2\x6a\x8f\xad\x1a\xc9\x46\x92\x75\xe5\x65\x7b\x7a\x65\xba\x16\x25\x09\xcb\xc2\x54\x04\x8b\x5c\xec\x14\xc3\xd8\x36\x58\x0c\xb5\x27\xda\x2a\x39\xbc\xb9\x73\x03\xc9\x3a\xe4\x36\xca\xff\x9c\x20\xc2\x16\x89\xf0\xbc\x52\x61\x28\xf3\x25\x18\x09\x7c\x2d\xa7\x42\x6a\xa3\x69\xd1\x0d\xe7\x8a\xb8\x82\x6d\xf6\x58\xb0\xfc\x39\xf0\xbc\x10\xb6\x84\x01\x8e\xb6\x72\x65\xc6\x16\x09\x16\x14\x95\xf7\xa6\x55\x1d\x1e\xb0\x59\x67\x3d\x77\xcd\x18\xc4\x7c\x50\xe2\xbb\x82\x2d\x4e\xf2\x95\xbc\x8b\xca\xbc\x58\x29\xa1\xc1\x08\x81\x8f\x44\xef\x90\xb9\x2f\xfa\x0b\xfa\xc9\x94\x5a\x83\x5f\xc1\x56\xee\x30\x28\x4c\xd4\x96\xbb\x9f\xee\x6d\x99\xe9\xca\x19\xb5\xa4\x80\x2e\x2c\x45\x74\x8a\x28\xb2\x9b\x71\x75\x3a\xc2\x17\x55\x77\xb0\xdd\x50\x79\x72\xeb\xea\xe2\x54\x37\xac\x18\x69\x4a\xc6\xca\x40\xef\x4e\xee\xbb\xe9\xfe\xa3\x20\xdc\xda\xe3\x64\x48\x1b\x9f\x63\xe2\xe4\x18\x7a\x44\xbc\x82\x6d\x41\x4c\x6b\x53\x0e\x85\xcc\xa0\xf2\xa1\x91\xcc\x3e\xed\xc6\x7d\x11\x07\xbc\x40\x7e\xd4\xac\x43\x43\x81\x2d\x23\x90\xe6\x21\x87\xec\x95\x48\xc7\x5a\x3d\x1e\xeb\x6e\xa3\x60\xf5\xc2\x27\xf0\xc9\x3a\xe4\xe7\xea\xa7\x8c\x9f\x8b\xd8\x83\x27\x5c\x73\xa6\x5b\xe0\xca\x89\x2a\x1e\xa5\x12\x77\x18\x82\x0c\x2b\x4c\x64\x82\x7b\xc8\x1e\x28\x1f\x25\x7d\xd9\xee\x91\x32\xfe\x80\x1b\x72\xe6\x78\xbf\x77\xbe\x92\x79\x98\x1d\xe2\x8c\x7b\xf0\xc8\x5f\xad\x88\x4c\xe0\x1e\x4c\x99\x0c\x06\x9e\x22\xb1\xe9\xa4\xff\xae\xe6\xff\x7f\x0f\xf8\xe3\x35\x03\x3f\xc8\xd5\x97\xc1\x62\x52\x8e\x62\x03\x30\x6f\x83\xb4\x94\xec\x57\xe0\x98\x38\x5a\x27\x6a\x6f\x77\xd9\xbe\x9e\x89\xde\x1b\x27\x74\xcd\x5c\xa8\x1e\xbd\x34\xd4\x0a\xa3\xcd\x51\x7b\x8a\x8a\x6e\x8b\xe7\x22\x6f\x64\x0f\x8a\x1c\x44\x8a\x22\x99\x3d\xcb\x84\x1b\x5c\x66\x84\x60\xcf\x28\x32\x18\x18\x53\x27\x31\x76\xde\x31\x9f\x4c\x33\x6b\xa8\x91\xc6\xec\x7b\x84\x1e\xb1\x9a\x59\xc4\x46\x01\xa8\xeb\x9b\x22\x20\xca\x82\x90\xe5\x06\xdc\x0d\x26\xb6\xf3\x25\x06\x39\xbe\x2a\x24\x68\x8a\x14\xde\x4c\x28\x69\xb6\x7f\xad\x81\xed\x54\x4c\x9d\xf4\x22\xb4\xf4\xa9\xd0\x14\x7d\x3a\xbd\x70\xce\x03\x06\x37\x40\xbc\x20\x5e\x60\x32\x41\x05\xaa\xfa\x69\x91\x41\x51\xed\x2f\x80\x35\x97\x15\x26\x35\xa5\x02\x47\x9d\x30\x78\x15\xba\x86\x27\x76\x1b\x4c\x8e\xa1\x0c\xdc\x8d\x39\x86\x4e\x50\xb7\x0d\x57\x64\x01\x13\x94\x04\x7f\x80\xd8\xd5\x66\x53\x89\xc0\x16\x10\xff\xff\x7f\x13\xc3\xba\x81\x8f\x24\xc1\x52\x71\x11\xbf\x11\x71\x4a\xe9\x55\x0a\xd1\x61\xfb\xbc\x06\x35\xdb\xea\x9a\x2c\x00\x0b\x56\xe5\xaf\xdb\xe0\x0f\xc0\x82\xe5\xc2\x8e\x82\xaa\xed\x48\x0d\xd8\x07\xf8\xc0\x30\xbc\x96\x71\x70\xf8\x2c\x1f\x11\x3f\x27\xea\x54\x31\xb5\x46\xae\xd0\x73\x86\xce\x70\x19\xcd\x7c\xdd\x49\x92\x6d\xc0\xdd\xc7\xec\x38\x13\xdc\x8d\x83\xc5\x98\xaa\x14\xe7\x0a\xff\x6a\xa8\x5d\x27\x62\x70\xef\xf7\xae\x49\x4b\x85\x3e\xda\xc8\xd1\x5f\x62\x7f\x75\xe4\x06\xee\x72\x49\x1f\x8c\x77\x63\x57\xcf\x67\xb5\x52\x7b\x72\x5a\xf3\xf9\xec\x04\x05\xf1\x6a\xcd\x6f\xe8\x56\xfa\x7e\xc3\x59\x4c\xff\x01\xee\x86\x30\xc4\x04\x82\x46\x99\xf3\x76\x33\x27\x64\x74\x9c\x62\xd7\xb4\x45\x57\x39\xbc\x68\x37\xad\x51\x8a\x20\x4c\xa0\x7f\x5b\xa9\xc3\x32\xcf\xb4\xe8\x36\x71\xaa\x5a\xe8\x29\x58\x8d\x07\xb2\x87\xa9\xec\x4f\xae\xb0\xb2\x06\x7a\xd4\x35\xf0\x4c\x77\x80\x02\x2b\x27\xa0\x7f\x22\x85\x95\x74\x60\x0a\xdf\xa3\x3b\x91\x03\x4f\x77\x5f\x7c\x3f\x81\xc3\x4b\x19\x95\xdb\x7e\xfc\x62\x96\x89\xa7\xd8\x7d\xe5\x82\x36\x1c\xf7\xff\x8a\xda\x7f\x4a\x51\xbb\x88\x13\x60\x1c\xdb\x08\xaf\x96\xe5\x78\x29\xb7\xe2\xfb\xbd\x73\x0a\x3e\x65\xa0\x36\x64\x29\xa3\xb3\x19\xd7\x0c\xe3\xb1\xcb\x80\xf0\x20\x5e\x8c\x27\x88\x4c\x84\x11\xed\xe2\x7d\x6a\xfd\x0d\x6a\x2e\xc8\x6a\x39\x41\xe5\xbe\x5e\x6c\x95\x7e\x09\xb1\x27\xfa\x79\xcd\xbd\xe4\x6f\xe6\x73\x60\x25\xf6\x0c\xaf\xf9\xf0\xe1\x20\x66\xc1\x33\x79\x1d\xd8\x43\xff\xbe\xf2\x08\x87\x57\x98\x7b\x72\x65\x2b\x8c\xe9\x8b\x32\x86\xd6\x55\xc6\x5d\x9e\x80\xaa\x72\xaf\xc5\xf3\xdc\x48\x26\x96\xae\xe1\x25\x47\x34\x94\x7c\x17\xb2\x4c\x92\x0a\x4f\xda\x16\x26\xe6\x21\x86\x78\x7a\x96\x25\x88\xef\x83\xcb\xc1\x33\x52\xfc\xdb\x58\xe6\xe9\x3b\x98\x46\x0b\x53\x8d\xa3\x5e\x4e\xfa\xe7\xd5\x21\x46\x3a\x20\x6a\x4e\x55\xb9\x4f\x7a\x6c\xe6\x4b\x20\x74\x77\xaf\xfb\xa0\xb7\x0d\x27\xcd\xab\x92\x40\xe4\x60\xc5\x50\x7e\x76\x0d\x5e\xc0\xcf\x68\xb8\x8e\xe2\xc4\x78\xe5\xac\x99\x15\x1d\x96\xda\x90\xbf\x73\x8e\x3d\x78\xca\xb0\x14\x6f\x66\x33\x29\x65\x76\x2a\x10\xde\x49\xe0\x7b\x34\x45\x2e\x8d\x9c\xdb\x98\x2c\xe1\x8c\x24\xa0\x30\xb6\xf8\x4e\x16\x75\x15\x0f\x32\x90\xbe\x56\xa4\x77\x69\x66\xb8\x33\x95\xd8\xd5\x2e\xd5\xca\xed\x21\xfe\xf5\xf4\xba\x0e\xf6\x56\x59\x22\x67\xfe\xbf\xd4\xe3\x06\x25\xb0\x4e\x25\xfd\x08\xce\x27\x3d\x6f\x88\xe3\x95\x27\xbe\x72\x3f\x36\x24\xd3\xe5\xae\x64\xd0\x4d\xa4\xb2\x9a\xaf\x68\xc8\xcb\x21\x02\xe8\x44\x51\x9c\x58\xa3\xf4\xb0\x22\x3b\x28\xa8\x96\x9b\x04\x78\x0b\x0b\x83\x53\xf8\x2d\x70\x45\xd2\x9b\xf1\x57\xa8\xbb\x92\xa7\x4a\x57\x24\xa7\xa3\x23\x62\x8d\xa2\xfc\x86\x8b\x02\x53\xf3\xb3\x19\x6a\x3a\xc4\x54\x50\xb9\x72\xb5\x08\x27\x25\x70\x25\x9a\x8a\x2b\x2e\x25\xa7\x52\x7b\x87\x47\xd3\x87\xe8\xbb\x24\xf0\x16\xbd\x1c\xd0\xae\xd5\xe3\xa7\x93\xd5\x21\xde\xf5\x4d\x5e\x04\xea\xf3\x2e\xd8\x25\x0a\x10\x1d\x79\x73\xe7\x32\xff\x39\xcc\xb5\x5e\xea\x47\x39\xb9\x01\xce\x94\xc3\x3a\xf2\x16\x59\xd3\xfb\x83\x16\x8b\x1b\x5b\x85\x80\xd8\x7e\x75\xbb\x37\xc8\xf1\x62\xe3\xf7\x70\xdd\xe7\x02\x72\xb8\x7b\x4e\x13\xdf\x3d\xcb\xd6\xe7\xca\xf6\x7e\x58\xb2\x90\x1d\xfa\x64\x57\x84\x51\x43\x79\xef\xf2\xa2\xd2\x2b\x73\xf3\xea\xdb\x90\x06\x5f\x26\xe4\x36\xfa\xc5\xb0\xfb\x42\xfa\x4d\x03\x7a\xfa\xa2\xa9\x3a\xf0\xd1\x6a\x69\x1e\xd9\x1c\x32\x36\x98\xe7\x88\x43\xe6\x73\x79\x5e\x80\x72\x9f\xec\x76\xab\x4f\x10\xc2\xf3\xa6\xf4\xd6\xb9\x42\xa1\x7c\x41\x51\xca\x78\x6a\x1d\x00\x3d\xf1\xfc\x95\x67\x73\x4d\xf3\xa0\x81\x5c\x32\x72\xf8\x40\xae\x68\x7d\xd7\x81\xfc\x95\x6c\xd0\x31\x85\x3f\xdb\x08\x83\x9a\xd8\x9c\xfc\x21\xa3\x77\xbb\x39\x06\x75\xa7\x67\x74\x1d\x3f\x2f\xc1\xd6\xce\xbf\xbb\x34\xab\xc8\xf4\xb8\xc8\x2f\x4f\x41\xc2\xfb\x4a\x7d\x33\x33\x73\x4a\xc3\xa1\xbc\x64\x64\x7a\x98\xb9\x81\x04\x38\x6e\xbe\x44\xbc\xdf\x7f\x44\xb5\x6b\xb9\x72\x83\xbc\x8c\x4b\x9c\xfd\xfe\xfd\xc6\xb9\x4c\x53\x34\x45\xf2\xcf\x6f\xe5\xbb\xb9\x03\x6f\x50\xa8\x8b\xe6\x34\x0e\xb3\xb9\x55\x88\x7d\xc0\x85\xfe\xec\x7d\x4e\xb1\x5f\xde\xce\x53\x6f\x74\x1a\x25\x90\x97\x52\x66\xb1\xa7\xb8\x50\x7b\x52\xf5\x81\xc6\x58\x89\x91\xa6\x63\xf9\x99\x86\x63\x4a\x55\x88\x55\xdc\x7c\x1f\x15\x1f\x14\x54\xc6\x4c\x43\x1c\xe3\x18\x5f\x01\xc9\x64\x7f\x18\x6b\xea\xc4\xbc\x60\xef\x04\xf5\x30\x6b\x70\x9b\xb6\x7c\x83\xd0\x64\x0b\xdd\xbf\x31\xba\x6d\x99\x62\x6c\xfd\xe5\xd0\x12\x76\xb5\x8b\xf6\x62\x9b\x21\xee\x12\x76\x2f\x15\xf6\x52\x0a\xab\x85\x2b\x5c\xed\x6f\x8e\x4b\xe3\x0d\x30\x7e\xcb\x89\xa8\xd7\xca\x29\x66\x49\xf6\xd0\x23\x9c\x7c\xdd\xad\xe4\x1b\x07\xc1\xa2\x5d\xde\xf4\x4b\xec\xb5\xe8\xa9\xef\x02\xab\xe8\x1e\xcb\x1d\x97\x52\x41\x35\x54\xf7\x56\xae\x04\x21\xec\x12\x76\xb5\x37\x37\xcd\xfa\x95\xef\x41\xa4\x7e\x97\x13\xb4\x31\xbe\xcd\x52\x1f\x38\x8c\xd4\x95\x25\xac\x9e\xca\xef\x0e\x04\xef\x9e\xba\xf1\x26\x37\x8b\x01\x0e\x4b\xd0\xe5\x12\xe9\xd9\x4d\xac\x97\x5e\x13\x8a\x25\xb9\x3d\xf0\xd1\x32\xfb\xae\x49\x72\x99\x85\xde\xcf\x28\xb3\x9d\xc0\x32\x45\x4b\x49\xc9\x68\x56\xd4\xb2\xf1\x55\xcc\x12\x76\x39\x3b\x3a\x28\x95\xee\xf3\x17\xac\x92\x87\xa9\xd2\xd8\xdd\x4f\xf7\x39\xb4\xd6\x94\x16\xf1\x40\x77\xa9\x07\xc7\x8b\xfc\x65\xd3\xee\x2c\x86\xb7\x0c\x70\x97\x59\x22\x42\xe9\x07\x4a\x6c\x97\x3f\x76\x62\xbb\x2c\x25\xb6\x16\x66\x9f\x99\xd8\x7e\x0b\x12\x75\x8d\xc9\xa5\xb1\x27\xa7\xe7\x33\x1a\xad\xe8\x3a\xf6\x92\x09\x4a\x28\xe3\xf5\x6a\x9b\x7f\x27\xf9\x90\xbf\xb2\x2d\xbe\x55\x75\xae\x60\x2b\x70\x02\xc3\xaa\x39\xcf\x66\x17\x86\x9a\xea\x79\xb9\x25\xfb\xc2\x3c\x60\xa7\x3b\x2c\xc9\xe6\xa3\x8f\x60\xcc\x99\xc5\x1e\xb6\x6d\xe7\x5a\xd0\x59\x60\x52\xba\xc2\x68\x7c\x75\x39\x48\xd4\x59\xd2\x70\x37\xe0\xbb\x88\x2f\xc8\xbc\x99\xfc\xc6\x8d\x8a\x01\x6f\x7d\x4f\x09\x77\x1f\xbf\x91\x30\x90\x43\x7b\xd7\xf1\x9c\x21\xb1\x48\x89\x12\xd2\x98\xea\xb2\x05\x44\x1c\x15\xd6\x76\x7d\x6c\x90\x07\xb1\x65\x82\xc5\x95\xd7\xec\x6c\xb0\xa7\x1d\xcb\x37\xf6\x1c\x92\x1a\xcc\xd6\x59\x68\xa4\xee\x1b\x77\x4c\x04\x13\xff\x0e\x00\x00\xff\xff\x8f\x8e\xab\x50\xac\x3e\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 16044, mode: os.FileMode(420), modTime: time.Unix(1659254577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
