// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x6b\x8f\xdb\xb8\xf1\xb3\xf5\x2b\x18\x23\x08\xa8\xc0\xd1\xde\x87\xa2\x1f\xf6\xe0\xa2\xde\xe4\x72\x0d\xf6\x2e\x09\x76\x73\x69\x81\xc5\x22\xa0\xa5\x91\x57\xb5\x24\xba\x14\xfd\x3a\xc3\xff\xbd\xe0\x4b\xa2\xde\xf2\x3e\x82\xbd\x5e\x81\x20\x6b\x91\xf3\x9e\xe1\x0c\x39\xa2\xce\xce\xd0\xdf\x17\x90\x02\x23\x1c\x02\xf4\x8e\xa2\x94\x72\x04\x41\xc4\x11\xbf\x8b\x32\x14\x46\x31\x4c\xd0\xf6\x2e\xf2\xef\x50\x94\x21\xb2\xe6\x34\x21\x3c\xf2\x49\x1c\xef\x51\x81\x37\xdf\x23\x7e\x07\x66\x80\x32\xcf\x71\x56\xc4\x5f\x92\x05\xa0\xc3\xc1\xfb\xac\x7e\x7e\x24\x09\x1c\x8f\x8e\x13\x25\x2b\xca\x38\xc2\xce\x68\x1c\x26\x7c\xec\x8c\x0e\x07\x46\xd2\x05\xa0\x97\xcb\x09\x7a\xb9\x41\xe7\x53\xe4\x7d\x90\x30\xd9\xf1\xe8\x8c\xc6\x87\xc3\xcb\xcd\xf1\x28\xe1\x20\x0d\x04\x85\xd1\x78\x11\xf1\xbb\xf5\xdc\xf3\x69\x72\xb6\x85\xf9\xee\x0d\xa7\xab\x33\x9f\x26\xe3\x96\xa9\x60\xde\x3e\x73\x16\x47\xf3\xb3\x90\xf8\x9c\xb2\xfd\x30\xa8\xb3\x15\x59\x44\x29\xe1\x11\x4d\xdb\x10\xc0\xbf\xa3\x5d\x73\x67\x2b\xc2\x48\x32\x76\x5c\xc7\xe1\xfb\x15\xa0\xeb\x38\xf2\xe1\xdb\xe1\xe0\x5d\x73\xb6\xf6\xb9\x32\x15\xba\xb9\x7d\x5d\x19\x72\x9c\x70\x9d\xfa\x08\x67\xcd\x18\x2e\xba\x12\x96\xc4\x61\x8a\x04\x1c\x4e\x90\x16\xd9\xfb\x95\x06\x10\xbb\x08\x18\xa3\x0c\x99\xbf\x07\x67\x14\x52\x86\xbe\x4d\x90\xb4\xba\xf2\x42\x26\x86\x47\x51\x28\x60\xc4\x68\x98\xe2\x8d\xfb\xa3\x7c\x7a\x31\x45\x69\x14\xcb\xf9\x11\x03\xbe\x66\xa9\x18\x76\x46\xa3\xa3\x23\xfe\xe9\xa1\x34\x8a\x9d\x81\x82\x5e\x91\xad\x25\x6b\x55\xd9\xe7\x24\xee\xcf\x8c\xae\x57\x17\x7b\xbc\x84\xfd\xfb\x08\xe2\x00\x65\x9c\x45\xe9\xc2\x45\x09\x59\xdd\xa8\xdf\xb7\x75\x77\x09\xde\x52\xaa\x4e\xa8\xc3\x31\x57\x8c\xd1\x6d\x55\xb5\x20\x21\x2b\x39\x46\xb7\xde\x2c\xfb\x95\xac\xb0\xeb\x8c\x46\x9b\x25\xec\xa5\xba\x09\xf7\xae\x57\x2c\x4a\x39\x16\x80\x37\x46\xbe\x5b\x57\x59\xe5\xdb\x04\x49\x38\x76\x23\x30\x6e\x7f\x44\x2f\xf6\xda\x20\x6a\x00\x4d\x1b\xa2\x4c\x08\x24\x2c\x64\x01\x91\xd5\x0a\xd2\x00\xeb\x01\x29\xa8\x6b\x5b\x91\x0d\xb0\xe1\x25\xec\x7b\x2c\x38\xc4\x7e\xdf\xcd\x7a\x85\xf2\x8c\x6e\x4f\xd5\x75\x96\x5d\x7e\xad\xaa\x3a\x41\x1b\x12\xaf\xa1\xac\xbd\x4c\x04\xde\x35\xa7\x0c\x72\x6d\xad\xb1\xef\xa0\x9d\x9c\x2b\x24\xbb\x3d\x55\xd5\x2f\x8c\xa4\x59\x48\x59\x82\xb9\xfc\x05\x2c\xb3\xfd\xa5\x94\xf9\xa2\xa7\x5c\x74\x73\xdb\xa4\x72\x42\x96\x80\x4b\x53\x93\x18\x52\x9c\xb9\xae\xd2\x3f\x0a\x76\x8d\x16\x60\x37\x51\xb0\xd3\x3e\x32\x26\xf0\x1a\x24\xaa\x07\x6b\x9f\x5a\xef\x19\x4d\x7e\x89\x32\x8e\x03\xc2\x09\x8a\x52\x0e\x2c\x24\x3e\x1c\x8e\x6e\x4b\xb6\x3e\x38\x23\x69\xc5\x6c\x82\xe8\x52\xc8\x29\x10\x3d\x5c\x5f\x5e\xae\x23\x56\xe6\x0b\xba\x94\x1a\x98\x94\x26\x50\x0b\xed\x0c\x6e\x89\xaf\x5a\xb8\xca\x08\xaf\x9a\xd6\xac\x98\xf4\x84\xe0\x57\x74\x8b\x25\x45\x0f\x5b\xae\xb0\x89\x89\x18\x18\x65\xc5\xca\xce\xcc\x9a\x56\x0b\x5f\x19\x2a\x93\x56\x2b\x43\x29\x1d\x3d\xcf\x73\x9d\x91\x53\x00\x9a\x38\xf9\x08\xdb\x8a\x64\xd8\xe7\x3b\x24\x8a\x9e\xf7\x96\xa6\x1c\x76\xdc\xad\x65\x7a\xa1\x59\xd2\xa6\x55\xe2\x5d\x03\xd7\xa8\x82\x96\x9b\x73\x4d\x90\x60\x7b\x76\x86\x6a\xe4\xcc\xf3\x5b\x9a\x24\x90\xf2\xe3\x51\x95\xd9\x2a\x5c\x26\x1f\x04\xf7\x39\xc9\x00\x21\x94\xd7\xcb\x0b\x92\x81\x33\xa2\xf3\x7f\x83\xcf\xb3\xa6\x42\xdc\xb4\x6b\x51\x00\x33\xce\x59\x34\x5f\x73\xc8\x14\xd8\xcb\x0d\x7a\xa3\x7e\xa9\xed\x8b\x12\xf9\x0d\x92\x2c\x85\xcd\xc4\x46\xc2\x84\x23\x69\xa8\x82\x32\x9c\xb1\x9b\xcb\x26\x9f\x89\x44\x03\x59\x15\xb5\x39\x88\x27\x48\x7a\x1a\xbc\x58\xb9\x4d\x34\x7f\xcb\x40\x2d\x8e\x66\xaa\x6e\x79\xe3\x20\x98\x68\xea\x39\x62\xe1\x06\xd2\xcd\xaa\xec\xbd\x4a\x24\xb4\xb1\x69\x73\x79\x0f\xaf\x9f\x36\x90\xf2\x4f\x1f\x31\x4d\x91\xe7\x79\x73\x4a\xe3\x76\x16\x05\xac\x0a\xe6\x53\x38\xbc\x7f\x8f\x69\x18\x0e\xe5\xa1\xa0\x4f\xe1\x62\x74\x77\x4b\xe6\xaa\xfb\x3a\x87\x1b\xe2\x82\xf4\xc3\x3b\xec\xcb\x3f\x22\x9d\xf5\xd9\xbe\x80\x3e\x45\x6a\x81\xe5\x0a\xf2\x8d\xb2\xca\xd9\x5e\x51\xc5\x4f\x86\x53\xf1\x3f\x52\x80\x95\x5d\xac\xa9\x9d\x1d\x0a\x58\x34\x06\x8b\xaf\x70\x5c\xb5\x1d\x6d\x64\x59\x57\x4a\xe3\xf4\xea\xf4\x59\x14\x36\x2c\xcb\x1b\x7a\x6d\x68\xcb\xc1\x4e\x35\x2c\xb4\xc1\x6a\x28\x9c\x64\xab\xf4\x08\xe6\xde\x15\x64\xeb\x98\xbb\x28\xff\x39\x41\x84\x2d\x32\x11\xbd\xa5\xf2\x52\x96\x4b\x08\x12\x85\x46\x4f\x45\xd4\x45\xd3\x62\x4f\x9d\x1b\xe2\x23\x6c\xf5\xb4\x10\xf9\xd7\x28\x08\x62\xd8\x12\x06\x38\xd9\xca\x91\x19\x5b\x64\x58\x70\x54\x2b\xe0\x58\xb5\xe1\x09\xc8\xdd\xfe\x83\x2d\xce\xf2\x91\x7c\xd3\xa5\x43\x5e\x69\xdb\x60\xed\x8a\x43\x4b\x44\x0c\x76\x3f\x73\x51\x30\xbe\x59\x49\x5a\x3c\xdb\xc9\xf9\x95\xa2\x9f\x67\x7f\x7f\xcd\x18\xa4\x7c\x50\x01\xf8\xa4\xca\x10\x76\x1b\x0a\x51\xee\x26\x53\xab\xea\x1e\x12\x27\x9c\x92\xd5\x35\xe8\xcd\xf9\x6d\xb7\x4e\xff\x2a\x18\xb7\x6e\x79\x34\xd1\xc6\x79\x4c\xbc\x9c\x42\xbf\xef\x0a\x66\xc6\x86\xf2\x8c\x58\x32\x62\x23\x9b\xc3\xb1\x9b\xf6\x87\x34\xe2\x05\xf1\xd7\xcd\x36\xb4\x0c\xd8\x72\x22\x2a\x1c\xa9\x21\x7b\x35\x32\x8b\xa6\xbe\xb0\x34\x2d\x33\x9e\xc3\x9a\x81\x77\x10\x92\x75\xcc\xdf\xab\x47\xb9\x10\x3e\xa4\x01\xec\x70\x25\x97\xca\x19\x55\xf0\xcb\xd5\xdf\x55\x59\x3c\x8e\x41\x46\x17\x26\x32\x53\x7d\xd3\x13\x32\xf6\x31\xe9\x4b\x5b\x77\x94\x71\x11\xd3\xb5\xe4\x37\x3e\x1c\xbc\x2f\x64\x1e\xeb\x9e\xce\xb8\x87\x8e\x7c\x6a\x25\x64\x03\xf7\x50\xd2\x3a\x58\x74\x8a\x0c\x65\xb2\xf7\x8b\x5a\xfc\xff\x33\xe2\x77\x9f\x19\x84\x51\x6e\x3e\x0d\x8b\x89\x5b\xca\x47\x16\x60\xbe\x2b\x32\x5a\xb2\x9f\x81\x63\xe2\x19\x9b\x28\xdc\xee\x6a\xf8\x79\x26\xb6\xe2\x38\xa3\x6b\xe6\x43\xb5\x13\xd3\x90\xf4\xad\x3d\x8f\xc2\x29\xca\xbb\x5b\xcc\x0b\xbf\x17\xd3\x2a\x0a\xf4\xac\x52\x4b\x4f\x6a\x1d\x07\x97\x0d\xa1\xdf\x3d\x8a\x06\x06\xc6\x54\x7f\xc6\xcd\xf7\xd1\xe7\x53\xed\x14\x75\xd0\xb1\xf7\x42\xc2\x9c\x58\x9d\x64\x04\xa2\x00\x34\xf5\x4a\x31\x10\x99\x56\xe8\x72\x05\xfe\x06\x13\xd7\xfb\x94\x82\x3c\xd4\x2a\x22\x68\x8a\x14\x5d\xad\x94\xf4\xde\x7f\xd6\xc0\xf6\x6a\x69\x9d\xf7\x12\x74\x4c\xaf\x68\x8a\xde\x5d\x7c\xf0\xde\x47\x0c\xae\x80\x04\x51\xba\xc0\x64\x82\x0a\x52\xf5\x1e\x92\xc5\x51\xe1\x17\xc0\x46\xca\x8a\x90\x86\x53\x41\xa3\xce\x18\x82\x0a\x5f\x2b\x20\xbb\x1d\x26\x0f\xa7\x0c\xfc\x8d\x7d\x38\x9d\xa0\x6e\x1f\xae\xc8\x02\x26\x28\x8b\x7e\x07\x81\xd5\xe6\x53\x49\x40\x6e\xe3\xfe\xfa\x97\x89\xe5\xdd\x28\x44\x92\x61\xa9\xc6\x88\x67\x44\xbc\x52\x96\x95\x4a\x74\xf8\x3e\x2f\x45\xcd\xbe\xfa\x4c\x16\x80\x85\xa8\xf2\xe9\x3a\xfa\x1d\xb0\x10\xb9\xf0\xa3\xe0\xea\x7a\xd2\x02\xee\x09\x31\x30\x8c\xae\x63\xb5\x13\xef\x15\x23\xe2\x71\xa2\x7a\x8d\x47\x67\xe4\x0b\x3b\x6b\x72\x56\xc8\x18\xe1\xeb\x41\x92\x6d\x23\xee\xdf\xe9\x26\x27\xf8\x1b\x0f\x8b\xc3\xab\x32\x9c\x2f\xe2\xab\xa1\x84\x9d\x8b\xe3\x7c\x7f\x74\x4d\x5a\x0a\xf5\xeb\x8d\x6c\x08\x48\xea\x8f\x4e\xdc\xa2\x5d\xae\xec\x83\xe9\x6e\xdc\x6a\xd7\xd6\x18\xb5\x27\xa7\x35\x77\x6d\x27\x28\x4a\x57\x6b\x7e\x45\xb7\x32\xf6\x1b\x3a\x34\xfd\x6d\xdd\x0d\x61\x88\x09\x02\x8d\x3a\x4b\xb7\xc6\x90\xe2\x9c\x91\x8b\xfe\x86\x7e\x50\x31\x22\xb0\xa6\x2d\xb6\xca\xe1\x6f\x7e\xb8\x15\x91\x8d\x20\xce\xa0\x1f\xad\xb4\xd1\xb2\x3b\x5d\x74\x9b\x79\x55\x2b\xf4\xd4\xad\xc6\x36\xed\x69\x26\xfb\x83\x1b\xac\x6c\x81\x1e\x73\x0d\xec\xf4\x0e\x30\x60\xa5\x2f\xfa\x07\x32\x58\xc9\x06\xb6\xf2\x3d\xb6\x13\x39\xf0\x62\xff\x29\x0c\x33\x38\xbd\x94\x51\x89\xf6\xfc\x8b\x99\x56\x4f\x89\xfb\xc8\x05\x6d\x38\xed\xff\x17\xb5\xff\x95\xa2\xf6\x21\xcd\x80\x71\xec\x22\xbc\x5a\x96\xd7\x4b\x79\x2b\x7e\x38\x78\x17\x10\x52\x06\x0a\x41\xa7\x8c\xce\xcd\xb8\x11\x18\x8f\x7d\x06\x84\x47\xe9\x62\x3c\x41\x64\x22\x9c\xe8\x16\x6f\x59\xeb\xef\x55\x73\x45\x56\xcb\x09\x2a\xef\xeb\x05\xaa\x8c\x4b\x48\x03\xb1\x9f\x37\xd2\x4b\xf9\x66\x21\x07\x56\x12\xcf\x8a\x9a\x57\xaf\x4e\x12\x16\x02\x5b\xd6\x81\x7b\xe8\xdf\x56\x01\xe1\xf0\x08\xe7\x9e\xdc\xd8\x8a\xe2\xf1\x41\x19\xc3\xd8\x4a\x4b\x97\x27\xa0\xaa\xde\x6b\x31\x9f\x3b\xc9\xa6\xd2\x75\x78\xc9\x09\x0d\x65\xdf\x45\x4c\x6b\x52\x91\xc9\xf8\xc2\xa6\x3c\xc4\x11\xbb\x7b\x79\x82\x84\x21\xf8\x1c\x02\x2b\xc5\x7f\x1f\xcf\xec\x9e\xc0\x35\x46\x99\xea\x3a\xea\x95\xa4\xff\xbc\x3a\xc4\x49\x27\xac\x9a\x0b\x55\xee\xb3\x1e\x9f\x85\x12\x08\xdd\xdc\x9a\x7d\xd0\xf7\x5d\x4e\x46\x56\xa5\x81\xc8\xc1\x4a\xa0\xbc\x17\x0d\x41\xc4\xdf\xd2\x78\x9d\xa4\x99\xf5\x22\xda\x08\x2b\x76\x58\x0a\x21\x7f\x13\x9d\x06\xb0\xd3\x54\x8a\xf7\xb5\x5a\x4b\x99\x9d\x0a\x82\x37\x12\xf8\x16\x4d\x91\x4f\x13\xef\x3a\x25\x4b\x78\x4b\x32\x50\x14\x5b\x62\x47\xaf\xba\x4a\x04\x59\x44\x1f\x6b\xa5\x77\x59\x66\x78\x30\x95\xc4\x35\x21\xd5\x2a\xed\x29\xf1\xb5\x7b\xdc\x00\xfb\x5e\x59\x22\x17\xfe\x4f\x1a\x71\x83\x12\x58\xa7\x91\x9e\x43\xf0\xc9\xc8\x1b\x12\x78\xe5\x13\x5f\x79\x3f\x36\x24\xd3\xe5\xa1\x64\xf1\xcd\xa4\xb1\x9a\x2f\x6e\xc8\x2b\x23\x02\xe8\x5c\x71\x9c\x38\xa3\xe3\x89\x45\xf6\x09\x75\xeb\x5e\x64\x15\x5d\x77\xdf\x41\xd9\x41\x19\x64\xb9\xc9\x80\xb7\x88\x30\xb8\x5e\x5d\x03\x57\x2c\x83\x19\x7f\x84\x4d\x86\x94\xa9\xb2\x05\x94\x47\xc1\xd7\xc4\x19\x25\xf9\x25\x1f\x05\xa6\x9a\x05\x76\x5e\x31\xf9\x44\x65\x10\x5f\x8e\x16\xb9\x43\x29\x5c\x49\x1d\xc5\x2d\x9f\xd2\x0a\x52\xb8\xc3\x53\xc7\xab\xe4\x49\xaa\x55\x8b\x5d\x4e\xd8\x9b\xd6\x93\x45\xa7\xa8\xc3\x97\xd2\x53\x84\x57\x6f\xb5\x7a\xca\x70\xdb\xfd\x59\xe2\xed\xa4\xcd\x76\xd5\x44\x0f\x29\x53\xdd\x91\x67\x3c\x36\x24\x04\xbf\xca\xeb\x78\x7d\x11\x08\xfb\x4c\x01\xa2\xd7\xc1\xdc\xbb\xcc\x1f\x87\x65\xb7\x87\xc6\x56\xce\x6e\x40\x3e\xcb\x61\x3d\x79\x97\xb3\xe9\x7d\x5d\x4b\x10\x58\xa8\x42\x41\xec\x3e\x7a\xea\x69\xd0\xe3\xc1\xf9\xa7\x47\xea\xbe\x10\x90\xcd\x94\xfb\x1c\x9a\xbb\x7b\x47\xf5\x3e\x4e\xfb\xf9\x53\x8a\xa0\x9b\xac\xfa\xa2\x3e\x6a\xd8\x4e\x77\x45\x51\xe9\xa6\x8a\x7d\x01\x75\xc8\x81\x5a\xee\x09\xda\xf8\x17\xcd\xa5\x07\xf2\x6f\x6a\x88\x1d\x1f\xd4\xc5\x8a\x42\xb4\x5a\xda\x2d\xd2\x53\x8e\xe9\x76\xdf\x7e\x48\x3f\x4c\xf6\xe7\xd0\xc0\xcc\xf2\x0e\x62\xb8\x5f\x57\xac\xf5\x1c\xaf\x48\x3e\xa0\x50\x69\x99\x5a\x1b\x2e\x81\x98\x7f\xe4\x5e\x98\xe1\x79\x52\x03\x4c\x0a\x72\x7a\x03\x4c\xf1\x7a\xd2\x06\xd8\x23\xf9\xa0\xa3\xeb\x75\x6f\x27\x0c\x2a\xc4\x39\xfb\x53\x5a\x5d\xed\xee\x18\x74\x1a\x7c\x4b\xd7\xe9\xfd\x12\x6c\xed\x7d\x53\x97\x65\x15\x9b\x9e\x10\xf9\x69\x17\x65\xbc\xaf\xd4\x37\x0b\x33\xa7\x34\x1e\x2a\x8b\x66\xd3\x23\xcc\x15\x64\xc0\x71\xf3\x55\xfe\xc3\xe1\x0d\xaa\x5d\x8e\x97\x08\xf2\x4a\x3c\xf1\x0e\x87\x97\x1b\xef\xf2\x78\x44\x53\x24\x7f\x7e\x2d\xdf\x90\x1f\x78\x63\x49\x7d\xee\x41\xd3\x58\xf7\x89\x84\xda\x27\x7c\x56\xa3\xdf\x9f\x16\xf8\xf2\x76\xab\x7a\x83\xda\xa8\x81\xbc\x0b\x36\x4b\x03\x25\x85\xc2\x39\xaa\xcf\xa4\xc6\x4a\x8d\xe3\x71\x2c\x3f\x96\xf2\x6c\xad\x0a\xb5\x8a\xef\x4f\x46\xc5\x67\x3d\x95\xb6\x8e\xa5\x8e\xf5\xda\x4c\x01\xc9\x64\x7f\x9a\x68\xea\x0d\x55\x21\xde\x39\xea\x11\xd6\x92\xf6\xd8\xf2\x25\x50\x93\x2f\xcc\xfe\x8d\xd1\x6d\xcb\x49\xc7\x35\xdf\xef\x2d\x61\x5f\xfb\xdc\x45\xa0\x59\xea\x2e\x61\xff\x50\x65\x2f\xa5\xb2\x46\xb9\x22\xd4\xfe\xe1\xf9\x34\xdd\x00\xe3\xd7\x9c\x88\x7a\xad\x82\x62\x96\xe9\xc9\x80\x70\xf2\x65\xbf\x92\x6f\xf8\x84\x88\x6e\x19\xe9\xa7\x34\x68\xb1\x53\xdf\x05\x70\xb1\x7b\x2c\xef\xb8\x94\x09\xaa\x4b\xf5\xe0\xe4\x46\x10\xca\x2e\x61\x5f\x7b\x53\xda\x6c\x5f\xf9\xde\x51\xda\x77\x39\x41\x1b\xeb\x0b\x49\xf5\x99\xd1\x48\x5d\x11\xc4\x6a\x56\x7e\xfd\x23\x64\x0f\xd4\x45\x53\x89\x2c\xce\x74\x58\x82\x2e\x97\xc8\x1c\xe7\xc4\x78\xe9\xb5\xbc\x18\x92\xe8\x51\x88\x96\xfa\xeb\x42\x29\xa5\x5e\x7a\x3f\x22\xed\x3b\x41\x65\x8a\x96\x92\x93\xb5\x59\x51\xc3\xd6\xb7\x69\x4b\xd8\xe7\xe2\x98\x45\xa9\x6c\x9f\x5f\x68\x90\x32\x4c\x95\xc5\x6e\x7e\xb8\xcd\xa1\x8d\xa5\x8c\x8a\x27\x86\x4b\x7d\x71\x3c\x28\x5e\x36\xed\xc1\x62\x45\xcb\x80\x70\x99\x65\x62\x29\x3d\xa3\xc4\x76\xf9\xbc\x13\xdb\x65\x29\xb1\xb5\x08\x7b\xcf\xc4\xf6\x4b\x94\xa9\x6b\x83\x3e\x4d\x03\x79\x7a\x7e\x4b\x93\x15\x5d\xa7\x41\x36\x41\x19\x65\xbc\x5e\x6d\xf3\xaf\x95\xbf\xe5\x57\x24\x8a\x2f\xc6\xbd\x8f\xb0\x15\x34\x81\x61\xb5\x39\xd7\x67\x17\x86\x9a\xea\xb9\xbd\x25\x63\xde\x27\x16\x00\xbb\xd8\x63\xc9\x36\x3f\xfa\x08\xc1\xbc\x59\x1a\x60\xd7\xf5\x3e\x0b\x3e\x0b\x4c\x4a\x37\x87\xad\x6f\x9f\x07\xa9\x3a\xcb\x1a\xee\xe2\x3c\x89\xfa\x82\xcd\xf3\xd1\xff\x82\x70\xff\xee\x2b\x89\x23\x79\x4e\xef\xea\xda\x59\x4a\x8a\x2c\x28\x21\xad\x83\x9c\x1e\x40\xc4\x53\x2b\xd9\xad\x9f\x14\xe4\xbb\x8e\x32\xc3\xe2\x72\xb9\x6e\x19\xf6\xec\xc0\x72\xc4\x9e\x5e\xbd\x25\x6c\x5d\x84\x46\xee\xa1\x75\x8d\x4b\x08\xf1\xdf\x00\x00\x00\xff\xff\x5b\x60\x00\x84\x25\x42\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 16933, mode: os.FileMode(420), modTime: time.Unix(1688572305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
