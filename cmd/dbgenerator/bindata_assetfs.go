// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x59\x6f\xdc\xb8\xf9\x79\xf4\x2b\x98\x41\x10\x50\xc6\x44\xce\x43\xd1\x07\x07\x53\xd4\x4e\xe2\xad\xe1\xc6\x09\xec\x6c\x5a\xc0\x30\x02\x8e\xf4\xc9\x56\x47\xc7\x94\xe2\x5c\x2b\xe8\xbf\x17\xbc\x24\xea\xd6\xd8\x4e\x9a\x6d\x17\x58\x6c\x3c\xd4\xc7\xef\x3e\x29\xea\xf8\x18\xfd\xf5\x1e\x62\xa0\x84\x81\x87\xde\x27\x28\x4e\x18\x02\x2f\x60\x88\x3d\x04\x29\xf2\x83\x10\x66\x68\xfb\x10\xb8\x0f\x28\x48\x11\x59\xb3\x24\x22\x2c\x70\x49\x18\xee\x51\xb9\x6f\xb1\x47\xec\x01\xf4\x42\x42\x1d\xcb\x5a\x11\x77\x49\xee\x01\x65\x99\xf3\x59\xfe\x79\x45\x22\xc8\x73\xcb\x0a\xa2\x55\x42\x19\xc2\xd6\x64\xea\x47\x6c\x6a\x4d\xb2\x8c\x92\xf8\x1e\xd0\xcb\xe5\x0c\xbd\xdc\xa0\x93\x39\x72\x2e\x04\x4c\x9a\xe7\xd6\x64\x9a\x65\x2f\x37\x79\x2e\xe0\x20\xf6\x38\x86\xc9\xf4\x3e\x60\x0f\xeb\x85\xe3\x26\xd1\xf1\x16\x16\xbb\xd7\x2c\x59\x1d\xbb\x49\x34\xed\x78\xe4\x2d\xba\x9f\x1c\x87\xc1\xe2\xd8\x27\x2e\x4b\xe8\xbe\x0b\x0a\xdc\x87\xa4\xef\xd9\xf1\x8a\x50\x12\x4d\x2d\xdb\xb2\xd8\x7e\x05\xe8\x26\x0c\x5c\xf8\x96\x65\xce\x0d\xa3\x6b\x97\x49\xc9\xd1\xed\xdd\x51\x6d\xc9\xb2\xfc\x75\xec\x22\x9c\xb6\xef\xb0\xd1\x35\x57\x0c\xf6\x63\xc4\xe1\x70\x84\x14\x9f\xce\xc7\xc4\x83\xd0\x46\x40\x69\x42\x91\xfe\x37\xb3\x26\x7e\x42\xd1\xb7\x19\x12\x4a\x94\x4a\x4d\xf9\xf2\x24\xf0\x39\x0c\x5f\xf5\x63\xbc\xb1\xdf\x8a\x5f\x2f\xe6\x28\x0e\x42\xf1\x7c\x42\x81\xad\x69\xcc\x97\xad\xc9\x24\xb7\xf8\x7f\x6a\x29\x0e\x42\x6b\x24\xa3\xd7\x64\x6b\xf0\x5a\x17\xf6\x67\x62\xf7\x17\x9a\xac\x57\x67\x7b\xbc\x84\xfd\x79\x00\xa1\x87\x52\x46\x83\xf8\xde\x46\x11\x59\xdd\xca\xbf\xef\x9a\xe6\xe2\xb4\x05\x57\xbd\x50\x59\x5e\x08\x46\x93\x6d\x5d\x34\x2f\x22\x2b\xb1\x96\x6c\x9d\xd3\xf4\x23\x59\x61\xdb\x9a\x4c\x36\x4b\xd8\x0b\x71\x23\xe6\xdc\xac\x68\x10\x33\xcc\x01\x6f\x35\x7f\x77\xb6\xd4\xca\xb7\x19\x12\x70\xf4\x96\xef\xb8\x7b\x8b\x5e\xec\x95\x42\xe4\x02\x9a\xb7\x78\x19\x67\x88\x6b\xc8\x00\x22\xab\x15\xc4\x1e\x56\x0b\x82\x51\xdb\xd4\x22\x1d\xa1\xc3\x4b\xd8\x0f\x68\x70\x8c\xfe\x7e\x98\xf6\x4a\xe1\x69\xb2\x3d\x54\xd6\xd3\xf4\xf2\x6b\x5d\xd4\x19\xda\x90\x70\x0d\x55\xe9\x45\x22\x70\x6e\x58\x42\xa1\x90\xd6\x58\xfb\x01\xd2\x89\x67\x25\x67\x77\x87\x8a\xfa\x85\x92\x38\xf5\x13\x1a\x61\x26\xfe\x02\x9a\x9a\xf6\x92\xc2\x7c\x51\x8f\x6c\x74\x7b\xd7\x26\x72\x44\x96\x80\x2b\x8f\x66\x21\xc4\x38\xb5\x6d\x29\x7f\xe0\xed\x5a\x35\x40\x6f\x03\x6f\xa7\x6c\xa4\x55\xe0\xb4\x70\xd4\x74\xd6\x21\xb1\xce\x69\x12\xfd\x3d\x48\x19\xf6\x08\x23\x28\x88\x19\x50\x9f\xb8\x90\xe5\x76\x47\xb6\xce\xac\x89\xd0\x62\x3a\x43\xc9\x92\xf3\xc9\x37\x3a\xb8\x19\x5e\xb6\xc5\x23\xf3\x45\xb2\x14\x12\xe8\x94\xc6\xb7\x96\xd2\xe9\xbd\x15\xba\x32\x70\xa5\x12\x5e\xb5\xc5\x2c\x7f\xe8\x70\xc6\xaf\x93\x2d\x16\x18\x1d\x6c\x98\xc2\x44\xc6\x7d\x60\x92\x96\x91\x9d\xea\x98\x96\x81\x2f\x15\x95\x0a\xad\x55\xa1\xa4\x8c\x8e\xe3\xd8\xd6\xc4\x2a\x01\xb5\x9f\x5c\xc1\xb6\xc6\x19\x76\xd9\x0e\xf1\xa2\xe7\xbc\x4b\x62\x06\x3b\x66\x37\x32\x3d\x97\x2c\xea\x92\x2a\x72\x6e\x80\xa9\xad\x1c\x97\x5d\x50\x8d\x10\x27\x7b\x7c\x8c\x1a\xe8\xf4\xef\x77\x49\x14\x41\xcc\xf2\x5c\x96\xd9\x3a\x5c\x2a\x7e\x70\xea\x0b\x92\x02\x42\xa8\xa8\x97\x67\x24\x05\x6b\x92\x2c\xfe\x05\x2e\x4b\xdb\x0a\x71\x5b\x13\x22\x01\x4e\x19\xa3\xc1\x62\xcd\x20\x95\x60\x2f\x37\xe8\xb5\xfc\x4b\x76\x23\x92\xe5\xd7\x48\x90\xe4\x3a\x63\x41\x12\x6b\x77\x24\x2d\x55\x50\xb8\x33\xb6\xd1\x91\x66\x4e\x2c\x10\xb1\x4f\x04\x90\xd4\x06\x71\x38\x46\x47\x41\x97\x81\xdb\x86\xf2\xd7\x14\x64\x6c\xb4\x22\xb5\xab\x6d\x03\xa7\xa1\x90\x17\xfb\x4a\x23\x90\x7e\x4a\x55\xdb\xd5\xfc\xa0\x8b\x4c\x97\xc1\x07\x68\x7d\xd8\x40\xcc\x3e\x5d\xe1\x24\x46\x8e\xe3\x2c\x92\x24\xec\x26\x51\xc2\x4a\x57\x3e\x84\xc2\xf9\x39\x4e\x7c\x7f\x2c\x0d\x09\x7d\x08\x15\x2d\xbb\x5d\x51\x57\xd3\xd4\x05\xdc\x18\x13\xc4\x17\xef\xb1\x2b\xfe\xe1\xc9\x6c\x48\xf7\x25\xf4\x21\x96\xe6\x7f\x52\x1c\xf3\xff\x23\x09\x58\xeb\x3f\x75\xd5\xeb\x21\x6e\xe0\x18\x4d\x5a\xee\xb1\x65\x23\xd9\x4a\xb2\xa9\x3c\xb5\x67\x50\xa6\xcf\xbc\x24\x61\x51\x98\xca\x60\x11\x8b\xbd\x62\x18\xdb\x46\x8b\x21\xf7\x44\x5b\x29\x87\xb7\x70\xae\x21\x5d\x87\xcc\x46\xc5\x9f\x33\x44\xe8\x7d\xca\x3d\xaf\x52\x18\xaa\x7c\x71\x46\x02\x5f\xcb\x29\x91\xda\x68\x5e\x76\xc3\x85\x22\xae\x60\xab\x1e\x73\x96\x3f\x06\x9e\x17\xc2\x96\x50\xc0\xd1\x56\xac\x9c\xd2\xfb\x14\x73\x8a\xd2\x7b\xf3\xba\x0e\x0f\xd8\xac\xb3\x9e\xbb\xa6\x14\x62\x36\x2a\xf1\x5d\xc1\x16\xa7\xc5\x4a\xd1\x45\x29\x2f\x96\x4a\x68\x31\x42\xe0\x23\xde\x3b\x28\xf7\x45\x7f\x41\x6f\x4c\xa9\x35\xf8\x15\x6c\xc5\x0e\x83\xc2\x4c\x6e\xb9\x7d\x73\x67\x8b\x4c\x57\xcd\xa8\x15\x05\xf4\x61\x29\xa3\x93\x47\x91\xdd\x8e\xab\xd7\x11\x3e\xc9\xba\x83\xed\x96\xca\x53\x58\x57\x17\xa7\xa6\x61\xf9\x48\x53\x31\x96\x02\xbd\x3d\xb9\xeb\xa7\xfb\xcf\x92\x70\x67\x8f\xa3\x90\xb6\x3e\xc7\xc4\x29\x30\x0c\x88\x78\x05\xdb\x92\x98\xd6\xa6\x18\x0a\xa9\x41\xe5\x55\x2b\x99\x2c\xef\xc7\x7d\x11\x07\xac\x44\x7e\xd4\xae\x43\x43\x81\x1d\x23\x90\xe6\xa1\x80\x1c\x94\x48\xc7\x5a\x33\x1e\x9b\x6e\x23\x61\xf5\xc2\x7b\xf0\xc9\x3a\x64\xe7\xf2\xa7\x88\x9f\x8b\xd8\x83\x1d\x6e\x38\xd3\x0d\x30\xe9\x44\x35\x8f\x92\x89\x3b\x0c\x41\x84\x15\x26\x22\xc1\x7d\x53\x0f\xa4\x8f\x92\xa1\x6c\xf7\x90\x50\xf6\x0d\xb7\xe4\xcc\x69\x96\x39\x5f\xc8\x22\x54\x67\x32\xd3\x01\x3c\xe2\x57\x27\x22\x13\x78\x00\x93\x92\xc1\xc0\x53\x26\x36\x9d\xf4\x5f\x34\xfc\xff\x1f\x01\x7b\xf8\x4c\xc1\x0f\x0a\xf5\x29\x58\x4c\xaa\x51\x6c\x00\x16\x6d\x90\x96\x92\xfe\x02\x0c\x13\x47\xeb\x44\xee\xed\x2f\xdb\x9f\x4f\x79\xef\x8d\xd3\x64\x4d\x5d\xa8\x1f\xbd\xb4\xd4\x0a\xa3\xcd\x91\x7b\xca\x8a\x6e\xf3\xe7\x3c\x6f\xa8\x07\x65\x0e\x22\x65\x91\x54\xcf\x94\x70\xa3\xcb\x0c\x17\xec\x11\x45\x06\x03\xa5\xf2\x24\xc6\x2e\x3a\xe6\x93\xb9\xb2\x86\x1c\x69\xcc\xbe\x87\xeb\x11\xcb\x99\x85\x6f\xe4\x80\xba\xbe\x49\x02\xbc\x2c\x70\x59\xae\xc1\xdd\x60\x62\x3b\x9f\x62\x10\xe3\xab\x44\x82\xe6\x48\xe2\x55\x42\x09\xb3\xfd\x7b\x0d\x74\x2f\x63\xea\x64\x10\xa1\xa5\x4f\x85\xe6\xe8\xfd\xd9\x85\x73\x1e\x50\xb8\x06\xe2\x05\xf1\x3d\x26\x33\x54\xa2\x6a\x9e\x16\x19\x14\xe5\xfe\x12\x58\x73\x59\x63\x52\x53\x2a\x71\x34\x09\x83\x57\xa3\x6b\x78\x62\xbf\xc1\xc4\x18\x4a\xc1\xdd\x98\x63\xe8\x0c\xf5\xdb\x70\x45\xee\x61\x86\xd2\xe0\x37\xe0\xbb\xba\x6c\x2a\x10\xd8\x1c\xe2\xcf\x7f\x9a\x19\xd6\x0d\x7c\x24\x08\x56\x8a\x0b\xff\x8d\x88\x53\x49\xaf\x42\x88\x1e\xdb\x17\x35\xa8\xdd\x56\x9f\xc9\x3d\x60\xce\xaa\xf8\x75\x13\xfc\x06\x98\xb3\x5c\xda\x91\x53\xb5\x1d\xa1\x01\xfb\x00\x1f\x18\x87\xd7\x32\x0e\x0e\x1f\xe5\x23\xfc\xe7\x4c\x9e\x2a\xe6\xd6\xc4\xe5\x7a\x56\xe8\x0c\x97\xd1\xcc\x37\x9d\x24\xdd\x06\xcc\x7d\x50\xc7\x99\xe0\x6e\x1c\xcc\xc7\x54\xa9\x38\x97\xfb\x57\x4b\xed\x3a\xe1\x83\xfb\xb0\x77\xcd\x3a\x2a\xf4\xd1\x46\x8c\xfe\x02\xfb\xb3\x23\x37\x70\x57\x4b\xfa\x68\xbc\x1b\xbb\x7e\x3e\xab\x95\x3a\x90\xd3\xda\xcf\x67\x67\x28\x88\x57\x6b\x76\x9d\x6c\x85\xef\xb7\x9c\xc5\x0c\x1f\xe0\x6e\x08\x45\x94\x23\x68\x95\xb9\x68\x37\x0b\x42\x46\xc7\xc9\x77\xcd\x3b\x74\x55\xc0\xf3\x76\xd3\x9a\xe4\x08\xc2\x14\x86\xb7\x55\x3a\x2c\xf3\x4c\x2b\xd9\xa6\x4e\x5d\x0b\x03\x05\xab\xf5\x40\xf6\x30\x95\xfd\xce\x15\x56\xd5\xc0\x80\xba\x46\x9e\xe9\x8e\x50\x60\xed\x04\xf4\x77\xa4\xb0\x8a\x0e\x4c\xe1\x07\x74\xc7\x73\xe0\xd9\xfe\x93\xef\xa7\x70\x78\x29\x4b\xc4\xb6\x9f\xbf\x98\x29\xf1\x24\xbb\xcf\x5c\xd0\xc6\xe3\xfe\xa3\xa8\xfd\xaf\x14\xb5\x53\xcf\xc3\x36\xc2\xab\x65\x35\x58\xaa\x7d\x78\x96\x39\x67\xe0\x27\x14\x2e\xe2\x14\x28\x53\xf9\xa2\xb7\x13\xd7\xdc\xe2\xa9\x4b\x81\xb0\x20\xbe\x9f\xce\x10\x99\x71\x0b\xda\xe5\xcb\xd4\xe6\xeb\xd3\x42\x8a\xd5\x72\x86\xaa\x4d\x3d\xdf\x2a\x9c\x12\x62\x8f\x37\xf3\x92\x19\xee\x20\x59\xe6\x9c\xfa\x0c\x68\x85\x3d\xc3\x65\x5e\xbd\x3a\x88\x59\xf0\x4c\x5e\x47\x36\xd0\x37\x64\x03\xcf\x30\xf2\x14\xaa\xfe\x75\xe5\x11\xa6\x53\xf3\x23\x93\x85\xd6\x94\xc4\x55\xe6\x9e\xba\xd4\x6b\xfe\xbc\x30\x91\x89\xa5\x6f\x6e\x29\x10\x8d\x25\xdf\x87\x4c\x49\x52\xe3\x49\x5b\xc2\xc4\x3c\x6c\x86\xdd\xa3\xec\x40\x7c\x1f\x5c\x06\x9e\x91\xdb\x7f\x8c\x5d\x76\xdf\xc1\x30\x5a\x98\x7a\x0c\x0d\x72\x32\x3c\xa8\x8e\x31\xd1\xe8\x88\x39\x93\x55\x3e\x1d\xb0\x98\x2f\x80\xd0\xed\x9d\x6e\x7f\x7e\x6c\x28\x49\x04\x67\x7b\xc9\x3f\x4f\xbd\x92\xa1\xe2\xc8\x1a\xbc\x80\xbd\x4b\xc2\x75\x14\xa7\xc6\x9b\x66\xcd\x2c\x6f\xac\xe4\x86\xe2\x55\x73\xec\xc1\x4e\x61\x29\x5f\xc8\x2a\x29\x45\x5e\x2a\x11\xde\x0a\xe0\x3b\x34\x47\x6e\x12\x39\x37\x31\x59\xc2\x3b\x92\x82\xc4\xd8\xe1\x39\x2a\xe2\x6a\xfe\x63\x20\x7d\xae\x28\xef\xd3\xcc\x78\x57\xaa\xb0\xab\x1d\xaa\x93\xdb\xf1\xde\xb5\x7b\x5e\xf7\xfa\x51\x19\x42\x05\xe3\xff\xad\xbf\x8d\x4a\x5e\xbd\x4a\xfa\xef\xbb\x9e\xf0\xbb\x31\x6e\x57\x1d\xf2\xaa\x5d\xd8\x98\x2c\x57\x38\x52\x41\x35\x15\x8a\x6a\xbf\x93\x21\x6e\x83\x70\xa0\x13\x49\x6f\x66\x4d\xf2\x43\x4a\xeb\xa8\x70\x5a\x6e\x52\x60\x1d\x0c\x8c\x4e\xdd\x37\xc0\xa4\x6d\xbc\x53\xf6\x0c\xd5\x56\xf0\x54\xeb\x84\xc4\x30\x74\x44\xac\x49\x54\x5c\x68\x91\x60\x72\x5c\x36\x83\x4c\x07\x97\x0c\x27\x57\xac\x96\x81\x24\x05\xae\xc5\x51\x79\xa3\xa5\xe2\x4e\x72\xef\xf8\x38\x7a\x15\x7d\x97\xc4\xdd\xa1\x97\x03\x5a\xb4\x66\xe4\xf4\xb2\x3a\xec\x5b\x5f\xc5\xad\x9f\x21\xdf\x82\x7d\x2a\x01\xd1\x91\xb7\x70\x2e\x8b\x9f\xe3\x1c\xeb\xa9\x5e\x54\x90\x1b\xe1\x4a\x05\xac\x23\xae\x8c\xb5\xbd\x2c\xe8\xb0\xb7\xb1\x95\x0b\x88\xed\x67\xb7\x7a\x8b\x1c\x4f\x36\xfd\x00\xd7\x03\xb7\x85\x56\x62\x98\x7b\x4c\xe3\xde\x3f\xbb\x36\xe7\xc8\xee\x1e\x58\xb0\xa0\x4e\x78\xd4\x7d\x60\xd4\x52\xd6\xfb\xbc\xa8\xf2\x7e\xdc\xbc\xe7\x36\xa6\xa9\x17\xc9\xb8\x8b\x7e\x39\xdc\x3e\x91\x7e\xdb\x40\x9e\x3f\x69\x8a\x0e\x7c\xb4\x5a\x9a\xe7\x33\x87\x8c\x0a\xe6\xa1\xe1\x98\x79\x5c\x9c\x0f\xa0\xc2\x27\xfb\xdd\xea\x3d\x84\xc0\x1e\x35\x97\x77\x4e\x13\x12\xe5\x13\x4a\x92\xe2\xa9\x73\xe8\xf3\xf8\xf3\x67\x9e\xc6\x35\xcd\x83\x46\x70\xc1\xc8\xe1\x23\xb8\xa4\xf5\x5d\x87\xf0\x67\xb2\x41\xcf\xe4\xfd\x68\x23\x8c\x6a\x5e\x0b\xf2\x87\x8c\xdb\xdd\xe6\x18\xd5\x95\xbe\x4b\xd6\xf1\xe3\x12\x6c\xe3\xb0\xbb\x4f\xb3\x92\xcc\x80\x8b\x7c\xd8\x05\x29\x1b\x2a\xf5\xed\xcc\x2c\x92\x24\x1c\xcb\x8b\x22\x33\xc0\xcc\x35\xa4\xc0\x70\xfb\x8d\xe1\x2c\x7b\x8d\x1a\x77\x70\xc5\x06\x71\xf3\x96\x38\x59\xf6\x72\xe3\x5c\xe6\x39\x9a\x23\xf1\xe7\xd7\xea\x45\xdc\x91\xd7\x25\xe4\xad\xf2\x24\x0e\xd5\xbc\xca\xc5\x3e\xe0\xf6\xbe\x7a\x79\x53\xee\x17\x57\xf1\xe4\xeb\x9b\x56\x09\xc4\x0d\x94\xd3\xd8\x93\x5c\xc8\x3d\xb9\xfc\x1a\x63\x2a\xc5\xc8\xf3\xa9\xf8\x26\xc3\x31\xa5\x2a\xc5\x2a\xaf\xb9\x4f\xca\xaf\x07\x6a\xe3\xa5\x21\x8e\x71\x66\x2f\x81\x44\xb2\x3f\x8c\x35\x79\x3c\x5e\xb2\x77\x82\x06\x98\x35\xb8\xcd\x3b\x3e\x38\x68\xb3\x85\xee\xdf\x68\xb2\xed\x98\x61\x6c\xfd\x99\xd0\x12\xf6\x8d\x5b\xf5\x7c\x9b\x21\xee\x12\xf6\x4f\x15\xf6\x52\x08\xab\x85\x2b\x5d\xed\x6f\x8e\x9b\xc4\x1b\xa0\xec\x86\x11\x5e\xaf\xa5\x53\x9c\xa6\xea\xa1\x47\x18\xf9\xb2\x5f\x89\xd7\x0b\x9c\x45\xbb\xba\xe9\x43\xec\x75\xe8\x69\xe8\xb6\x2a\xef\x1e\xab\x1d\x97\x54\x41\x3d\x54\x33\xab\x50\x02\x17\x76\x09\xfb\xc6\x6b\x9a\x76\xfd\x8a\x97\x1e\x42\xbf\xcb\x19\xda\x18\x1f\x62\xc9\xaf\x19\x26\xf2\x7e\x12\x96\x4f\xc5\x47\x06\x9c\x77\x4f\x5e\x6f\x13\x9b\xf9\xf8\x86\x05\xe8\x72\x89\xf4\xe4\xc6\xd7\x2b\xef\x04\xf9\x92\xd8\x1e\xf8\x68\xa9\x3e\x62\x12\x5c\xaa\xd0\x7b\x8b\x94\xed\x38\x96\x39\x5a\x0a\x4a\x46\xb3\x22\x97\x8d\x4f\x60\x96\xb0\x2f\xd8\xd1\x41\x29\x75\x5f\xbc\x4d\x15\x3c\xcc\xa5\xc6\x6e\xdf\xdc\x15\xd0\x5a\x53\x5a\xc4\x03\xdd\xa5\x19\x1c\x4f\xf2\x97\x4d\xb7\xb3\x18\xde\x32\xc2\x5d\x4e\x53\x1e\x4a\x3f\x51\x62\xbb\xfc\xb9\x13\xdb\x65\x25\xb1\x75\x30\xfb\xc8\xc4\x76\x46\x98\xfb\xf0\x95\x84\x81\x18\xde\xfa\x0e\x69\x8c\xaf\x21\x79\x68\x08\x48\xa3\xbb\x57\x0b\x88\x38\xd2\xbc\x76\xb3\x7d\x14\x07\x71\x55\x82\xe5\x3d\x47\x75\x42\x34\x50\x96\x8b\x8d\x03\xc7\x64\x06\xb3\x4d\x16\x5a\xa9\xfb\xc6\xc5\x02\xce\xc4\x7f\x02\x00\x00\xff\xff\x42\xf4\x47\x55\x70\x3c\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 15472, mode: os.FileMode(420), modTime: time.Unix(1643015197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x5f\x6f\xdb\x20\x14\xc5\x9f\xe1\x53\xdc\x45\x51\x05\x91\x47\xde\x33\xe5\xa1\xab\xf6\x30\x69\xea\xa2\xf5\x71\x9a\x26\x0c\xc4\xb6\x12\xc0\xc2\x38\x7f\x84\xf8\xee\x13\xb8\xe9\x3c\xa7\x69\xb5\x37\x7c\xb9\xdc\xf3\x3b\xc7\xd0\x72\xb1\xe3\x95\x82\x10\xd8\x66\x58\x3e\x72\xad\x62\xc4\xb8\xd1\xad\x75\x1e\x08\x46\xb3\x10\xd8\x93\xa8\x95\xe6\xcf\x2d\x1b\xee\xeb\x18\x67\x18\xcd\xaa\xc6\xd7\x7d\xc9\x84\xd5\xcb\xa3\x2a\x4f\x1f\xbd\x6d\x97\x4a\xd4\xf6\xd6\x9e\x2c\x6f\xef\x2c\xf7\x4d\xb9\xdc\x72\xe1\xad\x3b\x2f\x5b\x5e\x35\x86\xfb\xc6\x9a\x19\x46\x21\x38\x6e\x2a\x05\xf3\x5d\x01\xf3\x03\xac\xd6\xc0\xbe\x66\xba\x2e\xc6\x8c\x37\x3f\x64\x9c\x10\x94\x91\x31\x62\x8a\x11\x42\x08\x6f\x7b\x23\xe0\x51\x1d\x13\xbe\x77\xbd\xf0\x83\x35\x22\xfc\x09\x12\x24\x7b\xb0\xc6\xab\x93\xa7\xb0\x98\xb4\x40\xc0\xc8\x29\xdf\x3b\x03\x77\x93\xad\x80\x11\x9a\x94\x56\x30\x0d\x68\xa8\xb3\xd7\xb5\x69\x81\x51\xc4\x11\x63\x7f\x6e\x73\xf0\xff\x28\x77\xf9\x23\x01\x2c\x6e\x4c\x9d\x9c\x48\x93\xb2\x53\xa2\xaf\x7c\x50\x10\xb5\x12\x3b\x42\x41\x39\x67\xdd\xc8\x96\x69\xf6\x6f\x1f\xbc\x97\x92\x50\x20\xed\x0e\x1a\xe3\x95\xdb\x72\xa1\x42\x2c\xd2\x9c\x61\x16\x4d\xc3\x9a\x6d\x2e\xac\xd6\xa0\xd9\xb3\xd2\xa7\x5c\xf9\xb0\x4e\x0a\xa9\x65\x24\x98\x4f\x27\xef\x97\x9a\x9e\x7a\x61\x59\xf5\x6d\xb0\x2f\xb2\xf1\x44\x1f\x21\x75\x10\x59\xb2\x1f\xaa\xeb\xf7\x9e\xc2\xcb\xb2\x00\xee\xaa\x0e\x18\x63\x23\xf2\x51\x02\xff\x01\xfd\x2e\xef\x13\x3f\x28\xa2\x8f\x83\x24\x63\xec\x1d\xf6\x6f\x4d\xe7\x37\xbc\x52\x44\x58\x23\x61\x21\x4b\xf6\x60\x75\x6b\x7b\x23\xbb\x02\xba\x74\xa1\xaf\xb0\xc9\xcf\x5f\xd3\x39\xc5\xe8\x0f\x38\x25\xf2\x83\xb8\xee\x0a\x11\xa3\xdf\xc5\xc5\xea\xdf\xf7\x94\x6e\x65\xe2\x50\x8e\x5c\xf9\x29\xe0\x2e\x0d\x2c\x86\x70\x1d\xbc\x16\xef\x38\x1f\xc7\xbe\x3b\xa9\xdc\xe7\x33\xc9\xf0\x39\x00\x14\x0b\x48\xf6\xd8\xbd\x91\x84\x52\xb6\x49\xca\x15\xd1\x97\xd7\x46\x28\x7d\x09\x74\x10\x4b\x29\x47\xfc\x27\x00\x00\xff\xff\x70\x05\x57\xb8\x8a\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1162, mode: os.FileMode(420), modTime: time.Unix(1643013980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
