// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\x59\x8f\xdb\x38\xd2\xcf\xd6\xaf\xe0\x34\x82\x80\x0a\x1c\x75\x1e\x3e\x7c\x0f\x09\x7a\xb1\xee\x64\x32\x13\xf4\xe4\x40\x77\x26\xbb\x40\xa3\x11\xd0\x52\xc9\xad\xb5\x24\x7a\x49\xfa\x1a\xc3\xff\x7d\xc1\x4b\xa2\x2e\x4b\xee\x0b\x99\x9d\x05\x06\xd3\x96\x58\xac\x9b\x55\xc5\x12\x99\xd3\x53\xf4\xf7\x19\xe4\xc0\x88\x80\x08\xbd\xa3\x28\xa7\x02\x41\x94\x08\x24\x6e\x13\x8e\xe2\x24\x85\x31\x5a\xdf\x26\xe1\x2d\x4a\x38\x22\x4b\x41\x33\x22\x92\x90\xa4\xe9\x16\x95\xf3\xa6\x5b\x24\x6e\xc1\xbe\xa0\x2c\xf0\xbc\x05\x09\xe7\x64\x06\x68\xb7\x0b\xbe\xe8\x9f\x9f\x48\x06\xfb\xbd\xe7\x25\xd9\x82\x32\x81\xb0\x37\x3a\x89\x33\x71\xe2\x8d\x76\x3b\x46\xf2\x19\xa0\x67\xf3\x31\x7a\xb6\x42\xaf\xcf\x50\xf0\x41\xc1\xf0\xfd\xde\x1b\x9d\xec\x76\xcf\x56\xfb\xbd\x82\x83\x3c\x92\x18\x46\x27\xb3\x44\xdc\x2e\xa7\x41\x48\xb3\xd3\x35\x4c\x37\x2f\x05\x5d\x9c\x86\x34\x3b\xe9\x18\x8a\xa6\xdd\x23\xa7\x69\x32\x3d\x8d\x49\x28\x28\xdb\x0e\x83\x3a\x5d\x90\x59\x92\x13\x91\xd0\xbc\x6b\x02\x84\xb7\xf4\xd0\xd8\xe9\x82\x30\x92\x9d\x78\xbe\xe7\x89\xed\x02\xd0\x55\x9a\x84\xf0\x7d\xb7\x0b\xae\x04\x5b\x86\x42\xab\x0a\x5d\xdf\xbc\xa8\xbd\xf2\xbc\x78\x99\x87\x08\xf3\xf6\x19\x3e\xba\x94\x9a\xc4\x71\x8e\x24\x1c\xce\x90\x61\x39\xf8\x48\x23\x48\x7d\x04\x8c\x51\x86\xec\xdf\x9d\x37\x8a\x29\x43\xdf\xc7\x48\x69\x5d\x5b\x81\xcb\xd7\xa3\x24\x96\x30\xf2\x6d\x9c\xe3\x95\xff\x46\x3d\xfd\x74\x86\xf2\x24\x55\xe3\x23\x06\x62\xc9\x72\xf9\xda\x1b\x8d\xf6\x9e\xfc\xcf\xbc\xca\x93\xd4\x1b\xc8\xe8\x25\x59\x3b\xbc\xd6\x85\xfd\x91\xd8\xfd\x85\xd1\xe5\xe2\x7c\x8b\xe7\xb0\x7d\x9f\x40\x1a\x21\x2e\x58\x92\xcf\x7c\x94\x91\xc5\xb5\xfe\x7d\xd3\x34\x97\xa4\xad\xb8\x3a\x08\xb5\xdb\x17\x82\x31\xba\xae\x8b\x16\x65\x64\xa1\xde\xd1\x75\x30\xe1\x1f\xc9\x02\xfb\xde\x68\xb4\x9a\xc3\x56\x89\x9b\x89\xe0\x6a\xc1\x92\x5c\x60\x09\x78\x6d\xf9\xbb\xf1\xb5\x56\xbe\x8f\x91\x82\x63\xd7\x72\xc6\xcd\x1b\xf4\xd3\xd6\x28\x44\xbf\x40\x67\x2d\x5e\x26\x19\x92\x1a\x72\x80\xc8\x62\x01\x79\x84\xcd\x0b\xc5\xa8\xef\x6a\x91\x0d\xd0\xe1\x05\x6c\x7b\x34\x38\x44\x7f\x4f\xa6\xbd\x52\x78\x46\xd7\xc7\xca\x3a\xe1\x17\xdf\xea\xa2\x8e\xd1\x8a\xa4\x4b\xa8\x4a\xaf\x02\x41\x70\x25\x28\x83\x42\x5a\xe7\xdd\x13\x48\xa7\xc6\x4a\xce\x6e\x8e\x15\xf5\x2b\x23\x39\x8f\x29\xcb\xb0\x50\xbf\x80\x71\xd7\x5e\x5a\x98\xaf\x66\xc8\x47\xd7\x37\x6d\x22\x67\x64\x0e\xb8\x32\x34\x4e\x21\xc7\xdc\xf7\xb5\xfc\x49\xb4\x69\xd5\x00\xbb\x4e\xa2\x8d\xb1\x91\x55\x41\xd0\xc2\x51\xd3\x59\xfb\xc4\x7a\xcf\x68\xf6\x5b\xc2\x05\x8e\x88\x20\x28\xc9\x05\xb0\x98\x84\xb0\xdb\xfb\x1d\xd1\x7a\xe7\x8d\x94\x16\xf9\x18\xd1\xb9\xe4\x53\x4e\x0c\x70\x73\x79\xf9\x9e\x5c\x99\x3f\xd1\xb9\x92\xc0\x86\x34\x39\xb5\x94\xce\xce\xad\xd0\xd5\x0b\x57\x2b\xe1\x79\xdb\x9a\x95\x83\x81\x64\xfc\x92\xae\xb1\xc2\x18\x60\xc7\x14\x2e\x32\xe9\x03\x23\x5e\xae\x6c\x6e\xd7\xb4\x5e\xf8\x5a\x51\x5c\x69\xad\x0a\xa5\x65\x0c\x82\xc0\xf7\x46\x5e\x09\x68\xfd\xe4\x13\xac\x6b\x9c\xe1\x50\x6c\x90\x4c\x7a\xc1\x5b\x9a\x0b\xd8\x08\xbf\x11\xe9\xa5\x64\x59\x97\x54\x59\x70\x05\xc2\x4c\x95\xb8\xfc\x82\x6a\x86\x24\xd9\xd3\x53\xd4\x40\x67\x9f\xdf\xd2\x2c\x83\x5c\xec\xf7\x3a\xcd\xd6\xe1\xb8\x7a\x90\xd4\xa7\x84\x03\x42\xa8\xc8\x97\xe7\x84\x83\x37\xa2\xd3\x7f\x41\x28\x78\x5b\x22\x6e\xab\x5a\x34\xc0\x44\x08\x96\x4c\x97\x02\xb8\x06\x7b\xb6\x42\x2f\xf5\x2f\x5d\xbe\x68\x96\x5f\x22\x45\x52\xea\x4c\x16\x12\xd6\x1d\x49\x4b\x16\x54\xee\x8c\xfd\x82\x37\xf5\x4c\xd4\x34\x50\x59\xd1\xa8\x83\x04\x12\x65\x60\xc0\xcb\x95\xdb\x86\xf3\x77\x0e\x7a\x71\xb4\x63\xf5\xab\x85\x83\x24\x62\xb0\x17\x13\x4b\x33\x90\xc3\xa4\xaa\xd6\xab\x79\x42\x17\x99\x2e\x93\xf7\xd0\xfa\x79\x05\xb9\xf8\xfc\x09\xd3\x1c\x05\x41\x30\xa5\x34\xed\x26\x51\xc2\x6a\x67\x3e\x86\xc2\xfb\xf7\x98\xc6\xf1\x50\x1a\x1a\xfa\x18\x2a\x56\x76\xbf\xa2\xae\xa6\xad\x0b\xb8\x21\x26\xc8\x3f\xbc\xc3\xa1\xfa\x23\xc3\x59\x9f\xee\x4b\xe8\x63\xb8\x96\xb3\x7c\x89\xbe\x95\x57\x35\xda\xcb\xaa\xfc\xc9\x70\x2e\xff\x8f\x34\x60\xad\x8a\xb5\xb9\xf3\x80\x00\x0e\x8e\xc1\xec\xeb\x39\xbe\x2e\x47\x5b\x49\x36\x85\x32\x73\x7a\x65\xfa\x22\x13\x1b\x56\xe9\x0d\xbd\xb0\xb8\xd5\xcb\x83\x62\x38\xd3\x06\x8b\xa1\xe7\x64\x6b\x2d\x47\x34\x0d\x2e\x81\x2f\x53\xe1\xa3\xe2\xe7\x18\x11\x36\xe3\xd2\x7b\x2b\xe9\xa5\xca\x97\x64\x24\x89\xad\x9c\x1a\xa9\x8f\xce\xca\x9a\xba\x50\xc4\x27\x58\x9b\x61\xc9\xf2\xc7\x24\x8a\x52\x58\x13\x06\x38\x5b\xab\x37\x13\x36\xe3\x58\x52\xd4\x2b\x60\x5f\xd7\xe1\x11\x93\x0f\xdb\x0f\xd6\x98\x17\x6f\x8a\xa2\xcb\xb8\xbc\x96\xb6\x45\xdb\x35\x83\x56\x90\xd8\xd9\xfd\xc4\x65\xc2\xf8\xee\x04\x69\xf9\xec\x06\xe7\xe7\x1a\x7f\x11\xfd\xc3\x25\x63\x90\x8b\x41\x09\xe0\xb3\x4e\x43\xd8\x6f\x49\x44\x85\x99\x6c\xae\x6a\x5a\x48\xee\x70\x2a\x5a\x37\xa0\xd7\xaf\x6f\x0e\xcb\xf4\xcf\x92\x70\x67\xc9\x63\x90\xb6\x8e\x63\x12\x14\x18\xfa\x6d\x57\x12\xb3\x3a\x54\x7b\xc4\x8a\x12\x5b\xc9\xec\xf6\x87\x71\x7f\xc8\x13\x51\x22\x7f\xd1\xae\x43\x47\x81\x1d\x3b\xa2\xd2\x90\x06\xb2\x57\x22\xbb\x68\x9a\x0b\xcb\xe0\xb2\xef\x0b\x58\xfb\xe2\x1d\xc4\x64\x99\x8a\xf7\xfa\x51\x2d\x84\x0f\x79\x04\x1b\x5c\x8b\xa5\x6a\x44\x27\xfc\x6a\xf6\xf7\x75\x14\x4f\x53\x50\xde\x85\x89\x8a\x54\xdf\xcd\x80\xf2\x7d\x4c\xfa\xc2\xd6\x2d\x65\x42\xfa\x74\x23\xf8\x9d\xec\x76\xc1\x57\x32\x4d\x4d\x4f\xe7\xa4\x07\x8f\x7a\xea\x44\xe4\x02\xf7\x60\x32\x32\x38\x78\xa6\xb2\xf0\x22\x6a\x09\x4c\x5d\xd7\x9f\xa2\xf6\x62\x72\xaf\x41\x2b\xc1\xdb\x6d\x14\x18\xbe\xfe\x91\x88\xdb\x2f\x0c\xe2\x64\x83\xab\xb0\x78\xea\x57\x42\x98\x03\x58\x14\x52\x56\x31\xec\x17\x10\x78\x1a\x58\x35\xea\xb9\x87\x13\xe8\x97\x89\xac\xde\x31\xa7\x4b\x16\x42\xbd\x79\xd3\x92\x27\x9c\x32\x49\xcf\x29\x2b\x02\xbf\x1c\x97\xae\x52\x0e\x6b\xc7\x31\xa3\x5a\x2c\x33\x68\x64\x1c\x9c\x69\xa4\x7c\x77\xc8\x33\x18\x18\xd3\x2d\x1d\xbf\x28\xbd\xa5\x15\x75\x80\x54\x7b\x23\xb7\x7c\x92\xea\xc4\x7a\xf3\x23\x27\x4a\x40\x9b\xe2\x34\x01\x19\x9c\xa5\x2c\x97\x10\xae\x30\xf1\x83\xcf\x39\xa8\x7d\xb0\x46\x82\xce\x90\xc6\x6b\x84\x52\xd6\xfb\xf7\x12\xd8\x56\xaf\xc6\xd7\xbd\x08\x3d\xdb\x5e\x3a\x43\xef\xce\x3f\x04\xef\x13\x06\x97\x40\xa2\x24\x9f\x61\x32\x46\x25\xaa\x66\xdb\xc9\xa1\xa8\xe7\x97\xc0\x96\xcb\x1a\x93\x96\x52\x89\xa3\x49\x18\xa2\x1a\x5d\xc7\x21\x0f\x1b\x4c\xed\x67\x19\x84\x2b\x77\x3f\x3b\x46\x87\x6d\xb8\x20\x33\x18\x23\x9e\xfc\x01\x72\x56\x97\x4d\x15\x02\x55\xf9\xfd\xff\xff\x8d\x1d\xeb\x26\x31\x52\x04\x2b\x69\x49\x3e\x23\x12\x54\x02\xb3\x5d\x9b\x5d\xb6\x2f\xb2\x57\xbb\xad\xbe\x90\x19\x60\xc9\xaa\x7a\xba\x4a\xfe\x00\x2c\x59\x2e\xed\x28\xa9\xfa\x81\xd2\x80\x7f\x84\x0f\x0c\xc3\xeb\x39\x1d\xc8\x3b\xf9\x88\x7c\x1c\xeb\xf6\xe4\xde\x1b\x85\x52\xcf\x06\x9d\xe3\x32\x96\xf9\xa6\x93\xf0\x75\x22\xc2\x5b\xd3\x17\x85\x70\x15\x60\xb9\xdf\xd5\x8a\x0b\xa5\x7f\xb5\x64\xbd\xd7\xde\x68\x88\x77\x8d\x3b\x72\xfb\x8b\x95\xea\x21\x28\xec\x0f\x8e\xdc\xc1\x5d\x2d\x06\x06\xe3\x5d\xf9\xf5\x46\xaf\x55\x6a\x4f\x4c\x6b\x6f\xf4\x8e\x51\x92\x2f\x96\xe2\x92\xae\x95\xef\xb7\x34\x75\xfa\x3b\xc1\x2b\xc2\x10\x93\x08\x5a\x65\x56\x66\x4d\x21\xc7\x05\x21\x1f\xfd\x0d\xbd\xd2\x3e\x22\x67\x9d\x75\xe8\xaa\x80\xbf\x7e\x75\x23\x3d\x1b\x41\xca\xa1\x7f\x5a\xa5\x36\x73\x9b\x63\x74\xcd\x83\xba\x16\x7a\xf2\x56\x6b\x67\xf7\x38\x95\xfd\xc9\x15\x56\xd5\x40\x8f\xba\x06\x36\x87\x07\x28\xb0\xd6\x4a\xfd\x13\x29\xac\xa2\x03\x57\xf8\x1e\xdd\xc9\x18\x78\xbe\xfd\x1c\xc7\x1c\x8e\x4f\x65\x54\x4d\xfb\xf1\x93\x99\x11\x4f\xb3\xfb\xc0\x09\x6d\x38\xee\xff\x25\xb5\xff\x96\xa4\xf6\x21\xe7\xc0\x04\xf6\x11\x5e\xcc\xab\xeb\xa5\x5a\x8a\xef\x76\xc1\x39\xc4\x94\x81\x9e\x60\x42\xc6\xc1\x62\xdc\x32\x8c\x4f\x42\x06\x44\x24\xf9\xec\x64\x8c\xc8\x58\x1a\xd1\x2f\x3f\xcc\x36\x3f\xc5\x16\x82\x2c\xe6\x63\x54\xad\xeb\xe5\x54\xe5\x97\x90\x47\xb2\x9e\xb7\xdc\x2b\xfe\x26\xb1\x00\x56\x61\xcf\xf1\x9a\xe7\xcf\x8f\x62\x16\x22\x97\xd7\x81\x35\xf4\xef\x8b\x88\x08\x78\x80\x7d\x4f\xa1\x6c\x8d\x71\x7f\xaf\x88\x61\x75\x65\xb8\x2b\x02\x50\x5d\xee\xa5\x1c\x2f\x8c\xe4\x62\x39\xb4\x79\x29\x10\x0d\x25\x7f\x08\x99\x91\xa4\xc6\x93\xb5\x85\x8b\x79\x88\x21\x36\x77\xb2\x04\x89\x63\x08\x05\x44\x4e\x88\x7f\x1a\xcb\x6c\x1e\xc1\x34\x56\x98\xfa\x3a\xea\xe5\xa4\x7f\xbf\x3a\xc4\x48\x47\xac\x9a\x73\x9d\xee\x79\x8f\xcd\x62\x05\x84\xae\x6f\x6c\x1d\xf4\xb4\xcb\xc9\xf2\xaa\x25\x90\x31\x58\x33\x54\xb4\xaf\x21\x4a\xc4\x5b\x9a\x2e\xb3\x9c\x3b\xdf\xae\x2d\xb3\xb2\xc2\xd2\x13\x8a\x8f\xd7\x79\x04\x1b\x83\xa5\xfc\xc4\x6b\xa4\x54\xd1\xa9\x44\x78\xad\x80\x6f\xd0\x19\x0a\x69\x16\x5c\xe5\x64\x0e\x6f\x09\x07\x8d\xb1\xc3\x77\xcc\xaa\xab\x79\x90\x83\xf4\xa1\x56\xfa\x21\xcd\x0c\x77\xa6\x0a\xbb\xd6\xa5\x3a\xb9\x3d\xc6\xbf\x36\x0f\xeb\x60\x4f\x15\x25\x0a\xe6\xff\xa2\x1e\x37\x28\x80\x1d\x54\xd2\x8f\xe0\x7c\xca\xf3\x86\x38\x5e\x75\xc7\x57\xad\xc7\x86\x44\xba\xc2\x95\x1c\xba\x5c\x29\xab\xfd\xac\x87\x3a\x65\x22\x81\x5e\x6b\x8a\x63\x6f\xb4\x3f\x32\xc9\x3e\xa2\x6c\x87\x17\x59\x4d\xd6\xcd\x13\x08\x3b\x28\x82\xcc\x57\x1c\x44\x07\x0b\x83\xf3\xd5\x15\x08\x4d\x32\x9a\x88\x07\x28\x32\x14\x4f\xb5\x12\x50\x6d\x05\x5f\x10\x6f\x94\x15\xe7\x82\x34\x58\x5f\x4c\x79\xa5\xc3\x8a\x06\x36\x51\x25\x54\xd0\x65\x3c\xd1\x4a\xa8\x85\x93\xf2\xb0\x50\x65\x55\xe9\xb9\xc3\xc3\xc9\xf3\xec\x51\x32\x58\x87\xae\x8e\xa8\x57\x9b\x01\xe4\x20\xab\xc3\x97\xd7\x63\xb8\x5c\x6f\x06\x7b\x4c\x17\xdc\xfc\x95\x7d\xf0\xa8\xa2\xbc\xae\xb6\xfb\xa4\xb3\xc3\xde\x68\xad\x38\xc4\x2d\xbf\xa9\x93\x7e\x7d\x5e\x09\x5b\xae\x01\xd1\x8b\x68\x1a\x5c\x14\x8f\xc3\xa2\xe0\x7d\xfd\xad\x20\x37\x20\xee\x15\xb0\x81\x3a\x26\xda\xf6\x5d\xaf\xc3\x09\x9c\xa9\x52\x40\xec\x3f\x78\x38\x6a\x91\xe3\xde\x31\xa9\x87\xeb\x3e\x17\x50\x4d\x97\xbb\x6c\xae\x0f\xf7\x98\x9a\xfd\x9e\xee\x7d\xaa\x62\xc1\x34\x63\xcd\x1d\x00\xd4\x52\x76\x1f\xf2\xa2\xca\x21\x18\xf7\x6c\xeb\x90\x8d\xb7\xaa\x1d\xba\xe8\x97\x4d\xa8\x7b\xd2\x6f\x6b\x9c\xed\xef\xd5\xed\x4a\x62\xb4\x98\xbb\xad\xd4\x63\xb6\xf3\x6e\x7f\x7f\x48\xdf\x4c\xf5\xf1\xd0\xc0\xc8\xf2\x0e\x52\xb8\x5b\xf7\xac\x73\xbf\xaf\x51\xde\x23\x79\x19\x9e\x3a\x1b\x33\x91\x1c\x7f\xe0\x9e\x99\xa5\x79\x54\xa3\x4c\x31\x72\x7c\xa3\x4c\xd3\x7a\xd4\x46\xd9\x03\xd9\xe0\x40\x77\xec\xce\x46\x18\x94\x88\x0b\xf2\xc7\xb4\xc4\xba\xcd\x31\x68\xd7\xf8\x96\x2e\xf3\xbb\x05\xd8\xc6\x77\xa9\x43\x9a\xd5\x64\x7a\x5c\xe4\xe7\x4d\xc2\x45\x5f\xaa\x6f\x67\x66\x4a\x69\x3a\x94\x17\x43\xa6\x87\x99\x4b\xe0\x20\x70\xfb\x2d\x81\xdd\xee\x25\x6a\x9c\xbb\x57\x13\xd4\x69\x7b\x12\xec\x76\xcf\x56\xc1\xc5\x7e\x8f\xce\x90\xfa\xf9\xad\x7a\xf8\x7e\xe0\xc9\x26\x7d\x93\x84\xe6\xa9\xe9\x27\x49\xb1\x8f\xb8\xb1\x63\xbe\xb3\x96\xf3\xd5\xc1\x59\xfd\xa5\xb5\x55\x02\x75\x66\x6c\x92\x47\x9a\x0b\x3d\x67\xaf\x6f\x60\x9d\x68\x31\xf6\xfb\x13\x75\x0f\x2b\x70\xa5\x2a\xc5\x2a\xaf\xb6\x8c\xca\x1b\x43\xb5\xf6\x8f\x23\x8e\xf3\x79\x4d\x03\xa9\x60\x7f\x1c\x6b\xfa\x4b\x56\xc9\xde\x6b\xd4\xc3\xac\xc3\xed\xbe\xe3\x92\x51\x9b\x2d\x6c\xfd\xc6\xe8\xba\x63\xf7\xe3\xdb\xab\x81\x73\xd8\x36\x6e\xd2\xc8\x69\xbb\xe2\x32\x9c\xbe\x99\x63\xae\xc6\x48\xdf\x26\x6b\x55\x22\xf9\x6f\x90\xb9\x8f\x33\x0a\x69\x2e\x92\x7c\x09\x26\x5d\x1b\x35\xcd\x61\x7b\x5f\x25\x5d\x28\x25\x59\xa5\x94\x2e\xfa\x6b\x10\xd2\x7c\x05\x4c\x5c\x09\x22\xf3\xbc\x76\xa6\x09\x37\x83\x11\x11\xe4\xeb\x76\xa1\xbe\x20\x2a\x56\xab\x93\x7e\xce\xa3\x0e\xfd\xf6\x9d\xdd\xd3\x4d\x9d\xb8\x72\x1d\xcd\xd1\xaa\x14\xb7\xe1\x23\xc7\x49\xdf\xf4\x10\x1b\x1c\x3a\xbc\x38\xd2\xe7\x5e\x0b\x40\x73\x74\xb9\x4f\x92\x49\x9a\x2a\xaa\xf2\x95\x3e\x26\xdd\x38\x69\x6a\x5f\x69\x21\x06\x89\x60\xb8\x2b\xf9\x1f\x5b\x5e\xf5\x48\x0f\x5f\xbf\x12\xde\xa6\x61\x19\x2f\x3b\x54\x7b\x0c\x57\x5d\xaa\x15\x4c\x79\xae\xc3\x66\x43\xa9\x31\x49\x39\xf4\xb2\x7f\x05\x42\x6e\x4b\xaa\xa5\xbc\x5e\x5b\xf5\x1c\x50\x4a\xa3\x56\xd7\x1c\xb6\x8d\x4f\xf5\xed\x0b\x57\x7d\xf8\x56\x0b\x77\x3e\x46\x2b\xe7\x56\xaf\x59\x8a\xfa\x8c\x2a\xd6\xa3\xea\xc6\x9a\x2b\x8f\x7c\x5e\x11\x86\xb0\x02\x9d\xcf\x8d\x8a\xd5\xd3\xaa\x72\x2e\x44\xbe\x52\xd3\x93\x18\xcd\xcd\x8d\x58\xc5\xa5\x31\xca\x1b\x64\x16\xb7\xc4\x72\x86\xe6\x8a\x92\x53\x05\xeb\xd7\xce\x7d\xca\x39\x6c\x0b\x76\x6c\xb4\xd7\x8b\xb3\x38\x51\xa3\x78\x30\xa1\xe6\xfa\xd5\x4d\x01\x6d\x35\x65\x45\x3c\x32\x9e\x34\x0d\x7f\xaf\x80\xb2\xea\x8e\x26\xce\xb2\x1c\x10\x4f\x26\x5c\xc6\xe8\x1f\x28\x63\x5e\xfc\xd8\x19\xf3\xa2\x92\x31\x3b\x98\xbd\x63\xc6\xfc\x2d\xe1\xfa\xdc\x6a\x48\xf3\x48\xb5\x65\xde\xd2\x6c\x41\x97\x79\xc4\xc7\x88\x53\x26\x9a\x65\x5c\x71\xc3\xde\x50\x28\xff\x89\x83\xa0\xc0\x46\xd4\x6d\x98\xc8\xa0\xe8\xdf\x77\xd8\x89\x13\xde\x72\x50\xeb\x41\x59\x9b\x70\xc9\x9c\x24\x72\x47\x16\x8b\x13\x65\x0f\xca\x56\x81\xf5\xae\x9a\xb3\x08\x1e\x5f\x83\x0e\xa5\xbb\x69\xf2\x9c\x88\xf0\xf6\x1b\x49\x13\xd5\x89\x3a\xd4\xab\x76\xf8\x91\xe1\x58\x41\x3a\xad\x0a\xf3\x02\x91\x40\x87\x14\xbf\xb9\x17\x56\x5f\xfd\xaa\x04\x49\x71\xcd\xc2\x34\xca\x7b\xd8\x2d\x26\xf6\x7c\xb5\x6a\x2a\xcf\x61\xa1\x95\x7a\xec\x1c\x68\x94\x4c\xfc\x27\x00\x00\xff\xff\x5a\x0b\x42\x86\x62\x45\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 17762, mode: os.FileMode(420), modTime: time.Unix(1731219723, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
