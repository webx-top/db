// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x6b\x6f\xdb\x38\xf2\xb3\xf5\x2b\x58\xa3\x28\xa8\xc0\x55\xf6\xc3\xe1\x3e\x64\xe1\xc3\x39\x69\xb3\x17\x64\xdb\x06\x49\xb7\x77\x40\x10\x04\xb4\x34\x72\x74\x96\x44\x1f\x45\xbf\xd6\xf0\x7f\x3f\x90\x14\x25\xea\x2d\xe7\x85\xec\xed\x01\x45\x63\x91\xf3\x9e\xe1\x0c\x39\xa2\x8e\x8f\xd1\xdf\x67\x10\x03\x23\x1c\x3c\xf4\x89\xa2\x98\x72\x04\x5e\xc0\x11\x7f\x08\x12\xe4\x07\x21\x8c\xd0\xfa\x21\x70\x1f\x50\x90\x20\xb2\xe4\x34\x22\x3c\x70\x49\x18\x6e\x51\x8e\x37\xdd\x22\xfe\x00\x7a\x80\x32\xc7\xb2\x16\xc4\x9d\x93\x19\xa0\xdd\xce\xb9\x52\x3f\xbf\x92\x08\xf6\x7b\xcb\x0a\xa2\x05\x65\x1c\x61\x6b\x30\xf4\x23\x3e\xb4\x06\xbb\x1d\x23\xf1\x0c\xd0\xfb\xf9\x08\xbd\x5f\xa1\x93\x31\x72\x2e\x24\x4c\xb2\xdf\x5b\x83\xe1\x6e\xf7\x7e\xb5\xdf\x4b\x38\x88\x3d\x41\x61\x30\x9c\x05\xfc\x61\x39\x75\x5c\x1a\x1d\xaf\x61\xba\xf9\xc8\xe9\xe2\xd8\xa5\xd1\xb0\x61\xca\x9b\x36\xcf\x1c\x87\xc1\xf4\xd8\x27\x2e\xa7\x6c\xdb\x0f\xea\x78\x41\x66\x41\x4c\x78\x40\xe3\x26\x04\x70\x1f\x68\xdb\xdc\xf1\x82\x30\x12\x0d\x2d\xdb\xb2\xf8\x76\x01\xe8\x26\x0c\x5c\xb8\xdf\xed\x9c\x1b\xce\x96\x2e\x57\xa6\x42\xb7\x77\x47\xa5\x21\xcb\xf2\x97\xb1\x8b\x70\x52\x8f\x61\xa3\x6b\x61\x49\xec\xc7\x48\xc0\xe1\x08\xa5\x22\x3b\x5f\xa8\x07\xa1\x8d\x80\x31\xca\x90\xfe\xbb\xb3\x06\x3e\x65\xe8\x7e\x84\xa4\xd5\x95\x17\x12\x31\x3c\x08\x7c\x01\x23\x46\xfd\x18\xaf\xec\x9f\xe5\xd3\xbb\x31\x8a\x83\x50\xce\x0f\x18\xf0\x25\x8b\xc5\xb0\x35\x18\xec\x2d\xf1\x2f\x1d\x8a\x83\xd0\xea\x29\xe8\x35\x59\x1b\xb2\x96\x95\x7d\x4b\xe2\xfe\xc2\xe8\x72\x71\xba\xc5\x73\xd8\x9e\x07\x10\x7a\x28\xe1\x2c\x88\x67\x36\x8a\xc8\xe2\x56\xfd\xbe\xab\xba\x4b\xf0\x96\x52\xb5\x42\xed\xf6\x99\x62\x8c\xae\xcb\xaa\x79\x11\x59\xc8\x31\xba\x76\x26\xc9\x17\xb2\xc0\xb6\x35\x18\xac\xe6\xb0\x95\xea\x46\xdc\xb9\x59\xb0\x20\xe6\x58\x00\xde\x6a\xf9\xee\x6c\x65\x95\xfb\x11\x92\x70\xec\x56\x60\xdc\xfd\x8c\xde\x6d\x53\x83\xa8\x01\x34\xae\x89\x32\x21\x90\xb0\x90\x01\x44\x16\x0b\x88\x3d\x9c\x0e\x48\x41\x6d\xd3\x8a\xac\x87\x0d\x2f\x61\xdb\x61\xc1\x3e\xf6\x7b\x35\xeb\xe5\xca\x33\xba\x3e\x54\xd7\x49\x72\xf9\xa3\xac\xea\x08\xad\x48\xb8\x84\xa2\xf6\x32\x11\x38\x37\x9c\x32\xc8\xb4\x35\xc6\x5e\x41\x3b\x39\x97\x4b\x76\x77\xa8\xaa\xdf\x19\x89\x13\x9f\xb2\x08\x73\xf9\x0b\x58\x62\xfa\x4b\x29\xf3\x3d\x9d\xb2\xd1\xed\x5d\x9d\xca\x11\x99\x03\x2e\x4c\x8d\x42\x88\x71\x62\xdb\x4a\xff\xc0\xdb\xd4\x5a\x80\xdd\x06\xde\x26\xf5\x91\x36\x81\x53\x23\x51\x35\x58\xbb\xd4\x3a\x67\x34\xfa\x35\x48\x38\xf6\x08\x27\x28\x88\x39\x30\x9f\xb8\xb0\xdb\xdb\x0d\xd9\x7a\x67\x0d\xa4\x15\x93\x11\xa2\x73\x21\xa7\x40\x74\x70\x75\x79\xd9\x96\x58\x99\xef\xe8\x5c\x6a\xa0\x53\x9a\x40\xcd\xb5\xd3\xb8\x05\xbe\x6a\xe1\x2a\x23\x7c\xa8\x5b\xb3\x62\xd2\x11\x82\x5f\xd3\x35\x96\x14\x1d\x6c\xb8\xc2\x24\x26\x62\x60\x90\xe4\x2b\x3b\xd1\x6b\x5a\x2d\x7c\x65\xa8\x44\x5a\xad\x08\xa5\x74\x74\x1c\xc7\xb6\x06\x56\x0e\xa8\xe3\xe4\x2b\xac\x4b\x92\x61\x97\x6f\x90\x28\x7a\xce\x19\x8d\x39\x6c\xb8\x5d\xc9\xf4\x42\xb3\xa8\x49\xab\xc8\xb9\x01\x9e\xa2\x0a\x5a\x76\xc6\x35\x42\x82\xed\xf1\x31\xaa\x90\xd3\xcf\x67\x34\x8a\x20\xe6\xfb\xbd\x2a\xb3\x65\xb8\x44\x3e\x08\xee\x53\x92\x00\x42\x28\xab\x97\xa7\x24\x01\x6b\x40\xa7\xff\x06\x97\x27\x75\x85\xb8\x6e\xd7\xa2\x00\x26\x9c\xb3\x60\xba\xe4\x90\x28\xb0\xf7\x2b\xf4\x51\xfd\x52\xdb\x17\x25\xf2\x47\x24\x59\x0a\x9b\x89\x8d\x84\x0e\x47\x52\x53\x05\x65\x38\x63\x3b\x93\x4d\x3e\x13\x89\x06\xb2\x2a\xa6\xe6\x20\x8e\x20\xe9\xa4\xe0\xf9\xca\xad\xa3\xf9\x5b\x02\x6a\x71\xd4\x53\xb5\x8b\x1b\x07\xc1\x24\xa5\x9e\x21\xe6\x6e\x20\xed\xac\x8a\xde\x2b\x45\x42\x13\x9b\x26\x97\x77\xf0\xfa\xbc\x82\x98\x7f\xfb\x8a\x69\x8c\x1c\xc7\x99\x52\x1a\x36\xb3\xc8\x61\x55\x30\x1f\xc2\xe1\xfc\x1c\x53\xdf\xef\xcb\x43\x41\x1f\xc2\x45\xeb\x6e\x17\xcc\x55\xf5\x75\x06\xd7\xc7\x05\xf1\xc5\x27\xec\xca\x3f\x22\x9d\x75\xd9\x3e\x87\x3e\x44\x6a\x81\x65\x0b\xf2\xb5\xb2\xca\xd9\x4e\x51\xc5\x4f\x86\x63\xf1\x3f\x52\x80\xa5\x5d\xac\xae\x9d\x2d\x0a\x18\x34\x7a\x8b\xaf\x70\x6c\xb5\x1d\xad\x65\x59\x55\x2a\xc5\xe9\xd4\xe9\x4a\x14\x36\x2c\xcb\x1b\x3a\xd2\xb4\xe5\x60\xab\x1a\x06\x5a\x6f\x35\x14\x4e\xb4\x56\x7a\x78\x53\xe7\x1a\x92\x65\xc8\x6d\x94\xfd\x1c\x21\xc2\x66\x89\x88\xde\x42\x79\x29\xca\x25\x04\x09\x7c\xad\xa7\x22\x6a\xa3\x71\xbe\xa7\xce\x0c\xf1\x15\xd6\xe9\xb4\x10\xf9\x4b\xe0\x79\x21\xac\x09\x03\x1c\xad\xe5\xc8\x84\xcd\x12\x2c\x38\xaa\x15\xb0\x2f\xdb\xf0\x00\xe4\x76\xff\xc1\x1a\x27\xd9\x48\xb6\xe9\x4a\x43\x5e\x69\x5b\x63\xed\x92\x43\x0b\x44\x34\x76\x37\x73\x51\x30\xee\x8d\x24\x2d\x9e\xab\xc9\x39\x4b\xfe\xee\x92\x31\x88\x79\xaf\xfc\xff\x4d\x55\x21\x6c\xd7\xd4\xa1\xcc\x4b\xba\x54\x55\x1d\x24\x0e\x38\x05\xa3\xa7\xa0\xb7\x27\x77\xed\x2a\xfd\x2b\x67\xdc\xb8\xe3\x49\x89\xd6\xce\x63\xe2\x64\x14\xba\x5d\x97\x33\xd3\x26\x94\x47\x44\xd3\x86\x1f\x6a\xd9\xec\xf6\xed\xb4\x2f\xe2\x80\xe7\xc4\x8f\xea\x6d\x68\x18\xb0\xe1\x40\xa4\x65\xc8\x20\x3b\x35\xd2\x6b\xa6\xba\xae\x52\x5a\x7a\x3c\x83\xd5\x03\x9f\xc0\x27\xcb\x90\x9f\xab\x47\xb9\x0e\x2e\x62\x0f\x36\xb8\x94\x4a\xe5\x8c\xaa\xf7\xc5\xe2\x6f\xab\x24\x1e\x86\x20\xa3\x0b\x13\x99\xa8\xee\xd3\x09\x19\xfa\x98\x74\x65\xad\x07\xca\xb8\x08\xe9\x4a\xee\x1b\xee\x76\xce\x77\x32\x0d\xd3\x96\xce\xb0\x83\x8e\x7c\x6a\x24\x64\x02\x77\x50\x4a\x75\x30\xe8\xe4\x09\x4a\x27\xef\x77\x95\xf8\xff\x67\xc0\x1f\xae\x18\xf8\x41\x66\xbe\x14\x16\x13\xbb\x90\x8e\x0c\xc0\x6c\x53\xa4\xb5\x64\xbf\x00\xc7\xc4\xd1\x36\x51\xb8\xed\xc5\xf0\x6a\x22\x76\xe2\x38\xa1\x4b\xe6\x42\xb9\x11\x53\x93\xf3\x8d\x2d\x8f\xc2\xc9\xab\xbb\x9d\xcf\x0b\xbf\xe7\xd3\x2a\x0a\xd2\x59\xa5\x56\x3a\x99\xea\xd8\xbb\x6a\x08\xfd\x1e\x51\x33\x30\x30\xa6\xda\x33\x76\xb6\x8d\x3e\x19\xeb\x6c\x27\xcf\x39\xe6\x56\x48\x98\x13\xab\x83\x8c\x40\x14\x80\xba\x5c\x29\x06\x22\xd1\x0a\x5d\xae\xc1\x5d\x61\x62\x3b\xdf\x62\x90\x67\x5a\x45\x04\x8d\x91\xa2\x9b\x2a\x25\xbd\xf7\x9f\x25\xb0\xad\x5a\x5a\x27\x9d\x04\x2d\xdd\x2a\x1a\xa3\x4f\xa7\x17\xce\x79\xc0\xe0\x1a\x88\x17\xc4\x33\x4c\x46\x28\x27\x55\x6d\x21\x19\x1c\x15\x7e\x0e\xac\xa5\x2c\x09\xa9\x39\xe5\x34\xaa\x8c\xc1\x2b\xf1\x35\x02\xb2\xdd\x61\xf2\x6c\xca\xc0\x5d\x99\x67\xd3\x11\x6a\xf7\xe1\x82\xcc\x60\x84\x92\xe0\x77\x10\x58\x4d\x3e\x95\x04\xe4\x2e\xee\xaf\x7f\x19\x19\xde\x0d\x7c\x24\x19\x16\x6a\x8c\x78\x46\xc4\x29\x64\x59\xa9\x44\x8b\xef\xb3\x52\x54\xef\xab\x2b\x32\x03\x2c\x44\x95\x4f\x37\xc1\xef\x80\x85\xc8\xb9\x1f\x05\x57\xdb\x91\x16\xb0\x0f\x88\x81\x7e\x74\x2d\xa3\x9b\xf8\xa8\x18\x11\x8f\x23\xd5\x6a\xdc\x5b\x03\x57\xd8\x39\x25\x67\x84\x8c\x16\xbe\x1a\x24\xc9\x3a\xe0\xee\x43\xda\xe3\x04\x77\xe5\x60\x71\x76\x55\x86\x73\x45\x7c\xd5\x94\xb0\x13\x71\x9a\xef\x8e\xae\x51\x43\xa1\x3e\x5a\xc9\x7e\x80\xa4\xfe\xec\xc4\x0d\xda\xc5\xca\xde\x9b\xee\xca\x2e\x37\x6d\xb5\x51\x3b\x72\x5a\x7d\xd3\x76\x84\x82\x78\xb1\xe4\xd7\x74\x2d\x63\xbf\xa6\x41\xd3\xdd\xd5\x5d\x11\x86\x98\x20\x50\xab\xb3\x74\x6b\x08\x31\xce\x18\xd9\xe8\x6f\xe8\x27\x15\x23\x02\x6b\xdc\x60\xab\x0c\xfe\xf6\xa7\x3b\x11\xd9\x08\xc2\x04\xba\xd1\x0a\x1b\x2d\xb3\xd1\x45\xd7\x89\x53\xb6\x42\x47\xdd\xaa\xed\xd2\x1e\x66\xb2\x3f\xb8\xc1\x8a\x16\xe8\x30\x57\xcf\x46\x6f\x0f\x03\x96\xda\xa2\x7f\x20\x83\x15\x6c\x60\x2a\xdf\x61\x3b\x91\x03\x4f\xb7\xdf\x7c\x3f\x81\xc3\x4b\x19\x95\x68\x6f\xbf\x98\xa5\xea\x29\x71\x9f\xb9\xa0\xf5\xa7\xfd\xff\xa2\xf6\xbf\x52\xd4\x2e\xe2\x04\x18\xc7\x36\xc2\x8b\x79\x71\xbd\x14\xb7\xe2\xbb\x9d\x73\x0a\x3e\x65\xa0\x10\xd2\x94\xd1\xba\x19\xd7\x02\xe3\xa1\xcb\x80\xf0\x20\x9e\x0d\x47\x88\x8c\x84\x13\xed\xfc\x25\x6b\xf5\xb5\x6a\xa6\xc8\x62\x3e\x42\xc5\x7d\xbd\x40\x95\x71\x09\xb1\x27\xf6\xf3\x5a\x7a\x29\xdf\xc4\xe7\xc0\x0a\xe2\x19\x51\xf3\xe1\xc3\x41\xc2\x82\x67\xca\xda\x73\x0f\xfd\xdb\xc2\x23\x1c\x9e\xe1\xdc\x93\x19\x5b\x51\xdc\x3f\x29\x63\x68\x5b\xa5\xd2\x65\x09\xa8\xac\xf7\x52\xcc\x67\x4e\x32\xa9\xb4\x1d\x5e\x32\x42\x7d\xd9\xb7\x11\x4b\x35\x29\xc9\xa4\x7d\x61\x52\xee\xe3\x88\xcd\xa3\x3c\x41\x7c\x1f\x5c\x0e\x9e\x91\xe2\x5f\xc7\x33\x9b\x17\x70\x8d\x56\xa6\xbc\x8e\x3a\x25\xe9\x3e\xaf\xf6\x71\xd2\x01\xab\xe6\x54\x95\xfb\xa4\xc3\x67\xbe\x04\x42\xb7\x77\x7a\x1f\xf4\xba\xcb\x49\xcb\xaa\x34\x10\x39\x58\x09\x94\xb5\xa2\xc1\x0b\xf8\x19\x0d\x97\x51\x9c\x18\xef\xa1\xb5\xb0\x62\x87\xa5\x10\xb2\x17\xd1\xb1\x07\x9b\x94\x4a\xfe\xba\x36\xd5\x52\x66\xa7\x9c\xe0\xad\x04\xbe\x43\x63\xe4\xd2\xc8\xb9\x89\xc9\x1c\xce\x48\x02\x8a\x62\x43\xec\xa4\xab\xae\x14\x41\x06\xd1\xe7\x5a\xe9\x6d\x96\xe9\x1f\x4c\x05\x71\x75\x48\x35\x4a\x7b\x48\x7c\x6d\x9e\x37\xc0\x5e\x2b\x4b\x64\xc2\xff\x49\x23\xae\x57\x02\x6b\x35\xd2\x5b\x08\x3e\x19\x79\x7d\x02\xaf\x78\xe2\x2b\xee\xc7\xfa\x64\xba\x2c\x94\x0c\xbe\x89\x34\x56\xfd\xbd\x0d\x79\x63\x44\x00\x9d\x28\x8e\x23\x6b\xb0\x3f\xb0\xc8\xbe\xa0\x6e\xed\x8b\xac\xa4\xeb\xe6\x15\x94\xed\x95\x41\xe6\xab\x04\x78\x83\x08\xbd\xeb\xd5\x0d\x70\xc5\xd2\x9b\xf0\x67\xd8\x64\x48\x99\x4a\x5b\x40\x79\x14\x3c\x22\xd6\x20\xca\xee\xf8\x28\x30\xd5\x2c\x30\xf3\x8a\xce\x27\x2a\x83\xb8\x72\x34\xcf\x1d\x4a\xe1\x52\xea\xc8\x2f\xf9\x14\x56\x90\xc2\xed\x9f\x3a\x3e\x44\x2f\x52\xad\x1a\xec\x72\xc0\xde\xb4\x9a\x2c\x5a\x45\xed\xbf\x94\x5e\x22\xbc\x3a\xab\xd5\x4b\x86\xdb\xe6\xcf\x12\x6f\x07\x6d\xb6\xcb\x26\x7a\x4a\x99\x6a\x8f\x3c\xed\xb1\x3e\x21\xf8\x43\xde\xc6\xeb\x8a\x40\xd8\x26\x0a\x10\x1d\x79\x53\xe7\x32\x7b\xec\x97\xdd\x9e\x1a\x5b\x19\xbb\x1e\xf9\x2c\x83\x75\xe4\x55\xce\xba\xf7\x75\x0d\x41\x60\xa0\x0a\x05\xb1\xfd\xec\xa9\xa7\x46\x8f\x27\xe7\x9f\x0e\xa9\xbb\x42\x40\x36\x53\x1e\x73\x68\x6e\xef\x1d\x55\xfb\x38\xcd\xe7\x4f\x29\x42\xda\x64\x4d\xef\xe9\xa3\x9a\xed\x74\x5b\x14\x15\x6e\xaa\x98\xf7\x4f\xfb\x1c\xa8\xe5\x9e\xa0\x89\x7f\xde\x5c\x7a\x22\xff\xba\x86\xd8\xfe\x49\x5d\xac\xc0\x47\x8b\xb9\xd9\x22\x3d\xe4\x98\x6e\xf6\xed\xfb\xf4\xc3\x64\x7f\x0e\xf5\xcc\x2c\x9f\x20\x84\xc7\x75\xc5\x1a\xcf\xf1\x8a\xe4\x13\x0a\x55\x2a\x53\x63\xc3\xc5\x13\xf3\xcf\xdc\x0b\xd3\x3c\x0f\x6a\x80\x49\x41\x0e\x6f\x80\x29\x5e\x2f\xda\x00\x7b\x26\x1f\xb4\x74\xbd\x1e\xed\x84\x5e\x85\x38\x63\x7f\x48\xab\xab\xd9\x1d\xbd\x4e\x83\x67\x74\x19\x3f\x2e\xc1\x56\xde\x37\xb5\x59\x56\xb1\xe9\x08\x91\xcf\x9b\x20\xe1\x5d\xa5\xbe\x5e\x98\x29\xa5\x61\x5f\x59\x52\x36\x1d\xc2\x5c\x43\x02\x1c\xd7\xdf\xe4\xdf\xed\x3e\xa2\xca\xdd\x78\x89\x20\x6f\xc4\x13\x67\xb7\x7b\xbf\x72\x2e\xf7\x7b\x34\x46\xf2\xe7\x8f\xe2\x05\xf9\x9e\x37\x96\xd4\xd7\x1e\x34\x0e\xd3\x3e\x91\x50\xfb\x80\xaf\x6a\xd2\xf7\xa7\x39\xbe\xbc\xdc\xaa\xde\xa0\xd6\x6a\x20\xef\x82\x4d\x62\x4f\x49\xa1\x70\xf6\xea\x2b\xa9\xa1\x52\x63\xbf\x1f\xca\x6f\xa5\x1c\x53\xab\x5c\xad\xfc\xf3\x93\x41\xfe\x55\x4f\xa9\xad\x63\xa8\x63\xbc\x36\x53\x40\x32\xd9\x1f\x26\x9a\x7a\x43\x95\x8b\x77\x82\x3a\x84\x35\xa4\xdd\x37\x7c\x08\x54\xe7\x0b\xbd\x7f\x63\x74\xdd\x70\xd2\xb1\xf5\xe7\x7b\x73\xd8\x56\xbe\x76\x11\x68\x86\xba\x73\xd8\x3e\x55\xd9\x4b\xa9\xac\x56\x2e\x0f\xb5\x7f\x38\x2e\x8d\x57\xc0\xf8\x0d\x27\xa2\x5e\xab\xa0\x98\x24\xe9\xa4\x47\x38\xf9\xbe\x5d\xc8\x37\x7c\x42\x44\xbb\x88\xf4\x39\xf6\x1a\xec\xd4\x75\xff\x5b\xec\x1e\x8b\x3b\x2e\x65\x82\xf2\x52\xdd\x59\x99\x11\x84\xb2\x73\xd8\x56\xde\x94\xd6\xdb\x57\xbe\x77\x94\xf6\x9d\x8f\xd0\xca\xf8\x40\x52\x7d\x65\x34\x50\x57\x04\xb1\x9a\x95\x1f\xff\x08\xd9\x3d\x75\xd1\x54\x22\x8b\x33\x1d\x96\xa0\xf3\x39\xd2\xc7\x39\x31\x5e\x78\x2d\x2f\x86\x24\x7a\xe0\xa3\x79\xfa\x71\xa1\x94\x32\x5d\x7a\x3f\xa3\xd4\x77\x82\xca\x18\xcd\x25\x27\x63\xb3\xa2\x86\x8d\x4f\xd3\xe6\xb0\xcd\xc4\xd1\x8b\x52\xd9\x3e\xbb\xd0\x20\x65\x18\x2b\x8b\xdd\xfe\x74\x97\x41\x6b\x4b\x69\x15\x0f\x0c\x97\xea\xe2\x78\x52\xbc\xac\x9a\x83\xc5\x88\x96\x1e\xe1\x32\x49\xc4\x52\x7a\x43\x89\xed\xf2\x6d\x27\xb6\xcb\x42\x62\x6b\x10\xf6\x91\x89\xed\xd7\x20\x51\xd7\x06\x5d\x1a\x7b\xf2\xf4\x7c\x46\xa3\x05\x5d\xc6\x5e\x32\x42\x09\x65\xbc\x5a\x6d\xb3\x8f\x95\xef\xb3\x2b\x12\xf9\x07\xe3\xce\x57\x58\x0b\x9a\xc0\xb0\xda\x9c\xa7\x67\x17\x86\xea\xea\xb9\xb9\x25\x63\xce\x37\xe6\x01\x3b\xdd\x62\xc9\x36\x3b\xfa\x08\xc1\x9c\x49\xec\x61\xdb\x76\xae\x04\x9f\x19\x26\x85\x9b\xc3\xc6\xa7\xcf\xbd\x54\x9d\x24\x35\x77\x71\x5e\x44\x7d\xc1\xe6\xed\xe8\x7f\x4a\xb8\xfb\xf0\x83\x84\x81\x3c\xa7\xb7\x75\xed\x0c\x25\x45\x16\x94\x90\xc6\x41\x2e\x1d\x40\xc4\x51\x2b\xd9\xae\x9e\x14\xe4\xbb\x8e\x22\xc3\xfc\x72\x79\xda\x32\xec\xd8\x81\x65\x88\x1d\xbd\x7a\x43\xd8\xaa\x08\xb5\xdc\x7d\xe3\x1a\x97\x10\xe2\xbf\x01\x00\x00\xff\xff\x48\x48\x1c\x02\x24\x42\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 16932, mode: os.FileMode(420), modTime: time.Unix(1688571550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
