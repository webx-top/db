// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x6b\x6f\xdc\xb8\xf1\xf3\xea\x57\xf0\x16\x41\x40\x05\x1b\xf9\x3e\x14\xfd\xe0\x83\x8b\xae\x9d\xf3\xd5\xf0\x25\x31\xec\x5c\x5a\xc0\x30\x0c\xae\x34\x5a\xab\x2b\x89\x5b\x8a\xfb\xba\x85\xfe\x7b\x41\x52\x94\xa8\xb7\xd6\x2f\xf8\x7a\x05\x82\x78\x45\x0e\xe7\xcd\x99\xe1\x88\x3a\x3a\x42\x7f\x9f\x43\x0c\x8c\x70\xf0\xd0\x27\x8a\x62\xca\x11\x78\x01\x47\xfc\x21\x48\x90\x1f\x84\x30\x41\x9b\x87\xc0\x7d\x40\x41\x82\xc8\x8a\xd3\x88\xf0\xc0\x25\x61\xb8\x43\xc5\xba\xd9\x0e\xf1\x07\xd0\x03\x94\x39\x96\xb5\x24\xee\x82\xcc\x01\xed\xf7\xce\x95\xfa\xf9\x85\x44\x90\xa6\x96\x15\x44\x4b\xca\x38\xc2\xd6\x68\xec\x47\x7c\x6c\x8d\xf6\x7b\x46\xe2\x39\xa0\x77\x8b\x09\x7a\xb7\x46\xc7\x27\xc8\xb9\x90\x30\x49\x9a\x5a\xa3\xf1\x7e\xff\x6e\x9d\xa6\x12\x0e\x62\x4f\x60\x18\x8d\xe7\x01\x7f\x58\xcd\x1c\x97\x46\x47\x1b\x98\x6d\x3f\x72\xba\x3c\x72\x69\x34\x6e\x99\xf2\x66\xed\x33\x47\x61\x30\x3b\xf2\x89\xcb\x29\xdb\x0d\x83\x3a\x5a\x92\x79\x10\x13\x1e\xd0\xb8\x6d\x01\xb8\x0f\xb4\x6b\xee\x68\x49\x18\x89\xc6\x96\x6d\x59\x7c\xb7\x04\x74\x13\x06\x2e\xdc\xef\xf7\xce\x0d\x67\x2b\x97\x2b\x55\xa1\xdb\xbb\x0f\x95\x21\xcb\xf2\x57\xb1\x8b\x70\xd2\xbc\xc2\x46\xd7\x42\x93\xd8\x8f\x91\x80\xc3\x11\xca\x58\x76\x3e\x53\x0f\x42\x1b\x01\x63\x94\x21\xfd\x77\x6f\x8d\x7c\xca\xd0\xfd\x04\x49\xad\x2b\x2b\x24\x62\x78\x14\xf8\x02\x46\x8c\xfa\x31\x5e\xdb\x3f\xc9\xa7\x1f\x4e\x50\x1c\x84\x72\x7e\xc4\x80\xaf\x58\x2c\x86\xad\xd1\x28\xb5\xc4\xbf\x6c\x28\x0e\x42\x6b\x20\xa3\xd7\x64\x63\xf0\x5a\x15\xf6\x2d\xb1\xfb\x0b\xa3\xab\xe5\xe9\x0e\x2f\x60\x77\x1e\x40\xe8\xa1\x84\xb3\x20\x9e\xdb\x28\x22\xcb\x5b\xf5\xfb\xae\x6e\x2e\x41\x5b\x72\xd5\x09\xb5\x4f\x73\xc1\x18\xdd\x54\x45\xf3\x22\xb2\x94\x63\x74\xe3\x4c\x93\xcf\x64\x89\x6d\x6b\x34\x5a\x2f\x60\x27\xc5\x8d\xb8\x73\xb3\x64\x41\xcc\xb1\x00\xbc\xd5\xfc\xdd\xd9\x4a\x2b\xf7\x13\x24\xe1\xd8\xad\x58\x71\xf7\x13\xfa\x61\x97\x29\x44\x0d\xa0\x93\x06\x2f\x13\x0c\x09\x0d\x19\x40\x64\xb9\x84\xd8\xc3\xd9\x80\x64\xd4\x36\xb5\xc8\x06\xe8\xf0\x12\x76\x3d\x1a\x1c\xa2\xbf\x57\xd3\x5e\x21\x3c\xa3\x9b\x43\x65\x9d\x26\x97\xdf\xab\xa2\x4e\xd0\x9a\x84\x2b\x28\x4b\x2f\x03\x81\x73\xc3\x29\x83\x5c\x5a\x63\xec\x15\xa4\x93\x73\x05\x67\x77\x87\x8a\xfa\x8d\x91\x38\xf1\x29\x8b\x30\x97\xbf\x80\x25\xa6\xbd\x94\x30\xdf\xb2\x29\x1b\xdd\xde\x35\x89\x1c\x91\x05\xe0\xd2\xd4\x24\x84\x18\x27\xb6\xad\xe4\x0f\xbc\x6d\xa3\x06\xd8\x6d\xe0\x6d\x33\x1b\x69\x15\x38\x0d\x1c\xd5\x9d\xb5\x4f\xac\x73\x46\xa3\x5f\x83\x84\x63\x8f\x70\x82\x82\x98\x03\xf3\x89\x0b\xfb\xd4\x6e\x89\xd6\x7b\x6b\x24\xb5\x98\x4c\x10\x5d\x08\x3e\xc5\x42\x07\xd7\xb7\x97\x6d\x89\x9d\xf9\x03\x5d\x48\x09\x74\x48\x13\x4b\x0b\xe9\xf4\xda\x12\x5d\xb5\x71\x95\x12\xde\x37\xed\x59\x31\xe9\x08\xc6\xaf\xe9\x06\x4b\x8c\x0e\x36\x4c\x61\x22\x13\x3e\x30\x4a\x8a\x9d\x9d\xe8\x3d\xad\x36\xbe\x52\x54\x22\xb5\x56\x86\x52\x32\x3a\x8e\x63\x5b\x23\xab\x00\xd4\x7e\xf2\x05\x36\x15\xce\xb0\xcb\xb7\x48\x24\x3d\xe7\x8c\xc6\x1c\xb6\xdc\xae\x45\x7a\x21\x59\xd4\x26\x55\xe4\xdc\x00\xcf\x96\x0a\x5c\x76\x4e\x35\x42\x82\xec\xd1\x11\xaa\xa1\xd3\xcf\x67\x34\x8a\x20\xe6\x69\xaa\xd2\x6c\x15\x2e\x91\x0f\x82\xfa\x8c\x24\x80\x10\xca\xf3\xe5\x29\x49\xc0\x1a\xd1\xd9\xbf\xc1\xe5\x49\x53\x22\x6e\xaa\x5a\x14\xc0\x94\x73\x16\xcc\x56\x1c\x12\x05\xf6\x6e\x8d\x3e\xaa\x5f\xaa\x7c\x51\x2c\x7f\x44\x92\xa4\xd0\x99\x28\x24\xb4\x3b\x92\x86\x2c\x28\xdd\x19\xdb\x39\x6f\xf2\x99\xc8\x65\x20\xb3\x62\xa6\x0e\xe2\x08\x94\x4e\x06\x5e\xec\xdc\x26\x9c\xbf\x25\xa0\x36\x47\x33\x56\xbb\x5c\x38\x08\x22\x19\xf6\x7c\x61\x61\x06\xd2\x4d\xaa\x6c\xbd\x8a\x27\xb4\x91\x69\x33\x79\x0f\xad\x9f\xd7\x10\xf3\xaf\x5f\x30\x8d\x91\xe3\x38\x33\x4a\xc3\x76\x12\x05\xac\x72\xe6\x43\x28\x9c\x9f\x63\xea\xfb\x43\x69\x28\xe8\x43\xa8\x68\xd9\xed\x92\xba\xea\xb6\xce\xe1\x86\x98\x20\xbe\xf8\x84\x5d\xf9\x47\x84\xb3\x3e\xdd\x17\xd0\x87\x70\x2d\x56\xd9\x02\x7d\x23\xaf\x72\xb6\x97\x55\xf1\x93\xe1\x58\xfc\x8f\x14\x60\xa5\x8a\xd5\xb9\xb3\x43\x00\x03\xc7\x60\xf6\xd5\x1a\x5b\x95\xa3\x8d\x24\xeb\x42\x65\x6b\x7a\x65\xba\x12\x89\x0d\xcb\xf4\x86\x3e\x68\xdc\x72\xb0\x53\x0c\x63\xd9\x60\x31\xd4\x9a\x68\xa3\xe4\xf0\x66\xce\x35\x24\xab\x90\xdb\x28\xff\x39\x41\x84\xcd\x13\xe1\xbd\xa5\xf4\x52\xe6\x4b\x30\x12\xf8\x5a\x4e\x85\xd4\x46\x27\x45\x4d\x9d\x2b\xe2\x0b\x6c\xb2\x69\xc1\xf2\xe7\xc0\xf3\x42\xd8\x10\x06\x38\xda\xc8\x91\x29\x9b\x27\x58\x50\x54\x3b\x20\xad\xea\xf0\x80\xc5\xdd\xf6\x83\x0d\x4e\xf2\x91\xbc\xe8\xca\x5c\x5e\x49\xdb\xa0\xed\x8a\x41\x4b\x48\xf4\xea\x7e\xe2\x22\x61\xdc\x1b\x41\x5a\x3c\x9b\xc1\xf9\xbd\xc2\x9f\x47\x7f\x77\xc5\x18\xc4\x7c\x50\x02\xf8\xaa\xd2\x10\xb6\x1b\x12\x51\x6e\x26\x9d\xab\xea\x16\x12\x27\x9c\x92\xd6\x33\xd0\xdb\xe3\xbb\x6e\x99\xfe\x55\x10\x6e\x2d\x79\x32\xa4\x8d\xf3\x98\x38\x39\x86\x7e\xdb\x15\xc4\xb4\x0e\xe5\x19\xb1\xa4\xc4\x46\x32\xfb\xb4\x1b\xf7\x45\x1c\xf0\x02\xf9\x87\x66\x1d\x1a\x0a\x6c\x39\x11\x15\x86\xcc\x20\x7b\x25\xd2\x9b\xa6\xbe\xb1\x32\x5c\x7a\x3c\x87\xd5\x03\x9f\xc0\x27\xab\x90\x9f\xab\x47\xb9\x11\x2e\x62\x0f\xb6\xb8\x12\x4b\xe5\x8c\x4a\xf8\xe5\xec\x6f\xab\x28\x1e\x86\x20\xbd\x0b\x13\x19\xa9\xee\xb3\x09\xe9\xfb\x98\xf4\x85\xad\x07\xca\xb8\xf0\xe9\x5a\xf0\x1b\xef\xf7\xce\x37\x32\x0b\xb3\x9e\xce\xb8\x07\x8f\x7c\x6a\x45\x64\x02\xf7\x60\xca\x64\x30\xf0\xcc\x44\xe1\x45\xe4\x16\x98\x99\xae\x3f\x43\xcd\xc5\x64\xaa\x40\x4b\xc1\xdb\x6c\x14\x64\x7c\xfd\x33\xe0\x0f\x57\x0c\xfc\x60\x8b\xcb\xb0\x78\x66\x97\x42\x98\x01\x98\x17\x52\x5a\x31\xec\x17\xe0\x78\xe6\x68\x35\xaa\xb5\xdd\x09\xf4\x6a\x2a\xaa\x77\x9c\xd0\x15\x73\xa1\xda\xbc\x69\xc8\x13\x46\x99\xa4\xd6\x14\x15\x81\x5d\xcc\x0b\x57\x29\xa6\x95\xe3\x64\xb3\x4a\xac\x6c\x32\x93\x71\x70\xa6\x11\xf2\x3d\x22\xcf\x60\x60\x4c\xb5\x74\xec\xbc\xf4\x16\x56\x54\x01\x52\x9e\x8d\xcc\xf2\x49\xa8\x13\xab\xc3\x8f\x58\x28\x00\x75\x8a\x53\x04\x44\x70\x16\xb2\x5c\x83\xbb\xc6\xc4\x76\xbe\xc6\x20\xcf\xc1\x0a\x09\x3a\x41\x0a\x6f\x26\x94\xb4\xde\x7f\x56\xc0\x76\x6a\x37\x1e\xf7\x22\xb4\x74\x7b\xe9\x04\x7d\x3a\xbd\x70\xce\x03\x06\xd7\x40\xbc\x20\x9e\x63\x32\x41\x05\xaa\x7a\xdb\xc9\xa0\xa8\xd6\x17\xc0\x9a\xcb\x0a\x93\x9a\x52\x81\xa3\x4e\x18\xbc\x0a\x5d\xc3\x21\xbb\x0d\x26\xcf\xb3\x0c\xdc\xb5\x79\x9e\x9d\xa0\x6e\x1b\x2e\xc9\x1c\x26\x28\x09\x7e\x07\xb1\xaa\xcd\xa6\x12\x81\xac\xfc\xfe\xfa\x97\x89\x61\xdd\xc0\x47\x92\x60\x29\x2d\x89\x67\x44\x9c\x52\x60\xd6\x7b\xb3\xcd\xf6\x79\xf6\x6a\xb6\xd5\x15\x99\x03\x16\xac\xca\xa7\x9b\xe0\x77\xc0\x82\xe5\xc2\x8e\x82\xaa\xed\x48\x0d\xd8\x07\xf8\xc0\x30\xbc\x96\xd1\x81\x7c\x94\x8f\x88\xc7\x89\x6a\x4f\xa6\xd6\xc8\x15\x7a\xce\xd0\x19\x2e\xa3\x99\xaf\x3b\x49\xb2\x09\xb8\xfb\x90\xf5\x45\xc1\x5d\x3b\x58\x9c\x77\x95\xe2\x5c\xe1\x5f\x0d\x59\xef\xd8\x1a\x0d\xf1\xae\x49\x4b\x6e\xff\xb0\x96\x3d\x04\x89\xfd\xd9\x91\x1b\xb8\xcb\xc5\xc0\x60\xbc\x6b\xbb\xda\xe8\xd5\x4a\xed\x89\x69\xcd\x8d\xde\x09\x0a\xe2\xe5\x8a\x5f\xd3\x8d\xf4\xfd\x86\xa6\x4e\x7f\x27\x78\x4d\x18\x62\x02\x41\xa3\xcc\xd2\xac\x21\xc4\x38\x27\x64\xa3\xbf\xa1\x1f\x95\x8f\x88\x55\x27\x2d\xba\xca\xe1\x6f\x7f\xbc\x13\x9e\x8d\x20\x4c\xa0\x7f\x59\xa9\x36\x33\x9b\x63\x74\x93\x38\x55\x2d\xf4\xe4\xad\xc6\xce\xee\x61\x2a\xfb\x83\x2b\xac\xac\x81\x1e\x75\x0d\x6c\x0e\x0f\x50\x60\xa5\x95\xfa\x07\x52\x58\x49\x07\xa6\xf0\x3d\xba\x13\x31\xf0\x74\xf7\xd5\xf7\x13\x38\x3c\x95\x51\xb9\xec\xed\x27\xb3\x4c\x3c\xc5\xee\x33\x27\xb4\xe1\xb8\xff\x9f\xd4\xfe\x57\x92\xda\x45\x9c\x00\xe3\xd8\x46\x78\xb9\x28\xef\x97\x72\x29\xbe\xdf\x3b\xa7\xe0\x53\x06\x6a\x41\x16\x32\x3a\x8b\x71\xcd\x30\x1e\xbb\x0c\x08\x0f\xe2\xf9\x78\x82\xc8\x44\x18\xd1\x2e\x5e\xcc\xd6\x5f\xc5\xe6\x82\x2c\x17\x13\x54\xae\xeb\xc5\x52\xe9\x97\x10\x7b\xa2\x9e\xd7\xdc\x4b\xfe\xa6\x3e\x07\x56\x62\xcf\xf0\x9a\xf7\xef\x0f\x62\x16\x3c\x93\xd7\x81\x35\xf4\x6f\x4b\x8f\x70\x78\x86\x73\x4f\xae\x6c\x85\x31\x7d\x52\xc4\xd0\xba\xca\xb8\xcb\x03\x50\x55\xee\x95\x98\xcf\x8d\x64\x62\xe9\x3a\xbc\xe4\x88\x86\x92\xef\x42\x96\x49\x52\xe1\x49\xdb\xc2\xc4\x3c\xc4\x10\xdb\x47\x59\x82\xf8\x3e\xb8\x1c\x3c\x23\xc4\xbf\x8e\x65\xb6\x2f\x60\x1a\x2d\x4c\x75\x1f\xf5\x72\xd2\x7f\x5e\x1d\x62\xa4\x03\x76\xcd\xa9\x4a\xf7\x49\x8f\xcd\x7c\x09\x84\x6e\xef\x74\x1d\xf4\xba\xdb\x49\xf3\xaa\x24\x10\x31\x58\x31\x94\xb7\xaf\xc1\x0b\xf8\x19\x0d\x57\x51\x9c\x18\xef\xae\x35\xb3\xa2\xc2\x52\x0b\xf2\x97\xd7\xb1\x07\xdb\x0c\x4b\xf1\x8a\x37\x93\x52\x46\xa7\x02\xe1\xad\x04\xbe\x43\x27\xc8\xa5\x91\x73\x13\x93\x05\x9c\x91\x04\x14\xc6\x16\xdf\xc9\x76\x5d\xc5\x83\x0c\xa4\xcf\xb5\xd3\xbb\x34\x33\xdc\x99\x4a\xec\x6a\x97\x6a\xe5\xf6\x10\xff\xda\x3e\xaf\x83\xbd\x56\x94\xc8\x99\xff\x93\x7a\xdc\xa0\x00\xd6\xa9\xa4\xb7\xe0\x7c\xd2\xf3\x86\x38\x5e\xf9\xc4\x57\xae\xc7\x86\x44\xba\xdc\x95\x0c\xba\x89\x54\x56\xf3\x5d\x0f\x79\xcb\x44\x00\x1d\x2b\x8a\x13\x6b\x94\x1e\x98\x64\x5f\x50\xb6\xee\x4d\x56\x91\x75\xfb\x0a\xc2\x0e\x8a\x20\x8b\x75\x02\xbc\x85\x85\xc1\xf9\xea\x06\xb8\x22\xe9\x4d\xf9\x33\x14\x19\x92\xa7\x4a\x09\x28\x8f\x82\x1f\x88\x35\x8a\xf2\x7b\x41\x0a\x4c\x35\x0b\xcc\xb8\xa2\xe3\x89\x8a\x20\xae\x1c\x2d\x62\x87\x12\xb8\x12\x3a\x8a\x8b\x41\xa5\x1d\xa4\xd6\x0e\x0f\x1d\xef\xa3\x17\xc9\x56\x2d\x7a\x39\xa0\x36\xad\x07\x8b\x4e\x56\x87\x6f\xa5\x97\x70\xaf\xde\x6c\xf5\x92\xee\xb6\xfd\xb3\xf8\xdb\x41\xc5\x76\x55\x45\x4f\x49\x53\xdd\x9e\xa7\x2d\x36\xc4\x05\xbf\xcb\x1b\x7c\x7d\x1e\x08\xbb\x44\x01\xa2\x0f\xde\xcc\xb9\xcc\x1f\x87\x45\xb7\xa7\xfa\x56\x4e\x6e\x40\x3c\xcb\x61\x1d\x79\xfd\xb3\xe9\x7d\x5d\x8b\x13\x18\x4b\x85\x80\xd8\x7e\xf6\xd0\xd3\x20\xc7\x93\xe3\x4f\x0f\xd7\x7d\x2e\x20\x9b\x29\x8f\x39\x34\x77\xf7\x8e\xea\x7d\x9c\xf6\xf3\xa7\x64\x21\x6b\xb2\x66\x77\xfb\x51\x43\x39\xdd\xe5\x45\xa5\xcb\x2d\xe6\x9d\xd5\x21\x07\x6a\x59\x13\xb4\xd1\x2f\x9a\x4b\x4f\xa4\xdf\xd4\x10\x4b\x9f\xd4\xc5\x0a\x7c\xb4\x5c\x98\x2d\xd2\x43\x8e\xe9\x66\xdf\x7e\x48\x3f\x4c\xf6\xe7\xd0\xc0\xc8\xf2\x09\x42\x78\x5c\x57\xac\xf5\x1c\xaf\x50\x3e\x21\x51\x65\x3c\xb5\x36\x5c\x3c\x31\xff\xcc\xbd\x30\x4d\xf3\xa0\x06\x98\x64\xe4\xf0\x06\x98\xa2\xf5\xa2\x0d\xb0\x67\xb2\x41\x47\xd7\xeb\xd1\x46\x18\x94\x88\x73\xf2\x87\xb4\xba\xda\xcd\x31\xe8\x34\x78\x46\x57\xf1\xe3\x02\x6c\xed\x7d\x53\x97\x66\x15\x99\x1e\x17\xf9\x79\x1b\x24\xbc\x2f\xd5\x37\x33\x33\xa3\x34\x1c\xca\x4b\x46\xa6\x87\x99\x6b\x48\x80\xe3\xe6\xdb\xff\xfb\xfd\x47\x54\xbb\x4f\x2f\x17\xc8\x5b\xf4\xc4\xd9\xef\xdf\xad\x9d\xcb\x34\x45\x27\x48\xfe\xfc\x5e\xbe\x54\x3f\xf0\xc6\x92\xfa\x42\x84\xc6\x61\xd6\x27\x12\x62\x1f\xf0\x25\x4e\xf6\xfe\xb4\x58\x2f\x2f\xc4\xaa\x37\xa8\x8d\x12\xc8\xbb\x60\xd3\xd8\x53\x5c\xa8\x35\xa9\xfa\xb2\x6a\xac\xc4\x48\xd3\xb1\xfc\xbe\xca\x31\xa5\x2a\xc4\x2a\x3e\x59\x19\x15\x5f\x02\x55\xda\x3a\x86\x38\xc6\x6b\x33\x05\x24\x83\xfd\x61\xac\xa9\x37\x54\x05\x7b\xc7\xa8\x87\x59\x83\xdb\xb4\xe5\xe3\xa1\x26\x5b\xe8\xfa\x8d\xd1\x4d\xcb\x49\xc7\xd6\x9f\xfc\x2d\x60\x57\xfb\x42\x46\x2c\x33\xc4\x5d\xc0\xee\xa9\xc2\x5e\x4a\x61\xb5\x70\x85\xab\xfd\xc3\x71\x69\xbc\x06\xc6\x6f\x38\x11\xf9\x5a\x39\xc5\x34\xc9\x26\x3d\xc2\xc9\xb7\xdd\x52\xbe\xe1\x13\x2c\xda\xe5\x45\x3f\xc7\x5e\x8b\x9e\xfa\xee\x8c\x8b\xea\xb1\x5c\x71\x29\x15\x54\xb7\xea\xde\xca\x95\x20\x84\x5d\xc0\xae\xf6\xa6\xb4\x59\xbf\xf2\xbd\xa3\xd4\xef\x62\x82\xd6\xc6\x47\x95\xea\xcb\xa4\x91\xba\x22\x88\xd5\xac\xfc\x60\x48\xf0\xee\xa9\xbb\xa9\x72\xb1\x38\xd3\x61\x09\xba\x58\x20\x7d\x9c\x13\xe3\xa5\xd7\xf2\x62\x48\x2e\x0f\x7c\xb4\xc8\x3e\x48\x94\x5c\x66\x5b\xef\x27\x94\xd9\x4e\x60\x39\x41\x0b\x49\xc9\x28\x56\xd4\xb0\xf1\x39\xdb\x02\x76\x39\x3b\x7a\x53\x2a\xdd\xe7\x17\x1a\x24\x0f\x27\x4a\x63\xb7\x3f\xde\xe5\xd0\x5a\x53\x5a\xc4\x03\xdd\xa5\xbe\x39\x9e\xe4\x2f\xeb\x76\x67\x31\xbc\x65\x80\xbb\x4c\x13\xb1\x95\xde\x50\x60\xbb\x7c\xdb\x81\xed\xb2\x14\xd8\x5a\x98\x7d\x64\x60\xfb\x35\x48\xd4\xb5\x41\x97\xc6\x9e\x3c\x3d\x9f\xd1\x68\x49\x57\xb1\x97\x4c\x50\x42\x19\xaf\x67\xdb\xfc\x03\xe7\xfb\xfc\x8a\x44\xf1\x91\xb9\xf3\x05\x36\x02\x27\x30\xac\x8a\xf3\xec\xec\xc2\x50\x53\x3e\x37\x4b\x32\xe6\x7c\x65\x1e\xb0\xd3\x1d\x96\x64\xf3\xa3\x8f\x60\xcc\x99\xc6\x1e\xb6\x6d\xe7\x4a\xd0\x99\x63\x52\xba\x39\x6c\x7c\x2e\x3d\x48\xd4\x69\xd2\x70\x17\xe7\x45\xc4\x17\x64\xde\x8e\xfc\xa7\x84\xbb\x0f\xdf\x49\x18\xc8\x73\x7a\x57\xd7\xce\x10\x52\x44\x41\x09\x69\x1c\xe4\xb2\x01\x44\x1c\xb5\x93\xed\xfa\x49\x41\xbe\xeb\x28\x13\x24\xf9\xe5\xf2\xac\x65\xd8\x53\x81\xe5\x0b\x7b\x7a\xf5\x06\xb3\x75\x16\x1a\xa9\xfb\xc6\x35\x2e\xc1\xc4\x7f\x03\x00\x00\xff\xff\xba\x5e\xc5\xae\x58\x42\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 16984, mode: os.FileMode(420), modTime: time.Unix(1724927743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
