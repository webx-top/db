// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x5b\x6f\xdb\x38\xd6\xcf\xd6\xaf\x60\x8d\xa2\xa0\x02\x57\x99\x87\x0f\xdf\x43\x06\x5e\xac\x93\x4e\x66\x83\x4c\xd3\x20\xe9\x74\x17\x08\x82\x80\x96\x8e\x1c\xad\x25\xd1\x4b\xd1\x76\x3c\x86\xfe\xfb\x82\xa4\x28\x51\x77\x39\x49\x8b\xcc\xee\x02\x83\x69\x4c\x1d\x9e\xfb\x95\xa2\x8e\x8f\xd1\x5f\x17\x10\x03\x23\x1c\x3c\xf4\x89\xa2\x98\x72\x04\x5e\xc0\x11\x7f\x0c\x12\xe4\x07\x21\x4c\xd0\xf6\x31\x70\x1f\x51\x90\x20\xb2\xe6\x34\x22\x3c\x70\x49\x18\xee\x50\xb1\x6f\xbe\x43\xfc\x11\xf4\x02\x65\x8e\x65\xad\x88\xbb\x24\x0b\x40\xfb\xbd\x73\xad\xfe\xbc\x22\x11\xa4\xa9\x65\x05\xd1\x8a\x32\x8e\xb0\x35\x1a\xfb\x11\x1f\x5b\xa3\xfd\x9e\x91\x78\x01\xe8\xfd\x72\x82\xde\x6f\xd0\xc9\x14\x39\x17\x12\x26\x49\x53\x6b\x34\xde\xef\xdf\x6f\xd2\x54\xc2\x41\xec\x09\x0c\xa3\xf1\x22\xe0\x8f\xeb\xb9\xe3\xd2\xe8\x78\x0b\xf3\xa7\x8f\x9c\xae\x8e\x5d\x1a\x8d\x5b\x1e\x79\xf3\xf6\x27\xc7\x61\x30\x3f\xf6\x89\xcb\x29\xdb\x0d\x83\x3a\x5e\x91\x45\x10\x13\x1e\xd0\xb8\x6d\x03\xb8\x8f\xb4\xeb\xd9\xf1\x8a\x30\x12\x8d\x2d\xdb\xb2\xf8\x6e\x05\xe8\x36\x0c\x5c\x78\xd8\xef\x9d\x5b\xce\xd6\x2e\x57\xaa\x42\x77\xf7\x47\x95\x25\xcb\xf2\xd7\xb1\x8b\x70\xd2\xbc\xc3\x46\x37\x42\x93\xd8\x8f\x91\x80\xc3\x11\xca\x58\x76\x3e\x53\x0f\x42\x1b\x01\x63\x94\x21\xfd\xef\xde\x1a\xf9\x94\xa1\x87\x09\x92\x5a\x57\x56\x48\xc4\xf2\x28\xf0\x05\x8c\x58\xf5\x63\xbc\xb1\x7f\x96\xbf\xde\x4d\x51\x1c\x84\xf2\xf9\x88\x01\x5f\xb3\x58\x2c\x5b\xa3\x51\x6a\x89\xff\xb2\xa5\x38\x08\xad\x81\x8c\xde\x90\xad\xc1\x6b\x55\xd8\xb7\xc4\xee\xaf\x8c\xae\x57\xa7\x3b\xbc\x84\xdd\x79\x00\xa1\x87\x12\xce\x82\x78\x61\xa3\x88\xac\xee\xd4\xdf\xf7\x75\x73\x09\xda\x92\xab\x4e\xa8\x7d\x9a\x0b\xc6\xe8\xb6\x2a\x9a\x17\x91\x95\x5c\xa3\x5b\x67\x96\x7c\x26\x2b\x6c\x5b\xa3\xd1\x66\x09\x3b\x29\x6e\xc4\x9d\xdb\x15\x0b\x62\x8e\x05\xe0\x9d\xe6\xef\xde\x56\x5a\x79\x98\x20\x09\xc7\xee\xc4\x8e\xfb\x9f\xd1\xbb\x5d\xa6\x10\xb5\x80\xa6\x0d\x5e\x26\x18\x12\x1a\x32\x80\xc8\x6a\x05\xb1\x87\xb3\x05\xc9\xa8\x6d\x6a\x91\x0d\xd0\xe1\x25\xec\x7a\x34\x38\x44\x7f\x3f\x4c\x7b\x85\xf0\x8c\x6e\x0f\x95\x75\x96\x5c\x7e\xab\x8a\x3a\x41\x1b\x12\xae\xa1\x2c\xbd\x4c\x04\xce\x2d\xa7\x0c\x72\x69\x8d\xb5\x1f\x20\x9d\x7c\x56\x70\x76\x7f\xa8\xa8\x5f\x19\x89\x13\x9f\xb2\x08\x73\xf9\x17\xb0\xc4\xb4\x97\x12\xe6\x6b\xf6\xc8\x46\x77\xf7\x4d\x22\x47\x64\x09\xb8\xf4\x68\x12\x42\x8c\x13\xdb\x56\xf2\x07\xde\x53\xa3\x06\xd8\x5d\xe0\x3d\x65\x36\xd2\x2a\x70\x1a\x38\xaa\x3b\x6b\x9f\x58\xe7\x8c\x46\xbf\x05\x09\xc7\x1e\xe1\x04\x05\x31\x07\xe6\x13\x17\xf6\xa9\xdd\x92\xad\xf7\xd6\x48\x6a\x31\x99\x20\xba\x14\x7c\x8a\x8d\x0e\xae\x87\x97\x6d\x89\xc8\x7c\x47\x97\x52\x02\x9d\xd2\xc4\xd6\x42\x3a\xbd\xb7\x44\x57\x05\xae\x52\xc2\x87\xa6\x98\x15\x0f\x1d\xc1\xf8\x0d\xdd\x62\x89\xd1\xc1\x86\x29\x4c\x64\xc2\x07\x46\x49\x11\xd9\x89\x8e\x69\x15\xf8\x4a\x51\x89\xd4\x5a\x19\x4a\xc9\xe8\x38\x8e\x6d\x8d\xac\x02\x50\xfb\xc9\x15\x6c\x2b\x9c\x61\x97\x3f\x21\x51\xf4\x9c\x33\x1a\x73\x78\xe2\x76\x2d\xd3\x0b\xc9\xa2\x36\xa9\x22\xe7\x16\x78\xb6\x55\xe0\xb2\x73\xaa\x11\x12\x64\x8f\x8f\x51\x0d\x9d\xfe\x7d\x46\xa3\x08\x62\x9e\xa6\xaa\xcc\x56\xe1\x12\xf9\x43\x50\x9f\x93\x04\x10\x42\x79\xbd\x3c\x25\x09\x58\x23\x3a\xff\x27\xb8\x3c\x69\x2a\xc4\x4d\x5d\x8b\x02\x98\x71\xce\x82\xf9\x9a\x43\xa2\xc0\xde\x6f\xd0\x47\xf5\x97\x6a\x5f\x14\xcb\x1f\x91\x24\x29\x74\x26\x1a\x09\xed\x8e\xa4\xa1\x0a\x4a\x77\xc6\x36\x3a\xd2\xcc\xc9\x05\x22\xf7\xc9\x00\x52\xda\x20\x8e\xc0\xe8\x64\xd0\x45\xe0\x36\xa1\xfc\x3d\x01\x15\x1b\x8d\x48\xed\x72\xdb\x20\x68\x64\xc8\xf3\x7d\x85\x11\x48\x37\xa5\xb2\xed\x2a\x7e\xd0\x46\xa6\xcd\xe0\x3d\xb4\x7e\xd9\x40\xcc\xbf\x5c\x61\x1a\x23\xc7\x71\xe6\x94\x86\xed\x24\x0a\x58\xe5\xca\x87\x50\x38\x3f\xc7\xd4\xf7\x87\xd2\x50\xd0\x87\x50\xd1\xb2\xdb\x25\x75\xd5\x4d\x9d\xc3\x0d\x31\x41\x7c\xf1\x09\xbb\xf2\x1f\x91\xcc\xfa\x74\x5f\x40\x1f\x62\x69\xf1\x27\xc3\xb1\xf8\x3f\x52\x80\x95\xfe\x53\x57\xbd\x0e\xe2\x06\x8e\xc1\xa4\xd5\x1e\x5b\x35\x92\x8d\x24\xeb\xca\xcb\xf6\xf4\xca\x74\x2d\x4a\x12\x96\x85\xa9\x08\x16\xb9\xd8\x29\x86\xb1\x6d\xb0\x18\x6a\x4f\xb4\x55\x72\x78\x73\xe7\x06\x92\x75\xc8\x6d\x94\xff\x39\x41\x84\x2d\x12\xe1\x79\xa5\xc2\x50\xe6\x4b\x30\x12\xf8\x5a\x4e\x85\xd4\x46\xd3\xa2\x1b\xce\x15\x71\x05\xdb\xec\xb1\x60\xf9\x73\xe0\x79\x21\x6c\x09\x03\x1c\x6d\xe5\xca\x8c\x2d\x12\x2c\x28\x2a\xef\x4d\xab\x3a\x3c\x60\xb3\xce\x7a\xee\x9a\x31\x88\xf9\xa0\xc4\x77\x05\x5b\x9c\xe4\x2b\x79\x17\x95\x79\xb1\x52\x42\x83\x11\x02\x1f\x89\xde\x21\x73\x5f\xf4\x17\xf4\x93\x29\xb5\x06\xbf\x82\xad\xdc\x61\x50\x98\xa8\x2d\x77\x3f\xdd\xdb\x32\xd3\x95\x33\x6a\x49\x01\x5d\x58\x8a\xe8\x14\x51\x64\x37\xe3\xea\x74\x84\x2f\xaa\xee\x60\xbb\xa1\xf2\xe4\xd6\xd5\xc5\xa9\x6e\x58\x31\xd2\x94\x8c\x95\x81\xde\x9d\xdc\x77\xd3\xfd\x47\x41\xb8\xb5\xc7\xc9\x90\x36\x3e\xc7\xc4\xc9\x31\xf4\x88\x78\x05\xdb\x82\x98\xd6\xa6\x1c\x0a\x99\x41\xe5\x43\x23\x99\x7d\xda\x8d\xfb\x22\x0e\x78\x81\xfc\xa8\x59\x87\x86\x02\x5b\x46\x20\xcd\x43\x0e\xd9\x2b\x91\x8e\xb5\x7a\x3c\xd6\xdd\x46\xc1\xea\x85\x4f\xe0\x93\x75\xc8\xcf\xd5\x4f\x19\x3f\x17\xb1\x07\x4f\xb8\xe6\x4c\xb7\xc0\x95\x13\x55\x3c\x4a\x25\xee\x30\x04\x19\x56\x98\xc8\x04\xf7\x90\x3d\x50\x3e\x4a\xfa\xb2\xdd\x23\x65\xfc\x01\x37\xe4\xcc\xf1\x7e\xef\x7c\x25\xf3\x30\x3b\xc4\x19\xf7\xe0\x91\xbf\x5a\x11\x99\xc0\x3d\x98\x32\x19\x0c\x3c\x45\x62\xd3\x49\xff\x5d\xcd\xff\xff\x1e\xf0\xc7\x6b\x06\x7e\x90\xab\x2f\x83\xc5\xa4\x1c\xc5\x06\x60\xde\x06\x69\x29\xd9\xaf\xc0\x31\x71\xb4\x4e\xd4\xde\xee\xb2\x7d\x3d\x13\xbd\x37\x4e\xe8\x9a\xb9\x50\x3d\x7a\x69\xa8\x15\x46\x9b\xa3\xf6\x14\x15\xdd\x16\xcf\x45\xde\xc8\x1e\x14\x39\x88\x14\x45\x32\x7b\x96\x09\x37\xb8\xcc\x08\xc1\x9e\x51\x64\x30\x30\xa6\x4e\x62\xec\xbc\x63\x3e\x99\x66\xd6\x50\x23\x8d\xd9\xf7\x08\x3d\x62\x35\xb3\x88\x8d\x02\x50\xd7\x37\x45\x40\x94\x05\x21\xcb\x0d\xb8\x1b\x4c\x6c\xe7\x4b\x0c\x72\x7c\x55\x48\xd0\x14\x29\xbc\x99\x50\xd2\x6c\xff\x5a\x03\xdb\xa9\x98\x3a\xe9\x45\x68\xe9\x53\xa1\x29\xfa\x74\x7a\xe1\x9c\x07\x0c\x6e\x80\x78\x41\xbc\xc0\x64\x82\x0a\x54\xf5\xd3\x22\x83\xa2\xda\x5f\x00\x6b\x2e\x2b\x4c\x6a\x4a\x05\x8e\x3a\x61\xf0\x2a\x74\x0d\x4f\xec\x36\x98\x1c\x43\x19\xb8\x1b\x73\x0c\x9d\xa0\x6e\x1b\xae\xc8\x02\x26\x28\x09\xfe\x00\xb1\xab\xcd\xa6\x12\x81\x2d\x20\xfe\xff\xff\x26\x86\x75\x03\x1f\x49\x82\xa5\xe2\x22\x7e\x23\xe2\x94\xd2\xab\x14\xa2\xc3\xf6\x79\x0d\x6a\xb6\xd5\x35\x59\x00\x16\xac\xca\x5f\xb7\xc1\x1f\x80\x05\xcb\x85\x1d\x05\x55\xdb\x91\x1a\xb0\x0f\xf0\x81\x61\x78\x2d\xe3\xe0\xf0\x59\x3e\x22\x7e\x4e\xd4\xa9\x62\x6a\x8d\x5c\xa1\xe7\x0c\x9d\xe1\x32\x9a\xf9\xba\x93\x24\xdb\x80\xbb\x8f\xd9\x71\x26\xb8\x1b\x07\x8b\x31\x55\x29\xce\x15\xfe\xd5\x50\xbb\x4e\xc4\xe0\xde\xef\x5d\x93\x96\x0a\x7d\xb4\x91\xa3\xbf\xc4\xfe\xea\xc8\x0d\xdc\xe5\x92\x3e\x18\xef\xc6\xae\x9e\xcf\x6a\xa5\xf6\xe4\xb4\xe6\xf3\xd9\x09\x0a\xe2\xd5\x9a\xdf\xd0\xad\xf4\xfd\x86\xb3\x98\xfe\x03\xdc\x0d\x61\x88\x09\x04\x8d\x32\xe7\xed\x66\x4e\xc8\xe8\x38\xc5\xae\x69\x8b\xae\x72\x78\xd1\x6e\x5a\xa3\x14\x41\x98\x40\xff\xb6\x52\x87\x65\x9e\x69\xd1\x6d\xe2\x54\xb5\xd0\x53\xb0\x1a\x0f\x64\x0f\x53\xd9\x9f\x5c\x61\x65\x0d\xf4\xa8\x6b\xe0\x99\xee\x00\x05\x56\x4e\x40\xff\x44\x0a\x2b\xe9\xc0\x14\xbe\x47\x77\x22\x07\x9e\xee\xbe\xf8\x7e\x02\x87\x97\x32\x2a\xb7\xbd\xfd\x62\x96\x89\xa7\xd8\x7d\xe5\x82\x36\x1c\xf7\xff\x8a\xda\x7f\x4a\x51\xbb\x88\x13\x60\x1c\xdb\x08\xaf\x96\xe5\x78\x29\xb7\xe2\xfb\xbd\x73\x0a\x3e\x65\xa0\x36\x64\x29\xa3\xb3\x19\xd7\x0c\xe3\xb1\xcb\x80\xf0\x20\x5e\x8c\x27\x88\x4c\x84\x11\xed\xe2\x7d\x6a\xfd\x0d\x6a\x2e\xc8\x6a\x39\x41\xe5\xbe\x5e\x6c\x95\x7e\x09\xb1\x27\xfa\x79\xcd\xbd\xe4\x6f\xe6\x73\x60\x25\xf6\x0c\xaf\xf9\xf0\xe1\x20\x66\xc1\x33\x79\x1d\xd8\x43\xff\xbe\xf2\x08\x87\x57\x98\x7b\x72\x65\x2b\x8c\xe9\x8b\x32\x86\xd6\x55\xc6\x5d\x9e\x80\xaa\x72\xaf\xc5\xf3\xdc\x48\x26\x96\xae\xe1\x25\x47\x34\x94\x7c\x17\xb2\x4c\x92\x0a\x4f\xda\x16\x26\xe6\x21\x86\x78\x7a\x96\x25\x88\xef\x83\xcb\xc1\x33\x52\xfc\x8f\xb1\xcc\xd3\x77\x30\x8d\x16\xa6\x1a\x47\xbd\x9c\xf4\xcf\xab\x43\x8c\x74\x40\xd4\x9c\xaa\x72\x9f\xf4\xd8\xcc\x97\x40\xe8\xee\x5e\xf7\x41\x3f\x36\x9c\x34\xaf\x4a\x02\x91\x83\x15\x43\xf9\xd9\x35\x78\x01\x3f\xa3\xe1\x3a\x8a\x13\xe3\x95\xb3\x66\x56\x74\x58\x6a\x43\xfe\xce\x39\xf6\xe0\x29\xc3\x52\xbc\x99\xcd\xa4\x94\xd9\xa9\x40\x78\x27\x81\xef\xd1\x14\xb9\x34\x72\x6e\x63\xb2\x84\x33\x92\x80\xc2\xd8\xe2\x3b\x59\xd4\x55\x3c\xc8\x40\xfa\x5a\x91\xde\xa5\x99\xe1\xce\x54\x62\x57\xbb\x54\x2b\xb7\x87\xf8\xd7\xd3\xeb\x3a\xd8\x8f\xca\x12\x39\xf3\xff\xa5\x1e\x37\x28\x81\x75\x2a\xe9\x2d\x38\x9f\xf4\xbc\x21\x8e\x57\x9e\xf8\xca\xfd\xd8\x90\x4c\x97\xbb\x92\x41\x37\x91\xca\x6a\xbe\xa2\x21\x2f\x87\x08\xa0\x13\x45\x71\x62\x8d\xd2\xc3\x8a\xec\xa0\xa0\x5a\x6e\x12\xe0\x2d\x2c\x0c\x4e\xe1\xb7\xc0\x15\x49\x6f\xc6\x5f\xa1\xee\x4a\x9e\x2a\x5d\x91\x9c\x8e\x8e\x88\x35\x8a\xf2\x1b\x2e\x0a\x4c\xcd\xcf\x66\xa8\xe9\x10\x53\x41\xe5\xca\xd5\x22\x9c\x94\xc0\x95\x68\x2a\xae\xb8\x94\x9c\x4a\xed\x1d\x1e\x4d\x1f\xa2\xef\x92\xc0\x5b\xf4\x72\x40\xbb\x56\x8f\x9f\x4e\x56\x87\x78\xd7\x37\x79\x11\xa8\xcf\xbb\x60\x97\x28\x40\x74\xe4\xcd\x9d\xcb\xfc\xe7\x30\xd7\x7a\xa9\x1f\xe5\xe4\x06\x38\x53\x0e\xeb\xc8\x5b\x64\x4d\xef\x0f\x5a\x2c\x6e\x6c\x15\x02\x62\xfb\xd5\xed\xde\x20\xc7\x8b\x8d\xdf\xc3\x75\x9f\x0b\xc8\xe1\xee\x39\x4d\x7c\xf7\x2c\x5b\x9f\x2b\xdb\xfb\x61\xc9\x42\x76\xe8\x93\x5d\x11\x46\x0d\xe5\xbd\xcb\x8b\x4a\xaf\xcc\xcd\xab\x6f\x43\x1a\x7c\x99\x90\xdb\xe8\x17\xc3\xee\x0b\xe9\x37\x0d\xe8\xe9\x8b\xa6\xea\xc0\x47\xab\xa5\x79\x64\x73\xc8\xd8\x60\x9e\x23\x0e\x99\xcf\xe5\x79\x01\xca\x7d\xb2\xdb\xad\x3e\x41\x08\xcf\x9b\xd2\x5b\xe7\x0a\x85\xf2\x05\x45\x29\xe3\xa9\x75\x00\xf4\xc4\xf3\x57\x9e\xcd\x35\xcd\x83\x06\x72\xc9\xc8\xe1\x03\xb9\xa2\xf5\x5d\x07\xf2\x57\xb2\x41\xc7\x14\xfe\x6c\x23\x0c\x6a\x62\x73\xf2\x87\x8c\xde\xed\xe6\x18\xd4\x9d\x9e\xd1\x75\xfc\xbc\x04\x5b\x3b\xff\xee\xd2\xac\x22\xd3\xe3\x22\xbf\x3c\x05\x09\xef\x2b\xf5\xcd\xcc\xcc\x29\x0d\x87\xf2\x92\x91\xe9\x61\xe6\x06\x12\xe0\xb8\xf9\x12\xf1\x7e\xff\x11\xd5\xae\xe5\xca\x0d\xf2\x32\x2e\x71\xf6\xfb\xf7\x1b\xe7\x32\x4d\xd1\x14\xc9\x3f\xbf\x95\xef\xe6\x0e\xbc\x41\xa1\x2e\x9a\xd3\x38\xcc\xe6\x56\x21\xf6\x01\x17\xfa\xb3\xf7\x39\xc5\x7e\x79\x3b\x4f\xbd\xd1\x69\x94\x40\x5e\x4a\x99\xc5\x9e\xe2\x42\xed\x49\xd5\x07\x1a\x63\x25\x46\x9a\x8e\xe5\x67\x1a\x8e\x29\x55\x21\x56\x71\xf3\x7d\x54\x7c\x50\x50\x19\x33\x0d\x71\x8c\x63\x7c\x05\x24\x93\xfd\x61\xac\xa9\x13\xf3\x82\xbd\x13\xd4\xc3\xac\xc1\x6d\xda\xf2\x0d\x42\x93\x2d\x74\xff\xc6\xe8\xb6\x65\x8a\xb1\xf5\x97\x43\x4b\xd8\xd5\x2e\xda\x8b\x6d\x86\xb8\x4b\xd8\xbd\x54\xd8\x4b\x29\xac\x16\xae\x70\xb5\xbf\x39\x2e\x8d\x37\xc0\xf8\x2d\x27\xa2\x5e\x2b\xa7\x98\x25\xd9\x43\x8f\x70\xf2\x75\xb7\x92\x6f\x1c\x04\x8b\x76\x79\xd3\x2f\xb1\xd7\xa2\xa7\xbe\x0b\xac\xa2\x7b\x2c\x77\x5c\x4a\x05\xd5\x50\xdd\x5b\xb9\x12\x84\xb0\x4b\xd8\xd5\xde\xdc\x34\xeb\x57\xbe\x07\x91\xfa\x5d\x4e\xd0\xc6\xf8\x36\x4b\x7d\xe0\x30\x52\x57\x96\xb0\x7a\x2a\xbf\x3b\x10\xbc\x7b\xea\xc6\x9b\xdc\x2c\x06\x38\x2c\x41\x97\x4b\xa4\x67\x37\xb1\x5e\x7a\x4d\x28\x96\xe4\xf6\xc0\x47\xcb\xec\xbb\x26\xc9\x65\x16\x7a\x3f\xa3\xcc\x76\x02\xcb\x14\x2d\x25\x25\xa3\x59\x51\xcb\xc6\x57\x31\x4b\xd8\xe5\xec\xe8\xa0\x54\xba\xcf\x5f\xb0\x4a\x1e\xa6\x4a\x63\x77\x3f\xdd\xe7\xd0\x5a\x53\x5a\xc4\x03\xdd\xa5\x1e\x1c\x2f\xf2\x97\x4d\xbb\xb3\x18\xde\x32\xc0\x5d\x66\x89\x08\xa5\x37\x94\xd8\x2e\xdf\x76\x62\xbb\x2c\x25\xb6\x16\x66\x9f\x99\xd8\x7e\x0b\x12\x75\x8d\xc9\xa5\xb1\x27\xa7\xe7\x33\x1a\xad\xe8\x3a\xf6\x92\x09\x4a\x28\xe3\xf5\x6a\x9b\x7f\x27\xf9\x90\xbf\xb2\x2d\xbe\x55\x75\xae\x60\x2b\x70\x02\xc3\xaa\x39\xcf\x66\x17\x86\x9a\xea\xb9\xd9\x92\x31\xe7\x0b\xf3\x80\x9d\xee\xb0\x24\x9b\x8f\x3e\x82\x31\x67\x16\x7b\xd8\xb6\x9d\x6b\x41\x67\x81\x49\xe9\x0a\xa3\xf1\xd5\xe5\x20\x51\x67\x49\xc3\xdd\x80\xef\x22\xbe\x20\xf3\x76\xe4\x3f\x25\xdc\x7d\xfc\x46\xc2\x40\xce\xe9\x5d\x27\x72\x86\x90\x22\x0b\x4a\x48\x63\x90\xcb\x16\x10\x71\x54\x24\xdb\xf5\x49\x41\x9e\xbd\x96\x09\x16\xb7\x5c\xb3\xe3\xc0\x9e\x0e\x2c\xdf\xd8\x73\x2e\x6a\x30\x5b\x67\xa1\x91\xba\x6f\x5c\x2b\x11\x4c\xfc\x3b\x00\x00\xff\xff\xfc\x21\xad\x04\x9f\x3e\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 16031, mode: os.FileMode(420), modTime: time.Unix(1659369443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
