// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1c\x6b\x6f\xdc\x36\xf2\xf3\xea\x57\xb0\x46\x10\x50\xc1\x46\xce\x87\xc3\x7d\x48\xe0\xc3\x6d\x92\xa6\x0d\xdc\x26\x81\x9d\xe6\x0e\x30\x0c\x83\x2b\x8d\x6c\xdd\x4a\xe2\x96\xe4\xbe\xba\xd8\xff\x7e\xe0\x4b\xa2\x5e\x2b\xc9\x76\x82\xf4\x7a\x40\xd1\xac\xc8\xe1\xbc\x39\x43\x0e\x49\x9f\x9e\xa2\x7f\xde\x42\x0e\x8c\x08\x88\xd0\x5b\x8a\x72\x2a\x10\x44\x89\x40\xe2\x2e\xe1\x28\x4e\x52\x98\xa2\xcd\x5d\x12\xde\xa1\x84\x23\xb2\x12\x34\x23\x22\x09\x49\x9a\xee\x50\x39\x6e\xbe\x43\xe2\x0e\x6c\x03\x65\x81\xe7\x2d\x49\xb8\x20\xb7\x80\xf6\xfb\xe0\x93\xfe\xf9\x81\x64\x70\x38\x78\x5e\x92\x2d\x29\x13\x08\x7b\x93\x93\x38\x13\x27\xde\x64\xbf\x67\x24\xbf\x05\xf4\x64\x31\x45\x4f\xd6\xe8\xe5\x19\x0a\xde\x2b\x18\x7e\x38\x78\x93\x93\xfd\xfe\xc9\xfa\x70\x50\x70\x90\x47\x12\xc3\xe4\xe4\x36\x11\x77\xab\x79\x10\xd2\xec\x74\x03\xf3\xed\x73\x41\x97\xa7\x21\xcd\x4e\x3a\xba\xa2\x79\x77\xcf\x69\x9a\xcc\x4f\x63\x12\x0a\xca\x76\xc3\xa0\x4e\x97\xe4\x36\xc9\x89\x48\x68\xde\x33\x80\xff\x9e\xce\x57\x49\x1a\x01\xeb\x02\x84\xf0\x8e\x1e\xeb\x3b\x5d\x12\x46\xb2\x13\xcf\xf7\x3c\xb1\x5b\x02\xba\x4c\x93\x10\x6e\xf6\xfb\xe0\x52\xb0\x55\x28\xb4\x4e\xd1\xd5\xf5\xb3\x5a\x93\xe7\xc5\xab\x3c\x44\x98\xb7\x8f\xf0\xd1\x85\x54\x39\x8e\x73\x24\xe1\x70\x86\x8c\x6c\xc1\xaf\x34\x82\xd4\x47\xc0\x18\x65\xc8\xfe\xbb\xf7\x26\x31\x65\xe8\x66\x8a\x94\x79\xb4\xb9\xb8\x6c\x9e\x24\xb1\x84\x91\xad\x71\x8e\xd7\xfe\x2b\xf5\xf5\xc3\x19\xca\x93\x54\xf5\x4f\x18\x88\x15\xcb\x65\xb3\x37\x99\x1c\x3c\xf9\x9f\x69\xca\x93\xd4\x1b\xc8\xe8\x05\xd9\x38\xbc\xd6\x85\xfd\x9e\xd8\xfd\x89\xd1\xd5\xf2\xf5\x0e\x2f\x60\xf7\x2e\x81\x34\x42\x5c\xb0\x24\xbf\xf5\x51\x46\x96\x57\xfa\xf7\x75\xd3\x5c\x92\xb6\xe2\xea\x28\xd4\xfe\x50\x08\xc6\xe8\xa6\x2e\x5a\x94\x91\xa5\x6a\xa3\x9b\x60\xc6\x7f\x25\x4b\xec\x7b\x93\xc9\x7a\x01\x3b\x25\x6e\x26\x82\xcb\x25\x4b\x72\x81\x25\xe0\x95\xe5\xef\xda\xd7\x5a\xb9\x99\x22\x05\xc7\xae\xe4\x88\xeb\x57\xe8\x87\x9d\x51\x88\x6e\x40\x67\x2d\x5e\x26\x19\x92\x1a\x72\x80\xc8\x72\x09\x79\x84\x4d\x83\x62\xd4\x77\xb5\xc8\x06\xe8\xf0\x1c\x76\x3d\x1a\x1c\xa2\xbf\x6f\xa6\xbd\x52\x78\x46\x37\x63\x65\x9d\xf1\xf3\x2f\x75\x51\xa7\x68\x4d\xd2\x15\x54\xa5\x57\x81\x20\xb8\x14\x94\x41\x21\xad\xd3\xf6\x0d\xa4\x53\x7d\x25\x67\xd7\x63\x45\xfd\xcc\x48\xce\x63\xca\x32\x2c\xd4\x2f\x60\xdc\xb5\x97\x16\xe6\xb3\xe9\xf2\xd1\xd5\x75\x9b\xc8\x19\x59\x00\xae\x74\x4d\x53\xc8\x31\xf7\x7d\x2d\x7f\x12\x6d\x5b\x35\xc0\xae\x92\x68\x6b\x6c\x64\x55\x10\xb4\x70\xd4\x74\xd6\x3e\xb1\xde\x31\x9a\xfd\x92\x70\x81\x23\x22\x08\x4a\x72\x01\x2c\x26\x21\xec\x0f\x7e\x47\xb4\xde\x7b\x13\xa5\x45\x3e\x45\x74\x21\xf9\x94\x03\x03\xdc\x9c\x5e\xbe\x27\x67\xe6\x0f\x74\xa1\x24\xb0\x21\x4d\x0e\x2d\xa5\xb3\x63\x2b\x74\xf5\xc4\xd5\x4a\x78\xda\x36\x67\x65\x67\x20\x19\xbf\xa0\x1b\xac\x30\x06\xd8\x31\x85\x8b\x4c\xfa\xc0\x84\x97\x33\x9b\xdb\x39\xad\x27\xbe\x56\x14\x57\x5a\xab\x42\x69\x19\x83\x20\xf0\xbd\x89\x57\x02\x5a\x3f\xf9\x00\x9b\x1a\x67\x38\x14\x5b\x24\x93\x5e\xf0\x86\xe6\x02\xb6\xc2\x6f\x44\x7a\x29\x59\xd6\x25\x55\x16\x5c\x82\x30\x43\x25\x2e\xbf\xa0\x9a\x21\x49\xf6\xf4\x14\x35\xd0\xd9\xef\x37\x34\xcb\x20\x17\x87\x83\x4e\xb3\x75\x38\xae\x3e\x24\xf5\x39\xe1\x80\x10\x2a\xf2\xe5\x6b\xc2\xc1\x9b\xd0\xf9\x7f\x20\x14\xbc\x2d\x11\xb7\x2d\x6f\x34\xc0\x4c\x08\x96\xcc\x57\x02\xb8\x06\x7b\xb2\x46\xcf\xf5\x2f\xbd\xce\xd1\x2c\x3f\x47\x8a\xa4\xd4\x99\x5c\x71\x58\x77\x24\x2d\x59\x50\xb9\x33\xf6\x0b\xde\xd4\x37\x51\xc3\x40\x65\x45\xa3\x0e\x12\x48\x94\x81\x01\x2f\x67\x6e\x1b\xce\xdf\x38\xe8\xc9\xd1\x8e\xd5\xaf\x2e\x1c\x24\x11\x83\xbd\x18\x58\x9a\x81\x1c\x27\x55\xb5\x5e\xcd\x13\xba\xc8\x74\x99\xbc\x87\xd6\x8f\x6b\xc8\xc5\xc7\x0f\x98\xe6\x28\x08\x82\x39\xa5\x69\x37\x89\x12\x56\x3b\xf3\x18\x0a\xef\xde\x61\x1a\xc7\x43\x69\x68\xe8\x31\x54\xac\xec\x7e\x45\x5d\x4d\x5b\x17\x70\x43\x4c\x90\xbf\x7f\x8b\x43\xf5\x8f\x0c\x67\x7d\xba\x2f\xa1\xc7\x70\x2d\x47\xf9\x12\x7d\x2b\xaf\xaa\xb7\x97\x55\xf9\x93\xe1\x5c\xfe\x1f\x69\xc0\xda\x2a\xd6\xe6\xce\x23\x02\x38\x38\x06\xb3\xaf\xc7\xf8\x7a\x39\xda\x4a\xb2\x29\x94\x19\xd3\x2b\xd3\x27\x99\xd8\xb0\x4a\x6f\xe8\x99\xc5\xad\x1a\x8f\x8a\xe1\x0c\x1b\x2c\x86\x1e\x93\x6d\xdc\x9c\x35\x45\x84\xdd\x72\xe9\xaf\x95\x84\x52\xe5\x44\x92\x4e\x62\x2b\x99\x46\xe3\xa3\xb3\x72\x15\x5d\x88\xfe\x01\x36\xa6\x5b\x32\xf9\x6b\x12\x45\x29\x6c\x08\x03\x9c\x6d\x54\xcb\x8c\xdd\x72\x2c\x29\x6a\x9f\x3f\xd4\xb5\x36\x62\xf0\x71\x8b\xc1\x06\xf3\xa2\xa5\x58\x66\x19\x27\xd7\xd2\xb6\xe8\xb7\x66\xc2\x0a\x12\x3b\xba\x9f\xb8\x4c\x11\x37\x4e\x58\x96\xdf\x6e\x38\x7e\xaa\xf1\x17\xf1\x3e\x5c\x31\x06\xb9\x18\x14\xf2\x3f\xea\xc4\x83\xfd\x96\xd4\x53\x98\xc9\x66\xa7\xa6\x85\xe4\x9e\xa6\xa2\x75\x03\x7a\xf5\xf2\xfa\xb8\x4c\xff\x2e\x09\x77\x2e\x72\x0c\xd2\xd6\x7e\x4c\x82\x02\x43\xbf\xed\x4a\x62\x56\x87\x6a\x57\x58\x51\x62\x2b\x99\xfd\xe1\x38\xee\xf7\x79\x22\x4a\xe4\xcf\xda\x75\xe8\x28\xb0\x63\x0f\x54\x1a\xd2\x40\xf6\x4a\x64\x27\x4d\x73\x62\x19\x5c\xb6\xbd\x80\xb5\x0d\x6f\x21\x26\xab\x54\xbc\xd3\x9f\x6a\x22\xbc\xcf\x23\xd8\xe2\x5a\xf4\x54\x3d\x3a\xc5\x57\xf3\xbd\xaf\xe3\x76\x9a\x82\xf2\x2e\x4c\x54\x6c\xba\x31\x1d\xca\xf7\x31\xe9\x0b\x54\x77\x94\x09\xe9\xd3\x8d\x70\x77\xb2\xdf\x07\x9f\xc9\x3c\x35\xe5\x9e\x93\x1e\x3c\xea\xab\x13\x91\x0b\xdc\x83\xc9\xc8\xe0\xe0\x99\xcb\xa5\x16\x51\x53\x60\xee\xba\xfe\x1c\xb5\x2f\x1f\x0f\x1a\xb4\x12\xae\xdd\xd2\x80\xe1\xeb\x5f\x89\xb8\xfb\xc4\x20\x4e\xb6\xb8\x0a\x8b\xe7\x7e\x25\x84\x39\x80\xc5\xd2\xc9\x2a\x86\xfd\x04\x02\xcf\x03\xab\x46\x3d\xf6\x78\xca\xfc\x34\x93\xeb\x75\xcc\xe9\x8a\x85\x50\x2f\xd7\xb4\x64\x06\x67\x61\xa4\xc7\x94\x6b\x00\xbf\xec\x97\xae\x52\x76\x6b\xc7\x31\xbd\x5a\x2c\xd3\x69\x64\x1c\x9c\x5b\xa4\x7c\xd9\x46\x67\xc8\x68\x1e\x5c\x00\x5f\xa5\xc2\x47\xc5\xcf\x8e\x3c\x83\x81\x31\x5d\xc4\xf1\x8b\xc5\xb6\xb4\xa2\x0e\x90\x6a\x37\xe4\x2e\x98\xa4\x3a\xb1\xde\xee\xc8\x81\x12\xd0\x26\x35\x4d\x40\x06\x67\x29\xcb\x05\x84\x6b\x4c\xfc\xe0\x63\x0e\x6a\xe7\xab\x91\xa0\x33\xa4\xf1\x1a\xa1\x94\xf5\x7e\x5f\x01\xdb\xe9\xd9\xf8\xb2\x17\xa1\x67\x0b\x4a\x67\xe8\xed\xeb\xf7\xc1\xbb\x84\xc1\x05\x90\x28\xc9\x6f\x31\x99\xa2\x12\x55\xb3\xd0\xe4\x50\xd4\xe3\x4b\x60\xcb\x65\x8d\x49\x4b\xa9\xc4\xd1\x24\x0c\x51\x8d\xae\xe3\x90\xc7\x0d\xa6\x76\xb0\x0c\xc2\x75\x75\x35\x70\xdc\x86\x4b\x72\x0b\x53\xc4\x93\x3f\x40\x8e\xea\xb2\xa9\x42\xa0\xd6\x7a\x7f\xff\xdb\xd4\xb1\x6e\x12\x23\x45\xb0\x92\x96\xe4\x37\x22\x41\x25\x30\xdb\xb9\xd9\x65\xfb\x22\x7b\xb5\xdb\xea\x13\xb9\x05\x2c\x59\x55\x5f\x97\xc9\x1f\x80\x25\xcb\xa5\x1d\x25\x55\x3f\x50\x1a\xf0\x47\xf8\xc0\x30\xbc\x9e\x53\x73\xbc\x97\x8f\xc8\xcf\xa9\x2e\x48\x1e\xbc\x49\x28\xf5\x6c\xd0\x39\x2e\x63\x99\x6f\x3a\x09\xdf\x24\x22\xbc\x33\x95\x50\x08\xd7\x01\x96\x3b\x5c\xad\xb8\x50\xfa\x57\x4b\xd6\x7b\x29\xf7\xfc\xfd\xde\x35\xed\xc8\xed\xcf\xd6\xaa\x6a\xa0\xb0\x3f\x3a\x72\x07\x77\x75\x31\x30\x18\xef\xda\xaf\x97\x76\xad\x52\x7b\x62\x5a\x7b\x69\x77\x8a\x92\x7c\xb9\x12\x17\x74\xa3\x7c\xbf\xa5\x8c\xd3\x5f\xfb\x5d\x13\x86\x98\x44\xd0\x2a\xb3\x32\x6b\x0a\x39\x2e\x08\xf9\xe8\x1f\xe8\x85\xf6\x11\x39\xea\xac\x43\x57\x05\xfc\xd5\x8b\x6b\xe9\xd9\x08\x52\x0e\xfd\xc3\x2a\x6b\x33\xb7\x1c\x46\x37\x3c\xa8\x6b\xa1\x27\x6f\xb5\xd6\x72\xc7\xa9\xec\x4f\xae\xb0\xaa\x06\x7a\xd4\x35\xb0\x1c\x3c\x40\x81\xb5\xe2\xe9\x9f\x48\x61\x15\x1d\xb8\xc2\xf7\xe8\x4e\xc6\xc0\xd7\xbb\x8f\x71\xcc\x61\x7c\x2a\xa3\x6a\xd8\xf7\x9f\xcc\x8c\x78\x9a\xdd\x47\x4e\x68\xc3\x71\xff\x3f\xa9\xfd\xaf\x24\xb5\xf7\x39\x07\xa6\xd6\xea\x41\x10\x28\xe7\x2e\x0f\xad\x03\xdd\x09\xcc\x47\xad\x8d\x78\xb9\xa8\x4e\xb1\xea\xea\x7d\xbf\x0f\x5e\x43\x4c\x19\xe8\x11\x26\xca\x1c\x5d\xbf\x5b\x19\xf1\x49\xc8\x80\x88\x24\xbf\x3d\x99\x22\x32\x95\x76\xf7\xcb\xd3\xdb\xe6\x79\x6d\x21\xbb\x0c\x73\x37\x76\xa6\x0f\x95\xa4\x88\x7e\xd9\xa6\x0c\x7b\x12\xcb\x19\xca\x36\x57\x2f\xf4\x41\xd7\x72\x31\x45\xd5\x4d\xc6\x8d\xa9\x43\x5d\x42\x1e\xc9\xcd\x85\x51\xa5\xaf\x24\x9f\xc5\x02\x58\x45\x70\xc7\x85\x9f\x3e\x1d\xa5\x06\x88\x5c\x2d\x0c\x5c\xd0\xff\xb6\x8c\x88\x80\x47\xd8\x84\x15\x66\xd4\x18\x0f\x0f\x0a\x5f\x56\x57\x86\xbb\x22\x1a\xd6\xe5\x5e\xc9\xfe\xc2\xfc\x2e\x96\x63\x3b\xa9\x02\xd1\x50\xf2\xc7\x90\x19\x49\x6a\x3c\x59\x5b\xb8\x98\x87\x18\x62\x8b\x5b\xbc\x52\x77\x55\x9d\xd2\xb4\x75\xd9\x86\xc4\x31\x84\x02\x22\x27\x03\x7d\x1b\x5b\x6d\xbf\x82\xb1\xac\x30\xf5\x99\xd5\xcb\x49\xff\x76\x7a\x88\xd9\x46\xcc\xa3\xd7\x7a\x35\xc2\x7b\xe6\x53\xac\x80\xd0\xd5\xb5\x5d\xa6\x7d\xdb\x09\x66\x79\xd5\x12\xc8\x14\xa1\x19\x2a\xaa\xeb\x10\x25\xe2\x0d\x4d\x57\x59\xce\x9d\xc3\x74\xcb\xac\x0c\x81\x7a\x40\x71\x9a\x9e\x47\xb0\x35\x58\xca\x33\x67\x23\xa5\x8a\x57\x25\xc2\x2b\x05\x7c\x8d\xce\x50\x48\xb3\xe0\x32\x27\x0b\x78\x43\x38\x68\x8c\x1d\xbe\x63\xe6\x61\xcd\x83\x1c\xa4\x8f\x35\xf7\x8f\x69\x66\xb8\x33\x55\xd8\xb5\x2e\xd5\xc9\xed\x18\xff\xda\x36\x1c\x6c\x68\x98\x18\xe8\x72\xdf\x2a\x6e\x14\xe2\xfc\x45\x7d\x70\x50\x48\x3b\xaa\xa4\xef\xc1\x1d\x95\x2f\x0e\x89\x75\xd5\x2d\xea\x80\x93\xc4\x5a\xec\x2b\x5c\xc9\xa1\xcb\x95\xb2\xda\xaf\xa3\xa8\x8b\x30\x12\xe8\xa5\xa6\x38\xf5\x26\x87\x91\x89\xb8\x2a\xdb\xa8\x69\x36\x5e\xda\xe3\xd3\xae\x26\xfd\xf6\x1b\x88\x3f\x28\x8d\x2d\xd6\x1c\x44\x07\x0b\x83\x73\xda\x25\x08\x4d\x32\x9a\x89\x47\x58\x88\x28\x9e\x6a\x0b\x47\xb5\x9b\x7d\x46\xbc\x49\x56\x5c\x66\xd2\x60\x7d\x51\xe6\x85\x0e\x34\x1a\xd8\xc4\x99\x50\x41\x97\x11\x46\x2b\xa1\x16\x60\xca\x1b\x4e\x95\x79\xa6\xc7\x0e\x0f\x30\x4f\xb3\xaf\x92\xe5\x3a\x74\x35\x62\x95\xdb\x0c\x29\x47\x59\x1d\x3e\xe1\xc6\x27\xb6\xfb\x38\x61\x6f\x96\xfb\x9a\x4e\xb9\xfd\x2b\x7b\xe5\xa8\xa5\x7c\x5d\x6d\x0f\x49\x79\xc7\xfd\xd3\x5a\x71\x88\xa3\x7e\x51\x17\x16\xfb\x42\x23\xec\xb8\x06\x44\xcf\xa2\x79\x70\x5e\x7c\x0e\x8b\x8b\x0f\xf5\xb7\x82\xdc\x80\x48\x58\xc0\x06\xea\xb6\x6b\xdb\x61\x65\x87\x13\x38\x43\xa5\x80\xd8\x7f\xf4\x00\xd5\x22\xc7\x83\xa3\x54\x0f\xd7\x7d\x2e\x60\xeb\x60\xa3\xcb\x25\xc7\xab\x60\xcd\xba\x51\xf7\xee\x56\xb1\x60\x2a\xcc\xe6\x29\x03\x6a\x59\x9a\x1f\xf3\xa2\xca\xcd\x1e\xf7\x8a\xee\x90\xed\xba\x5a\x4d\x74\xd1\x2f\x8b\x59\x0f\xa4\xdf\x56\xda\x3b\x3c\xa8\x6a\x96\xc4\x68\xb9\x70\xeb\xc3\x63\x8a\x00\xee\xa1\xc5\x90\xfa\x9b\xaa\x34\xa2\x81\x91\xe5\x2d\xa4\x70\xbf\x2a\x5c\x67\x95\x40\xa3\x7c\x40\xf2\x32\x3c\x75\x96\x73\x22\xd9\xff\xc8\xb5\x37\x4b\x73\x54\xc1\x4d\x31\x32\xbe\xe0\xa6\x69\xb5\x16\xdc\x74\x57\x75\xc1\x61\xda\x1e\xb8\x71\x7e\x24\xab\x1c\xa9\xb2\xdd\xdb\x2c\x83\x52\x73\x41\x7e\x4c\x69\xad\xdb\x40\x83\xf6\x9a\x6f\xe8\x2a\xbf\x5f\xc8\x6d\x1c\xbf\x1d\xd3\xac\x26\xd3\xe3\x34\x3f\x6e\x13\x2e\xfa\x92\x7f\x3b\x33\x73\x4a\xd3\xa1\xbc\x18\x32\x3d\xcc\x5c\x00\x07\x81\xdb\x9f\x3f\xec\xf7\xcf\x51\xe3\x41\x81\x1a\xa0\x9e\x11\x90\x60\xbf\x7f\xb2\x0e\xce\x0f\x07\x74\x86\xd4\xcf\x2f\xd5\x57\x05\x03\x2f\x70\xe9\x27\x32\x34\x4f\x4d\x5d\x4a\x8a\x3d\xe2\x29\x92\x39\x50\x29\xc7\xab\xfb\xc1\xfa\x64\xa5\x55\x02\x75\x35\x6e\x96\x47\x9a\x0b\x3d\xe6\xa0\x9f\x96\x9d\x68\x31\x0e\x87\x13\xf5\xc0\x2c\x70\xa5\x2a\xc5\x2a\xdf\xec\x4c\xca\xa7\x50\xb5\xa2\x91\x23\x8e\x73\x8a\xa8\x81\x54\xf8\x1f\xc7\x9a\x3e\xb0\x2b\xd9\x7b\x89\x7a\x98\x75\xb8\x3d\x74\xbc\x9e\x6a\xb3\x85\x5d\xd1\x31\xba\xe9\xd8\x0f\x29\xbf\x93\x32\x2f\x60\xd7\x78\x22\x24\x87\xed\x8b\x57\x7e\xfa\xc9\x91\x79\xf3\x23\x7d\x9b\x6c\xd4\xa2\xc9\x7f\x85\xcc\x43\xa3\x49\x48\x73\x91\xe4\x2b\x30\x09\xdc\xa8\x69\x01\xbb\x87\x2a\xe9\x5c\x29\xc9\x2a\xa5\x74\xd1\x9f\x83\x90\xe6\x6b\x60\xe2\x52\x10\x99\xf9\xb5\x33\xcd\xb8\xe9\x8c\x88\x20\x9f\x77\x4b\x75\x50\xaa\x58\xad\x0e\xfa\x31\x8f\x3a\xf4\xdb\x77\x45\x51\x97\x82\xe2\xca\x3b\x3b\x47\xab\x52\xdc\x86\x8f\x8c\x93\xbe\xe9\x21\x36\x38\x74\x78\x71\xa4\xaf\xf7\x16\x80\xe6\x86\x76\x9f\x24\xb3\x34\x55\x54\x65\x93\xbe\x0d\xde\xb8\x50\x6b\x9b\xb4\x10\x83\x44\x30\xdc\x95\xfc\x4f\x2d\xaf\xba\xa7\x87\xaf\x9f\x09\x6f\xd3\xb0\x8c\x97\x1d\xaa\x1d\xc3\x55\x97\x6a\x05\x53\x9e\xeb\xb0\xd9\x50\x6a\x4c\x52\x0e\xbd\xec\x5f\x82\x90\x1b\x95\xea\xe2\x5e\xcf\xad\x7a\x0e\x28\xa5\x51\xb3\x6b\x01\xbb\xc6\x8d\x84\xf6\x89\xab\xce\xf7\xd5\xc4\x5d\x4c\xd1\xda\x79\xae\x6c\xa6\xa2\xbe\x8a\x8b\x75\xaf\x7a\x8a\xe7\xca\x23\xbf\xd7\x84\x21\xac\x40\x17\x0b\xa3\x62\xf5\xb5\xae\x5c\x7f\x91\x4d\x6a\x78\x12\xa3\x85\x79\xea\xab\xb8\x34\x46\x79\x85\xcc\xe4\x96\x58\xce\xd0\x42\x51\x72\xd6\xc5\xba\xd9\x79\x28\xba\x80\x5d\xc1\x8e\x8d\xf6\x7a\x72\x16\x27\xe8\x8a\x07\x13\x6a\xd4\x29\xba\x81\xb6\x9a\xb2\x22\x8e\x8c\x27\x4d\xc3\x3f\x28\xa0\xac\xbb\xa3\x89\x33\x2d\x07\xc4\x93\x19\x97\x31\xfa\x3b\xca\x98\xe7\xdf\x77\xc6\x3c\xaf\x64\xcc\x0e\x66\xef\x99\x31\x7f\x49\xb8\xbe\x9e\x1b\xd2\x3c\x52\x85\x9a\x37\x34\x5b\xd2\x55\x1e\xf1\x29\xe2\x94\x89\xe6\x32\xae\xf8\xd3\x01\x86\x42\xf9\x47\x1e\x82\x02\x1b\x51\x8f\x7e\x22\x83\xa2\x7f\x27\x62\x07\xce\x78\xcb\x7d\xb4\x47\x65\x6d\xc6\x25\x73\x92\xc8\x3d\x59\x2c\x2e\xce\x3d\x2a\x5b\x05\xd6\xfb\x6a\xce\x22\xf8\xfa\x1a\x74\x28\xdd\x4f\x93\xaf\x89\x08\xef\xbe\x90\x34\x51\xb5\xa9\x63\xd5\x6b\x87\x1f\x19\x8e\x15\xa4\x53\xbc\x30\x0d\x88\x04\x3a\xa4\xf8\xcd\xdd\xb1\x3a\x2b\xac\x12\x24\xc5\x6b\x12\x53\x3a\xef\x61\xb7\x18\xd8\x73\xb2\xd5\x54\x9e\xc3\x42\x2b\xf5\xd8\xb9\xb7\x29\x99\xf8\x6f\x00\x00\x00\xff\xff\xf8\xd7\xc0\xde\x64\x46\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 18020, mode: os.FileMode(436), modTime: time.Unix(1761832697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(436), modTime: time.Unix(1755911443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(436), modTime: time.Unix(1755911443, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
