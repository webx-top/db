// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x5b\x6f\xdb\x38\xd6\xcf\xd6\xaf\x60\x8d\xa2\xa0\x02\x57\x99\x87\x0f\xdf\x43\x06\x5e\xac\x93\x4e\x66\x83\x4c\xd3\x20\xe9\x74\x17\x08\x82\x80\x96\x8e\x1c\xad\x25\xd1\x4b\xd1\x76\x3c\x86\xfe\xfb\x82\xa4\x28\x51\x77\x39\x49\x8b\xcc\xee\x02\x45\x63\x49\xe7\x7e\xe1\x39\x87\xa2\x8e\x8f\xd1\x5f\x17\x10\x03\x23\x1c\x3c\xf4\x89\xa2\x98\x72\x04\x5e\xc0\x11\x7f\x0c\x12\xe4\x07\x21\x4c\xd0\xf6\x31\x70\x1f\x51\x90\x20\xb2\xe6\x34\x22\x3c\x70\x49\x18\xee\x50\x81\x37\xdf\x21\xfe\x08\xfa\x06\x65\x8e\x65\xad\x88\xbb\x24\x0b\x40\xfb\xbd\x73\xad\x7e\x5e\x91\x08\xd2\xd4\xb2\x82\x68\x45\x19\x47\xd8\x1a\x8d\xfd\x88\x8f\xad\xd1\x7e\xcf\x48\xbc\x00\xf4\x7e\x39\x41\xef\x37\xe8\x64\x8a\x9c\x0b\x09\x93\xa4\xa9\x35\x1a\xef\xf7\xef\x37\x69\x2a\xe1\x20\xf6\x04\x85\xd1\x78\x11\xf0\xc7\xf5\xdc\x71\x69\x74\xbc\x85\xf9\xd3\x47\x4e\x57\xc7\x2e\x8d\xc6\x2d\x8f\xbc\x79\xfb\x93\xe3\x30\x98\x1f\xfb\xc4\xe5\x94\xed\x86\x41\x1d\xaf\xc8\x22\x88\x09\x0f\x68\xdc\x86\x00\xee\x23\xed\x7a\x76\xbc\x22\x8c\x44\x63\xcb\xb6\x2c\xbe\x5b\x01\xba\x0d\x03\x17\x1e\xf6\x7b\xe7\x96\xb3\xb5\xcb\x95\xa9\xd0\xdd\xfd\x51\xe5\x96\x65\xf9\xeb\xd8\x45\x38\x69\xc6\xb0\xd1\x8d\xb0\x24\xf6\x63\x24\xe0\x70\x84\x32\x91\x9d\xcf\xd4\x83\xd0\x46\xc0\x18\x65\x48\xff\xdd\x5b\x23\x9f\x32\xf4\x30\x41\xd2\xea\xca\x0b\x89\xb8\x3d\x0a\x7c\x01\x23\xee\xfa\x31\xde\xd8\x3f\xcb\xab\x77\x53\x14\x07\xa1\x7c\x3e\x62\xc0\xd7\x2c\x16\xb7\xad\xd1\x28\xb5\xc4\xbf\xec\x56\x1c\x84\xd6\x40\x41\x6f\xc8\xd6\x90\xb5\xaa\xec\x5b\x12\xf7\x57\x46\xd7\xab\xd3\x1d\x5e\xc2\xee\x3c\x80\xd0\x43\x09\x67\x41\xbc\xb0\x51\x44\x56\x77\xea\xf7\x7d\xdd\x5d\x82\xb7\x94\xaa\x13\x6a\x9f\xe6\x8a\x31\xba\xad\xaa\xe6\x45\x64\x25\xef\xd1\xad\x33\x4b\x3e\x93\x15\xb6\xad\xd1\x68\xb3\x84\x9d\x54\x37\xe2\xce\xed\x8a\x05\x31\xc7\x02\xf0\x4e\xcb\x77\x6f\x2b\xab\x3c\x4c\x90\x84\x63\x77\x02\xe3\xfe\x67\xf4\x6e\x97\x19\x44\xdd\x40\xd3\x86\x28\x13\x02\x09\x0b\x19\x40\x64\xb5\x82\xd8\xc3\xd9\x0d\x29\xa8\x6d\x5a\x91\x0d\xb0\xe1\x25\xec\x7a\x2c\x38\xc4\x7e\x3f\xcc\x7a\x85\xf2\x8c\x6e\x0f\xd5\x75\x96\x5c\x7e\xab\xaa\x3a\x41\x1b\x12\xae\xa1\xac\xbd\x5c\x08\x9c\x5b\x4e\x19\xe4\xda\x1a\xf7\x7e\x80\x76\xf2\x59\x21\xd9\xfd\xa1\xaa\x7e\x65\x24\x4e\x7c\xca\x22\xcc\xe5\x2f\x60\x89\xe9\x2f\xa5\xcc\xd7\xec\x91\x8d\xee\xee\x9b\x54\x8e\xc8\x12\x70\xe9\xd1\x24\x84\x18\x27\xb6\xad\xf4\x0f\xbc\xa7\x46\x0b\xb0\xbb\xc0\x7b\xca\x7c\xa4\x4d\xe0\x34\x48\x54\x0f\xd6\x3e\xb5\xce\x19\x8d\x7e\x0b\x12\x8e\x3d\xc2\x09\x0a\x62\x0e\xcc\x27\x2e\xec\x53\xbb\x65\xb5\xde\x5b\x23\x69\xc5\x64\x82\xe8\x52\xc8\x29\x10\x1d\x5c\x4f\x2f\xdb\x12\x99\xf9\x8e\x2e\xa5\x06\x7a\x49\x13\xa8\x85\x76\x1a\xb7\xc4\x57\x25\xae\x32\xc2\x87\xa6\x9c\x15\x0f\x1d\x21\xf8\x0d\xdd\x62\x49\xd1\xc1\x86\x2b\x4c\x62\x22\x06\x46\x49\x91\xd9\x89\xce\x69\x95\xf8\xca\x50\x89\xb4\x5a\x19\x4a\xe9\xe8\x38\x8e\x6d\x8d\xac\x02\x50\xc7\xc9\x15\x6c\x2b\x92\x61\x97\x3f\x21\x51\xf4\x9c\x33\x1a\x73\x78\xe2\x76\x6d\xa5\x17\x9a\x45\x6d\x5a\x45\xce\x2d\xf0\x0c\x55\xd0\xb2\x73\xae\x11\x12\x6c\x8f\x8f\x51\x8d\x9c\xbe\x3e\xa3\x51\x04\x31\x4f\x53\x55\x66\xab\x70\x89\xbc\x10\xdc\xe7\x24\x01\x84\x50\x5e\x2f\x4f\x49\x02\xd6\x88\xce\xff\x09\x2e\x4f\x9a\x0a\x71\x53\xd7\xa2\x00\x66\x9c\xb3\x60\xbe\xe6\x90\x28\xb0\xf7\x1b\xf4\x51\xfd\x52\xed\x8b\x12\xf9\x23\x92\x2c\x85\xcd\x44\x23\xa1\xc3\x91\x34\x54\x41\x19\xce\xd8\xce\x65\x93\xd7\x44\xa2\x81\xac\x8a\x99\x39\x88\x23\x48\x3a\x19\x78\x91\xb9\x4d\x34\x7f\x4f\x40\x25\x47\x33\x55\xbb\xdc\x38\x08\x26\x19\xf5\x1c\xb1\x70\x03\xe9\x66\x55\xf6\x5e\x25\x12\xda\xd8\xb4\xb9\xbc\x87\xd7\x2f\x1b\x88\xf9\x97\x2b\x4c\x63\xe4\x38\xce\x9c\xd2\xb0\x9d\x45\x01\xab\x82\xf9\x10\x0e\xe7\xe7\x98\xfa\xfe\x50\x1e\x0a\xfa\x10\x2e\x5a\x77\xbb\x64\xae\xba\xaf\x73\xb8\x21\x2e\x88\x2f\x3e\x61\x57\xfe\x11\xcb\x59\x9f\xed\x0b\xe8\x43\xa4\x16\x58\xb6\x20\xdf\x28\xab\x7c\xda\x2b\xaa\xf8\xc9\x70\x2c\xfe\x47\x0a\xb0\xd2\xc5\xea\xda\xd9\xa1\x80\x41\x63\xb0\xf8\x0a\xc7\x56\xed\x68\x23\xcb\xba\x52\x19\x4e\xaf\x4e\xd7\xa2\xb0\x61\x59\xde\xd0\x91\xa6\x2d\x6f\x76\xaa\x61\xa0\x0d\x56\x43\xe1\x44\x5b\xa5\x87\x37\x77\x6e\x20\x59\x87\xdc\x46\xf9\xcf\x09\x22\x6c\x91\x88\xe8\x2d\x95\x97\xb2\x5c\x42\x90\xc0\xd7\x7a\x2a\xa2\x36\x9a\x16\x3d\x75\x6e\x88\x2b\xd8\x66\x8f\x85\xc8\x9f\x03\xcf\x0b\x61\x4b\x18\xe0\x68\x2b\xef\xcc\xd8\x22\xc1\x82\xa3\xca\x80\xb4\x6a\xc3\x03\x90\xf5\xda\xe9\xae\x19\x83\x98\x0f\x5a\x3e\xaf\x60\x8b\x93\xfc\x4e\xde\x8b\x65\x99\xa0\x8c\xd0\xe0\x84\xc0\x47\xa2\x03\xc9\x52\x00\xfd\x05\xfd\x64\x6a\xad\xc1\xaf\x60\x2b\x31\x0c\x0e\x13\x85\x72\xf7\xd3\xbd\x2d\x57\xcb\xf2\xb2\x5c\x32\x40\x17\x95\x4a\xd6\x34\xd3\xea\x0c\x84\x2f\xaa\x7a\x61\xbb\xa1\x7e\xe5\xde\xd5\x25\xae\xee\x58\x31\x18\x95\x9c\x95\x81\xde\x9d\xdc\x77\xf3\xfd\x47\xc1\xb8\xb5\x53\xca\x88\x36\x3e\xc7\xc4\xc9\x29\xf4\xa8\x78\x05\xdb\x82\x99\xb6\xa6\x1c\x2d\xcd\xc2\xf8\xa1\x91\xcd\x3e\xed\xa6\x7d\x11\x07\xbc\x20\x7e\xd4\x6c\x43\xc3\x80\x2d\x83\x94\x96\x21\x87\xec\xd5\x48\xe7\x5a\x3d\x1f\xeb\x61\xa3\x60\xf5\x8d\x4f\xe0\x93\x75\xc8\xcf\xd5\xa5\xcc\x9f\x8b\xd8\x83\x27\x5c\x0b\xa6\x5b\xe0\x2a\x88\x2a\x11\xa5\x16\xff\x30\x04\x99\x56\x98\xc8\x05\xee\x21\x7b\xa0\x62\x94\xf4\xad\x76\x8f\x94\xf1\x07\xdc\xb0\x66\x8e\xf7\x7b\xe7\x2b\x99\x87\xd9\x56\xd0\xb8\x87\x8e\xbc\x6a\x25\x64\x02\xf7\x50\xca\x74\x30\xe8\x14\x0b\x9b\x5e\xf4\xdf\xd5\xe2\xff\xef\x01\x7f\xbc\x66\xe0\x07\xb9\xf9\x32\x58\x4c\xca\x59\x6c\x00\xe6\xcd\x94\xd6\x92\xfd\x0a\x1c\x13\x47\xdb\x44\xe1\x76\x17\xd1\xeb\x99\xe8\xe0\x71\x42\xd7\xcc\x85\xea\x06\x4e\x43\xad\x30\x5a\x25\x85\x53\x74\x05\x76\xf1\x5c\xf8\xbd\x78\xac\xa2\x20\x7b\xaa\xd4\xca\x1e\x66\x3a\x0e\xae\x36\x42\xbf\x67\xd4\x1a\x0c\x8c\xa9\x6d\x1d\x3b\x6f\xbf\x4f\xa6\x99\x53\xd4\x7c\x64\xb6\x50\xc2\x9c\x58\x0d\x40\x02\x51\x00\xea\x32\xa7\x18\x88\xea\x20\x74\xb9\x01\x77\x83\x89\xed\x7c\x89\x41\xce\xc2\x8a\x08\x9a\x22\x45\x37\x53\x4a\x7a\xef\x5f\x6b\x60\x3b\x95\x5a\x27\xbd\x04\x2d\xbd\xc5\x34\x45\x9f\x4e\x2f\x9c\xf3\x80\xc1\x0d\x10\x2f\x88\x17\x98\x4c\x50\x41\xaa\xbe\xf5\x64\x70\x54\xf8\x05\xb0\x96\xb2\x22\xa4\xe6\x54\xd0\xa8\x33\x06\xaf\xc2\xd7\x08\xc8\x6e\x87\xc9\x99\x96\x81\xbb\x31\x67\xda\x09\xea\xf6\xe1\x8a\x2c\x60\x82\x92\xe0\x0f\x10\x58\x6d\x3e\x95\x04\x64\xf7\xf7\xff\xff\x37\x31\xbc\x1b\xf8\x48\x32\x2c\xd5\x18\x71\x8d\x88\x53\x5a\x65\xa5\x12\x1d\xbe\xcf\x4b\x51\xb3\xaf\xae\xc9\x02\xb0\x10\x55\x5e\xdd\x06\x7f\x00\x16\x22\x17\x7e\x14\x5c\x6d\x47\x5a\xc0\x3e\x20\x06\x86\xd1\xb5\x8c\x5d\xc8\x67\xc5\x88\xb8\x9c\xa8\x2d\xca\xd4\x1a\xb9\xc2\xce\x19\x39\x23\x64\xb4\xf0\xf5\x20\x49\xb6\x01\x77\x1f\xb3\xbd\x51\x70\x37\x0e\x16\x33\xaf\x32\x9c\x2b\xe2\xab\xa1\x84\x9d\x58\xa3\x21\xd1\x35\x69\x29\xd4\x47\x1b\xb9\x8f\x20\xa9\xbf\x3a\x71\x83\x76\xb9\xb2\x0f\xa6\xbb\xb1\xab\x9b\xbd\xda\xa8\x3d\x6b\x5a\xf3\x66\xef\x04\x05\xf1\x6a\xcd\x6f\xe8\x56\xc6\x7e\xc3\xc6\x4e\xff\x6e\xf0\x86\x30\xc4\x04\x81\x46\x9d\xf3\xae\x33\x67\x64\x34\x9e\x02\x6b\xda\x62\xab\x1c\x5e\x74\x9d\xd6\x28\x45\x10\x26\xd0\x8f\x56\x6a\xb4\xcc\x0d\x32\xba\x4d\x9c\xaa\x15\x7a\xea\x56\xe3\xee\xee\x61\x26\xfb\x93\x1b\xac\x6c\x81\x1e\x73\x0d\xdc\x20\x1e\x60\xc0\xca\x76\xea\x9f\xc8\x60\x25\x1b\x98\xca\xf7\xd8\x4e\xac\x81\xa7\xbb\x2f\xbe\x9f\xc0\xe1\xa5\x8c\x4a\xb4\xb7\x5f\xcc\x32\xf5\x94\xb8\xaf\x5c\xd0\x86\xd3\xfe\x5f\x51\xfb\x4f\x29\x6a\x17\x71\x02\x8c\x63\x1b\xe1\xd5\xb2\x9c\x2f\xe5\x56\x7c\xbf\x77\x4e\xc1\xa7\x0c\x14\x42\xb6\x64\x74\x36\xe3\x5a\x60\x3c\x76\x19\x10\x1e\xc4\x8b\xf1\x04\x91\x89\x70\xa2\x5d\xbc\x9c\xad\xbf\x8e\xcd\x15\x59\x2d\x27\xa8\xdc\xd7\x0b\x54\x19\x97\x10\x7b\xa2\x9f\xd7\xd2\x4b\xf9\x66\x3e\x07\x56\x12\xcf\x88\x9a\x0f\x1f\x0e\x12\x16\x3c\x53\xd6\x81\x3d\xf4\xef\x2b\x8f\x70\x78\x85\xb9\x27\x37\xb6\xa2\x98\xbe\x68\xc5\xd0\xb6\xca\xa4\xcb\x17\xa0\xaa\xde\x6b\xf1\x3c\x77\x92\x49\xa5\x6b\x78\xc9\x09\x0d\x65\xdf\x45\x2c\xd3\xa4\x22\x93\xf6\x85\x49\x79\x88\x23\x9e\x9e\xe5\x09\xe2\xfb\xe0\x72\xf0\x8c\x25\xfe\xc7\x78\xe6\xe9\x3b\xb8\x46\x2b\x53\xcd\xa3\x5e\x49\xfa\xe7\xd5\x21\x4e\x3a\x20\x6b\x4e\x55\xb9\x4f\x7a\x7c\xe6\x4b\x20\x74\x77\xaf\xfb\xa0\x1f\x9b\x4e\x5a\x56\xa5\x81\x58\x83\x95\x40\xf9\x16\x36\x78\x01\x3f\xa3\xe1\x3a\x8a\x13\xe3\xfd\xb5\x16\x56\x74\x58\x0a\x21\x7f\x81\x1d\x7b\xf0\x94\x51\x29\x5e\xf3\x66\x5a\xca\xd5\xa9\x20\x78\x27\x81\xef\xd1\x14\xb9\x34\x72\x6e\x63\xb2\x84\x33\x92\x80\xa2\xd8\x12\x3b\x59\xd6\x55\x22\xc8\x20\xfa\x5a\x99\xde\x65\x99\xe1\xc1\x54\x12\x57\x87\x54\xab\xb4\x87\xc4\xd7\xd3\xeb\x06\xd8\x8f\x5a\x25\x72\xe1\xff\x4b\x23\x6e\xd0\x02\xd6\x69\xa4\xb7\x10\x7c\x32\xf2\x86\x04\x5e\x79\xe2\x2b\xf7\x63\x43\x56\xba\x3c\x94\x0c\xbe\x89\x34\x56\xf3\x79\x0f\x79\xd2\x44\x00\x9d\x28\x8e\x13\x6b\x94\x1e\x56\x64\x07\x25\xd5\x72\x93\x00\x6f\x11\x61\xf0\x12\x7e\x0b\x5c\xb1\xf4\x66\xfc\x15\xea\xae\x94\xa9\xd2\x15\xc9\xe9\xe8\x88\x58\xa3\x28\x3f\x2e\xa3\xc0\xd4\xfc\x6c\xa6\x9a\x4e\x31\x95\x54\xae\xbc\x5b\xa4\x93\x52\xb8\x92\x4d\xc5\x79\x99\x52\x50\x29\xdc\xe1\xd9\xf4\x21\xfa\x2e\x0b\x78\x8b\x5d\x0e\x68\xd7\xea\xf9\xd3\x29\xea\x90\xe8\xfa\x26\x4f\x15\xf5\x45\x17\xec\x12\x05\x88\x8e\xbc\xb9\x73\x99\x5f\x0e\x0b\xad\x97\xc6\x51\xce\x6e\x40\x30\xe5\xb0\x8e\x3c\x92\xd6\xf4\xfe\xa0\xc5\xe3\x06\xaa\x50\x10\xdb\xaf\xee\xf7\x06\x3d\x5e\xec\xfc\x1e\xa9\xfb\x42\x40\x0e\x77\xcf\x69\xe2\xbb\x67\xd9\xfa\x5c\xd9\xde\x0f\x4b\x11\xb2\x4d\x9f\xec\xbc\x31\x6a\x28\xef\x5d\x51\x54\x7a\x73\x6e\x9e\xa3\x1b\xd2\xe0\xcb\x05\xb9\x8d\x7f\x31\xec\xbe\x90\x7f\xd3\x80\x9e\xbe\x68\xaa\x0e\x7c\xb4\x5a\x9a\x5b\x36\x87\x8c\x0d\xe6\x3e\xe2\x90\xf9\x5c\xee\x17\xa0\x3c\x26\xbb\xc3\xea\x13\x84\xf0\xbc\x29\xbd\x75\xae\x50\x24\x5f\x50\x94\x32\x99\x5a\x07\x40\x4f\x3c\x7f\xe5\xd9\x5c\xf3\x3c\x68\x20\x97\x82\x1c\x3e\x90\x2b\x5e\xdf\x75\x20\x7f\x25\x1f\x74\x4c\xe1\xcf\x76\xc2\xa0\x26\x36\x67\x7f\xc8\xe8\xdd\xee\x8e\x41\xdd\xe9\x19\x5d\xc7\xcf\x5b\x60\x6b\xfb\xdf\x5d\x96\x55\x6c\x7a\x42\xe4\x97\xa7\x20\xe1\x7d\xa5\xbe\x59\x98\x39\xa5\xe1\x50\x59\x32\x36\x3d\xc2\xdc\x40\x02\x1c\x37\x9f\x48\xde\xef\x3f\xa2\xda\x19\x5f\x89\x20\x4f\xf6\x12\x67\xbf\x7f\xbf\x71\x2e\xd3\x14\x4d\x91\xfc\xf9\xad\x7c\xd0\x77\xe0\x09\x0a\x75\x6a\x9d\xc6\x61\x36\xb7\x0a\xb5\x0f\xf8\x3a\x20\x7b\x9f\x53\xe0\xcb\x43\x7a\xea\x8d\x4e\xa3\x06\xf2\x6c\xca\x2c\xf6\x94\x14\x0a\x27\x55\x5f\x7b\x8c\x95\x1a\x69\x3a\x96\xdf\x7c\x38\xa6\x56\x85\x5a\xc5\x31\xfa\x51\xf1\x75\x42\x65\xcc\x34\xd4\x31\xb6\xf1\x15\x90\x5c\xec\x0f\x13\x4d\xed\x98\x17\xe2\x9d\xa0\x1e\x61\x0d\x69\xd3\x96\x0f\x1a\x9a\x7c\xa1\xfb\x37\x46\xb7\x2d\x53\x8c\xad\x3f\x43\x5a\xc2\xae\x76\x6a\x5f\xa0\x19\xea\x2e\x61\xf7\x52\x65\x2f\xa5\xb2\x5a\xb9\x22\xd4\xfe\xe6\xb8\x34\xde\x00\xe3\xb7\x9c\x88\x7a\xad\x82\x62\x96\x64\x0f\x3d\xc2\xc9\xd7\xdd\x4a\xbe\x71\x10\x22\xda\x65\xa4\x5f\x62\xaf\xc5\x4e\x7d\xe7\x58\x45\xf7\x58\xee\xb8\x94\x09\xaa\xa9\xba\xb7\x72\x23\x08\x65\x97\xb0\xab\xbd\xb9\x69\xb6\xaf\x7c\x0f\x22\xed\xbb\x9c\xa0\x8d\xf1\xa1\x97\xfa\x5a\x62\xa4\x8e\x2c\x61\xf5\x54\x7e\xc4\x20\x64\xf7\xd4\xc1\x37\x89\x2c\x06\x38\x2c\x41\x97\x4b\xa4\x67\x37\x71\xbf\xf4\x9a\x50\xdc\x92\xe8\x81\x8f\x96\xd9\x47\x52\x52\xca\x2c\xf5\x7e\x46\x99\xef\x04\x95\x29\x5a\x4a\x4e\x46\xb3\xa2\x6e\x1b\x9f\xd8\x2c\x61\x97\x8b\xa3\x93\x52\xd9\x3e\x7f\xc1\x2a\x65\x98\x2a\x8b\xdd\xfd\x74\x9f\x43\x6b\x4b\x69\x15\x0f\x0c\x97\x7a\x72\xbc\x28\x5e\x36\xed\xc1\x62\x44\xcb\x80\x70\x99\x25\x22\x95\xde\xd0\xc2\x76\xf9\xb6\x17\xb6\xcb\xd2\xc2\xd6\x22\xec\x33\x17\xb6\xdf\x82\x44\x1d\x63\x72\x69\xec\xc9\xe9\xf9\x8c\x46\x2b\xba\x8e\xbd\x64\x82\x12\xca\x78\xbd\xda\xe6\x1f\x5d\x3e\xe4\xaf\x6c\x8b\x0f\x5f\x9d\x2b\xd8\x0a\x9a\xc0\xb0\x6a\xce\xb3\xd9\x85\xa1\xa6\x7a\x6e\xb6\x64\xcc\xf9\xc2\x3c\x60\xa7\x3b\x2c\xd9\xe6\xa3\x8f\x10\xcc\x99\xc5\x1e\xb6\x6d\xe7\x5a\xf0\x59\x60\x52\x3a\xc9\x68\x7c\xc2\x39\x48\xd5\x59\xd2\x70\x36\xe0\xbb\xa8\x2f\xd8\xbc\x1d\xfd\x4f\x09\x77\x1f\xbf\x91\x30\x90\x73\x7a\xd7\x8e\x9c\xa1\xa4\x58\x05\x25\xa4\x31\xc8\x65\x37\x10\x71\x54\x26\xdb\xf5\x49\x41\xee\xbd\x96\x19\x16\x87\x5d\xb3\xed\xc0\x9e\x0e\x2c\x47\xec\xd9\x17\x35\x84\xad\x8b\xd0\xc8\xdd\x37\x8e\x95\x08\x21\xfe\x1d\x00\x00\xff\xff\x91\xe3\x41\x30\xec\x3e\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 16108, mode: os.FileMode(420), modTime: time.Unix(1668699509, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
