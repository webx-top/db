// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\xeb\x6f\xdb\x38\xf2\x9f\xad\xbf\x82\x1b\x14\x05\x55\xb8\x4a\x3f\xfc\xf0\xfb\xd0\x22\x87\x73\xda\xed\x6e\x91\xed\x03\x49\xb7\x77\x40\x10\x14\xb4\x34\x72\x74\x96\x44\x1f\x49\xbf\xd6\xf0\xff\x7e\xe0\x4b\xa2\x5e\x96\x9c\x47\x91\xbd\x3d\x60\xb1\xb1\xc4\xe1\xbc\x39\x33\x1c\x91\x3d\x3d\x45\x7f\x9f\x41\x0e\x8c\x08\x88\xd0\x3b\x8a\x72\x2a\x10\x44\x89\x40\xe2\x36\xe1\x28\x4e\x52\x18\xa3\xf5\x6d\x12\xde\xa2\x84\x23\xb2\x14\x34\x23\x22\x09\x49\x9a\x6e\x51\x39\x6f\xba\x45\xe2\x16\xec\x0b\xca\x02\xcf\x5b\x90\x70\x4e\x66\x80\x76\xbb\xe0\x8b\xfe\xf9\x89\x64\xb0\xdf\x7b\x5e\x92\x2d\x28\x13\x08\x7b\xa3\x93\x38\x13\x27\xde\x68\xb7\x63\x24\x9f\x01\x7a\x36\x1f\xa3\x67\x2b\xf4\xfa\x0c\x05\x1f\x14\x0c\xdf\xef\xbd\xd1\xc9\x6e\xf7\x6c\xb5\xdf\x2b\x38\xc8\x23\x89\x61\x74\x32\x4b\xc4\xed\x72\x1a\x84\x34\x3b\x5d\xc3\x74\xf3\x52\xd0\xc5\x69\x48\xb3\x93\x8e\xa1\x68\xda\x3d\x72\x9a\x26\xd3\xd3\x98\x84\x82\xb2\xed\x30\xa8\xd3\x05\x99\x25\x39\x11\x09\xcd\xbb\x26\x40\x78\x4b\x0f\x8d\x9d\x2e\x08\x23\xd9\x89\xe7\x7b\x9e\xd8\x2e\x00\x5d\xa5\x49\x08\xdf\x77\xbb\xe0\x4a\xb0\x65\x28\xb4\xaa\xd0\xf5\xcd\x8b\xda\x2b\xcf\x8b\x97\x79\x88\x30\x6f\x9f\xe1\xa3\x4b\xa9\x49\x1c\xe7\x48\xc2\xe1\x0c\x19\x96\x83\x8f\x34\x82\xd4\x47\xc0\x18\x65\xc8\xfe\xdd\x79\xa3\x98\x32\xf4\x7d\x8c\x94\xd6\xb5\x15\xb8\x7c\x3d\x4a\x62\x09\x23\xdf\xc6\x39\x5e\xf9\x6f\xd4\xd3\x4f\x67\x28\x4f\x52\x35\x3e\x62\x20\x96\x2c\x97\xaf\xbd\xd1\x68\xef\xc9\xff\xcc\xab\x3c\x49\xbd\x81\x8c\x5e\x92\xb5\xc3\x6b\x5d\xd8\xa7\xc4\xee\x2f\x8c\x2e\x17\xe7\x5b\x3c\x87\xed\xfb\x04\xd2\x08\x71\xc1\x92\x7c\xe6\xa3\x8c\x2c\xae\xf5\xef\x9b\xa6\xb9\x24\x6d\xc5\xd5\x41\xa8\xdd\xbe\x10\x8c\xd1\x75\x5d\xb4\x28\x23\x0b\xf5\x8e\xae\x83\x09\xff\x48\x16\xd8\xf7\x46\xa3\xd5\x1c\xb6\x4a\xdc\x4c\x04\x57\x0b\x96\xe4\x02\x4b\xc0\x6b\xcb\xdf\x8d\xaf\xb5\xf2\x7d\x8c\x14\x1c\xbb\x96\x33\x6e\xde\xa0\x9f\xb6\x46\x21\xfa\x05\x3a\x6b\xf1\x32\xc9\x90\xd4\x90\x03\x44\x16\x0b\xc8\x23\x6c\x5e\x28\x46\x7d\x57\x8b\x6c\x80\x0e\x2f\x60\xdb\xa3\xc1\x21\xfa\xfb\x61\xda\x2b\x85\x67\x74\x7d\xac\xac\x13\x7e\xf1\xad\x2e\xea\x18\xad\x48\xba\x84\xaa\xf4\x2a\x10\x04\x57\x82\x32\x28\xa4\x75\xde\xfd\x00\xe9\xd4\x58\xc9\xd9\xcd\xb1\xa2\x7e\x65\x24\xe7\x31\x65\x19\x16\xea\x17\x30\xee\xda\x4b\x0b\xf3\xd5\x0c\xf9\xe8\xfa\xa6\x4d\xe4\x8c\xcc\x01\x57\x86\xc6\x29\xe4\x98\xfb\xbe\x96\x3f\x89\x36\xad\x1a\x60\xd7\x49\xb4\x31\x36\xb2\x2a\x08\x5a\x38\x6a\x3a\x6b\x9f\x58\xef\x19\xcd\x7e\x4b\xb8\xc0\x11\x11\x04\x25\xb9\x00\x16\x93\x10\x76\x7b\xbf\x23\x5a\xef\xbc\x91\xd2\x22\x1f\x23\x3a\x97\x7c\xca\x89\x01\x6e\x2e\x2f\xdf\x93\x2b\xf3\x27\x3a\x57\x12\xd8\x90\x26\xa7\x96\xd2\xd9\xb9\x15\xba\x7a\xe1\x6a\x25\x3c\x6f\x5b\xb3\x72\x30\x90\x8c\x5f\xd2\x35\x56\x18\x03\xec\x98\xc2\x45\x26\x7d\x60\xc4\xcb\x95\xcd\xed\x9a\xd6\x0b\x5f\x2b\x8a\x2b\xad\x55\xa1\xb4\x8c\x41\x10\xf8\xde\xc8\x2b\x01\xad\x9f\x7c\x82\x75\x8d\x33\x1c\x8a\x0d\x92\x49\x2f\x78\x4b\x73\x01\x1b\xe1\x37\x22\xbd\x94\x2c\xeb\x92\x2a\x0b\xae\x40\x98\xa9\x12\x97\x5f\x50\xcd\x90\x24\x7b\x7a\x8a\x1a\xe8\xec\xf3\x5b\x9a\x65\x90\x8b\xfd\x5e\xa7\xd9\x3a\x1c\x57\x0f\x92\xfa\x94\x70\x40\x08\x15\xf9\xf2\x9c\x70\xf0\x46\x74\xfa\x2f\x08\x05\x6f\x4b\xc4\x6d\x55\x8b\x06\x98\x08\xc1\x92\xe9\x52\x00\xd7\x60\xcf\x56\xe8\xa5\xfe\xa5\xcb\x17\xcd\xf2\x4b\xa4\x48\x4a\x9d\xc9\x42\xc2\xba\x23\x69\xc9\x82\xca\x9d\xb1\x5f\xf0\xa6\x9e\x89\x9a\x06\x2a\x2b\x1a\x75\x90\x40\xa2\x0c\x0c\x78\xb9\x72\xdb\x70\xfe\xce\x41\x2f\x8e\x76\xac\x7e\xb5\x70\x90\x44\x0c\xf6\x62\x62\x69\x06\x72\x98\x54\xd5\x7a\x35\x4f\xe8\x22\xd3\x65\xf2\x1e\x5a\x3f\xaf\x20\x17\x9f\x3f\x61\x9a\xa3\x20\x08\xa6\x94\xa6\xdd\x24\x4a\x58\xed\xcc\xc7\x50\x78\xff\x1e\xd3\x38\x1e\x4a\x43\x43\x1f\x43\xc5\xca\xee\x57\xd4\xd5\xb4\x75\x01\x37\xc4\x04\xf9\x87\x77\x38\x54\x7f\x64\x38\xeb\xd3\x7d\x09\x7d\x0c\xd7\x72\x96\x2f\xd1\xb7\xf2\xaa\x46\x7b\x59\x95\x3f\x19\xce\xe5\xff\x91\x06\xac\x55\xb1\x36\x77\x1e\x10\xc0\xc1\x31\x98\x7d\x3d\xc7\xd7\xe5\x68\x2b\xc9\xa6\x50\x66\x4e\xaf\x4c\x5f\x64\x62\xc3\x2a\xbd\xa1\x17\x16\xb7\x7a\x79\x50\x0c\x67\xda\x60\x31\xf4\x9c\x6c\xad\xe5\x88\xa6\xc1\x25\xf0\x65\x2a\x7c\x54\xfc\x1c\x23\xc2\x66\x5c\x7a\x6f\x25\xbd\x54\xf9\x92\x8c\x24\xb1\x95\x53\x23\xf5\xd1\x59\x59\x53\x17\x8a\xf8\x04\x6b\x33\x2c\x59\xfe\x98\x44\x51\x0a\x6b\xc2\x00\x67\x6b\xf5\x66\xc2\x66\x1c\x4b\x8a\x7a\x05\xec\xeb\x3a\x3c\x62\xf2\x61\xfb\xc1\x1a\xf3\xe2\x4d\x51\x74\x19\x97\xd7\xd2\xb6\x68\xbb\x66\xd0\x0a\x12\x3b\xbb\x9f\xb8\x4c\x18\xdf\x9d\x20\x2d\x9f\xdd\xe0\xfc\x5c\xe3\x2f\xa2\x7f\xb8\x64\x0c\x72\x31\x28\x01\x7c\xd6\x69\x08\xfb\x2d\x89\xa8\x30\x93\xcd\x55\x4d\x0b\xc9\x1d\x4e\x45\xeb\x06\xf4\xfa\xf5\xcd\x61\x99\xfe\x59\x12\xee\x2c\x79\x0c\xd2\xd6\x71\x4c\x82\x02\x43\xbf\xed\x4a\x62\x56\x87\x6a\x8f\x58\x51\x62\x2b\x99\xdd\xfe\x30\xee\x0f\x79\x22\x4a\xe4\x2f\xda\x75\xe8\x28\xb0\x63\x47\x54\x1a\xd2\x40\xf6\x4a\x64\x17\x4d\x73\x61\x19\x5c\xf6\x7d\x01\x6b\x5f\xbc\x83\x98\x2c\x53\xf1\x5e\x3f\xaa\x85\xf0\x21\x8f\x60\x83\x6b\xb1\x54\x8d\xe8\x84\x5f\xcd\xfe\xbe\x8e\xe2\x69\x0a\xca\xbb\x30\x51\x91\xea\xbb\x19\x50\xbe\x8f\x49\x5f\xd8\xba\xa5\x4c\x48\x9f\x6e\x04\xbf\x93\xdd\x2e\xf8\x4a\xa6\xa9\xe9\xe9\x9c\xf4\xe0\x51\x4f\x9d\x88\x5c\xe0\x1e\x4c\x46\x06\x07\xcf\x54\x16\x5e\x44\x2d\x81\xa9\xeb\xfa\x53\xd4\x5e\x4c\xee\x35\x68\x25\x78\xbb\x8d\x02\xc3\xd7\x3f\x12\x71\xfb\x85\x41\x9c\x6c\x70\x15\x16\x4f\xfd\x4a\x08\x73\x00\x8b\x42\xca\x2a\x86\xfd\x02\x02\x4f\x03\xab\x46\x3d\xf7\x70\x02\xfd\x32\x91\xd5\x3b\xe6\x74\xc9\x42\xa8\x37\x6f\x5a\xf2\x84\x53\x26\xe9\x39\x65\x45\xe0\x97\xe3\xd2\x55\xca\x61\xed\x38\x66\x54\x8b\x65\x06\x8d\x8c\x83\x33\x8d\x94\xef\x0e\x79\x06\x03\x63\xba\xa5\xe3\x17\xa5\xb7\xb4\xa2\x0e\x90\x6a\x6f\xe4\x96\x4f\x52\x9d\x58\x6f\x7e\xe4\x44\x09\x68\x53\x9c\x26\x20\x83\xb3\x94\xe5\x12\xc2\x15\x26\x7e\xf0\x39\x07\xb5\x0f\xd6\x48\xd0\x19\xd2\x78\x8d\x50\xca\x7a\xff\x5e\x02\xdb\xea\xd5\xf8\xba\x17\xa1\x67\xdb\x4b\x67\xe8\xdd\xf9\x87\xe0\x7d\xc2\xe0\x12\x48\x94\xe4\x33\x4c\xc6\xa8\x44\xd5\x6c\x3b\x39\x14\xf5\xfc\x12\xd8\x72\x59\x63\xd2\x52\x2a\x71\x34\x09\x43\x54\xa3\xeb\x38\xe4\x61\x83\xa9\xfd\x2c\x83\x70\xe5\xee\x67\xc7\xe8\xb0\x0d\x17\x64\x06\x63\xc4\x93\x3f\x40\xce\xea\xb2\xa9\x42\xa0\x2a\xbf\xff\xff\xbf\xb1\x63\xdd\x24\x46\x8a\x60\x25\x2d\xc9\x67\x44\x82\x4a\x60\xb6\x6b\xb3\xcb\xf6\x45\xf6\x6a\xb7\xd5\x17\x32\x03\x2c\x59\x55\x4f\x57\xc9\x1f\x80\x25\xcb\xa5\x1d\x25\x55\x3f\x50\x1a\xf0\x8f\xf0\x81\x61\x78\x3d\xa7\x03\x79\x27\x1f\x91\x8f\x63\xdd\x9e\xdc\x7b\xa3\x50\xea\xd9\xa0\x73\x5c\xc6\x32\xdf\x74\x12\xbe\x4e\x44\x78\x6b\xfa\xa2\x10\xae\x02\x2c\xf7\xbb\x5a\x71\xa1\xf4\xaf\x96\xac\xf7\xda\x1b\x0d\xf1\xae\x71\x47\x6e\x7f\xb1\x52\x3d\x04\x85\xfd\xc1\x91\x3b\xb8\xab\xc5\xc0\x60\xbc\x2b\xbf\xde\xe8\xb5\x4a\xed\x89\x69\xed\x8d\xde\x31\x4a\xf2\xc5\x52\x5c\xd2\xb5\xf2\xfd\x96\xa6\x4e\x7f\x27\x78\x45\x18\x62\x12\x41\xab\xcc\xca\xac\x29\xe4\xb8\x20\xe4\xa3\xbf\xa1\x57\xda\x47\xe4\xac\xb3\x0e\x5d\x15\xf0\xd7\xaf\x6e\xa4\x67\x23\x48\x39\xf4\x4f\xab\xd4\x66\x6e\x73\x8c\xae\x79\x50\xd7\x42\x4f\xde\x6a\xed\xec\x1e\xa7\xb2\x3f\xb9\xc2\xaa\x1a\xe8\x51\xd7\xc0\xe6\xf0\x00\x05\xd6\x5a\xa9\x7f\x22\x85\x55\x74\xe0\x0a\xdf\xa3\x3b\x19\x03\xcf\xb7\x9f\xe3\x98\xc3\xf1\xa9\x8c\xaa\x69\x4f\x3f\x99\x19\xf1\x34\xbb\x0f\x9c\xd0\x86\xe3\xfe\x5f\x52\xfb\x6f\x49\x6a\x1f\x72\x0e\x4c\x60\x1f\xe1\xc5\xbc\xba\x5e\xaa\xa5\xf8\x6e\x17\x9c\x43\x4c\x19\xe8\x09\x26\x64\x1c\x2c\xc6\x2d\xc3\xf8\x24\x64\x40\x44\x92\xcf\x4e\xc6\x88\x8c\xa5\x11\xfd\xf2\xc3\x6c\xf3\x53\x6c\x21\xc8\x62\x3e\x46\xd5\xba\x5e\x4e\x55\x7e\x09\x79\x24\xeb\x79\xcb\xbd\xe2\x6f\x12\x0b\x60\x15\xf6\x1c\xaf\x79\xfe\xfc\x28\x66\x21\x72\x79\x1d\x58\x43\xff\xbe\x88\x88\x80\x07\xd8\xf7\x14\xca\xd6\x18\xf7\xf7\x8a\x18\x56\x57\x86\xbb\x22\x00\xd5\xe5\x5e\xca\xf1\xc2\x48\x2e\x96\x43\x9b\x97\x02\xd1\x50\xf2\x87\x90\x19\x49\x6a\x3c\x59\x5b\xb8\x98\x87\x18\x62\x73\x27\x4b\x90\x38\x86\x50\x40\xe4\x84\xf8\x1f\x63\x99\xcd\x23\x98\xc6\x0a\x53\x5f\x47\xbd\x9c\xf4\xef\x57\x87\x18\xe9\x88\x55\x73\xae\xd3\x3d\xef\xb1\x59\xac\x80\xd0\xf5\x8d\xad\x83\x7e\xec\x72\xb2\xbc\x6a\x09\x64\x0c\xd6\x0c\x15\xed\x6b\x88\x12\xf1\x96\xa6\xcb\x2c\xe7\xce\xb7\x6b\xcb\xac\xac\xb0\xf4\x84\xe2\xe3\x75\x1e\xc1\xc6\x60\x29\x3f\xf1\x1a\x29\x55\x74\x2a\x11\x5e\x2b\xe0\x1b\x74\x86\x42\x9a\x05\x57\x39\x99\xc3\x5b\xc2\x41\x63\xec\xf0\x1d\xb3\xea\x6a\x1e\xe4\x20\x7d\xa8\x95\x7e\x48\x33\xc3\x9d\xa9\xc2\xae\x75\xa9\x4e\x6e\x8f\xf1\xaf\xcd\xc3\x3a\xd8\x8f\x8a\x12\x05\xf3\x7f\x51\x8f\x1b\x14\xc0\x0e\x2a\xe9\x29\x38\x9f\xf2\xbc\x21\x8e\x57\xdd\xf1\x55\xeb\xb1\x21\x91\xae\x70\x25\x87\x2e\x57\xca\x6a\x3f\xeb\xa1\x4e\x99\x48\xa0\xd7\x9a\xe2\xd8\x1b\xed\x8f\x4c\xb2\x8f\x28\xdb\xe1\x45\x56\x93\x75\xf3\x03\x84\x1d\x14\x41\xe6\x2b\x0e\xa2\x83\x85\xc1\xf9\xea\x0a\x84\x26\x19\x4d\xc4\x03\x14\x19\x8a\xa7\x5a\x09\xa8\xb6\x82\x2f\x88\x37\xca\x8a\x73\x41\x1a\xac\x2f\xa6\xbc\xd2\x61\x45\x03\x9b\xa8\x12\x2a\xe8\x32\x9e\x68\x25\xd4\xc2\x49\x79\x58\xa8\xb2\xaa\xf4\xdc\xe1\xe1\xe4\x79\xf6\x28\x19\xac\x43\x57\x47\xd4\xab\xcd\x00\x72\x90\xd5\xe1\xcb\xeb\x31\x5c\xae\x37\x83\x3d\xa6\x0b\x6e\xfe\xca\x3e\x78\x54\x51\x5e\x57\xdb\x7d\xd2\xd9\x61\x6f\xb4\x56\x1c\xe2\x96\xdf\xd4\x49\xbf\x3e\xaf\x84\x2d\xd7\x80\xe8\x45\x34\x0d\x2e\x8a\xc7\x61\x51\xf0\xbe\xfe\x56\x90\x1b\x10\xf7\x0a\xd8\x40\x1d\x13\x6d\xfb\xae\xd7\xe1\x04\xce\x54\x29\x20\xf6\x1f\x3c\x1c\xb5\xc8\x71\xef\x98\xd4\xc3\x75\x9f\x0b\xa8\xa6\xcb\x5d\x36\xd7\x87\x7b\x4c\xcd\x7e\x4f\xf7\x3e\x55\xb1\x60\x9a\xb1\xe6\x0e\x00\x6a\x29\xbb\x0f\x79\x51\xe5\x10\x8c\x7b\xb6\x75\xc8\xc6\x5b\xd5\x0e\x5d\xf4\xcb\x26\xd4\x3d\xe9\xb7\x35\xce\xf6\xf7\xea\x76\x25\x31\x5a\xcc\xdd\x56\xea\x31\xdb\x79\xb7\xbf\x3f\xa4\x6f\xa6\xfa\x78\x68\x60\x64\x79\x07\x29\xdc\xad\x7b\xd6\xb9\xdf\xd7\x28\xef\x91\xbc\x0c\x4f\x9d\x8d\x99\x48\x8e\x3f\x70\xcf\xcc\xd2\x3c\xaa\x51\xa6\x18\x39\xbe\x51\xa6\x69\x3d\x6a\xa3\xec\x81\x6c\x70\xa0\x3b\x76\x67\x23\x0c\x4a\xc4\x05\xf9\x63\x5a\x62\xdd\xe6\x18\xb4\x6b\x7c\x4b\x97\xf9\xdd\x02\x6c\xe3\xbb\xd4\x21\xcd\x6a\x32\x3d\x2e\xf2\xf3\x26\xe1\xa2\x2f\xd5\xb7\x33\x33\xa5\x34\x1d\xca\x8b\x21\xd3\xc3\xcc\x25\x70\x10\xb8\xfd\x96\xc0\x6e\xf7\x12\x35\xce\xdd\xab\x09\xea\xb4\x3d\x09\x76\xbb\x67\xab\xe0\x62\xbf\x47\x67\x48\xfd\xfc\x56\x3d\x7c\x3f\xf0\x64\x93\xbe\x49\x42\xf3\xd4\xf4\x93\xa4\xd8\x47\xdc\xd8\x31\xdf\x59\xcb\xf9\xea\xe0\xac\xfe\xd2\xda\x2a\x81\x3a\x33\x36\xc9\x23\xcd\x85\x9e\xb3\xd7\x37\xb0\x4e\xb4\x18\xfb\xfd\x89\xba\x87\x15\xb8\x52\x95\x62\x95\x57\x5b\x46\xe5\x8d\xa1\x5a\xfb\xc7\x11\xc7\xf9\xbc\xa6\x81\x54\xb0\x3f\x8e\x35\xfd\x25\xab\x64\xef\x35\xea\x61\xd6\xe1\x76\xdf\x71\xc9\xa8\xcd\x16\xb6\x7e\x63\x74\xdd\xb1\xfb\xf1\xed\xd5\xc0\x39\x6c\x1b\x37\x69\xe4\xb4\x5d\x71\x19\x4e\xdf\xcc\x31\x57\x63\xa4\x6f\x93\xb5\x2a\x91\xfc\x37\xc8\xdc\xc7\x19\x85\x34\x17\x49\xbe\x04\x93\xae\x8d\x9a\xe6\xb0\xbd\xaf\x92\x2e\x94\x92\xac\x52\x4a\x17\xfd\x35\x08\x69\xbe\x02\x26\xae\x04\x91\x79\x5e\x3b\xd3\x84\x9b\xc1\x88\x08\xf2\x75\xbb\x50\x5f\x10\x15\xab\xd5\x49\x3f\xe7\x51\x87\x7e\xfb\xce\xee\xe9\xa6\x4e\x5c\xb9\x8e\xe6\x68\x55\x8a\xdb\xf0\x91\xe3\xa4\x6f\x7a\x88\x0d\x0e\x1d\x5e\x1c\xe9\x73\xaf\x05\xa0\x39\xba\xdc\x27\xc9\x24\x4d\x15\x55\xf9\x4a\x1f\x93\x6e\x9c\x34\xb5\xaf\xb4\x10\xc3\x45\x28\xb9\x1f\xbb\x9c\xf6\xf0\xf4\x2b\xe1\x6d\xda\x95\xb1\xf2\x11\xd5\x2a\x98\xf2\xda\x6e\x75\xc6\x24\xe5\xd0\xcb\xfc\x15\x08\xb9\x21\xa9\x16\xf1\x7a\x55\xd5\xa3\x7f\x29\x8b\x5a\x57\x73\xd8\x36\x3e\xd2\xb7\x2f\x59\xf5\xc9\x5b\x2d\xd9\xf9\x18\xad\x9c\xfb\xbc\x66\x11\xea\xd3\xa9\x58\x8f\xaa\xbb\x6a\xae\x3c\xf2\x79\x45\x18\xc2\x0a\x74\x3e\x37\x0a\x56\x4f\xab\xca\x89\x10\xf9\x4a\x4d\x4f\x62\x34\x37\x77\x61\x15\x97\xc6\x24\x6f\x90\x59\xd6\x12\xcb\x19\x9a\x2b\x4a\x4e\xfd\xab\x5f\x3b\x37\x29\xe7\xb0\x2d\xd8\xb1\x71\x5e\x2f\xcb\xe2\x2c\x8d\xe2\xc1\x04\x99\xeb\x57\x37\x05\xb4\xd5\x94\x15\xf1\xc8\x48\xd2\x34\xfb\xbd\x42\xc9\xaa\x3b\x8e\x38\x1e\x34\x20\x92\x4c\xb8\x8c\xce\x4f\x28\x57\x5e\x3c\xed\x5c\x79\x51\xc9\x95\x1d\xcc\xde\x31\x57\xfe\x96\x70\x7d\x62\x35\xa4\x79\xa4\x1a\x32\x6f\x69\xb6\xa0\xcb\x3c\xe2\x63\xc4\x29\x13\xcd\x02\xae\xb8\x5b\xff\xbd\x38\x9d\x53\xfe\xfb\x06\xc1\x27\x58\x4b\x9c\xc0\xb0\xde\xef\x99\xed\x30\x43\x6d\x25\xa2\x5b\xe5\xb3\xe0\x33\x8b\x80\x9d\x6f\xb1\x22\x5b\xec\xa6\x25\x63\xc1\x24\x8f\xb0\xef\x07\x5f\x24\x9d\x19\x26\x95\x43\xeb\xce\x4d\xfd\x41\xa2\x4e\x78\xcb\x31\xb0\x47\x11\x5f\x92\x79\x3a\xf2\x9f\x13\x11\xde\x7e\x23\x69\xa2\x5a\x3f\x87\x9a\xc3\x8e\x90\x32\x0a\x2a\x48\xa7\x37\x60\x5e\x20\x12\xe8\x95\xec\x37\x37\x9f\xea\x33\x5b\x95\x20\x29\xee\x35\x98\xce\x74\x4f\x51\x5f\x4c\xec\xf9\x4c\xe4\x30\xdb\x64\xa1\x95\x7a\xec\x9c\x20\x94\x4c\xfc\x27\x00\x00\xff\xff\x81\x1f\x3a\x0c\xd3\x44\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 17619, mode: os.FileMode(420), modTime: time.Unix(1731215892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
