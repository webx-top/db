// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x5b\x6f\xdb\xba\xf9\xd9\xfa\x15\xac\x51\x14\x54\xe1\x2a\x7d\x18\xf6\x90\xc2\xc3\x92\xb6\x39\x0b\xb2\xa6\x45\xd2\xd3\x0d\x08\x82\x82\x96\x3e\x25\x9a\x25\xd1\xa3\x68\x3b\x3e\x82\xff\xfb\xc0\x9b\x44\xdd\xe5\x34\xed\x7a\xb6\x03\x14\x8d\x4d\x7d\xfc\xee\x57\x8a\x3e\x3a\x42\x7f\xbd\x83\x14\x18\xe1\x10\xa0\x77\x14\xa5\x94\x23\x08\x22\x8e\xf8\x7d\x94\xa1\x30\x8a\x61\x86\xb6\xf7\x91\x7f\x8f\xa2\x0c\x91\x35\xa7\x09\xe1\x91\x4f\xe2\x78\x87\xca\x7d\x8b\x1d\xe2\xf7\x60\x16\x28\xf3\x1c\x67\x45\xfc\x25\xb9\x03\x94\xe7\xde\x27\xf5\xf1\x92\x24\xb0\xdf\x3b\x4e\x94\xac\x28\xe3\x08\x3b\x93\x69\x98\xf0\xa9\x33\xc9\x73\x46\xd2\x3b\x40\xcf\x97\x33\xf4\x7c\x83\x8e\xe7\xc8\x3b\x97\x30\xd9\x7e\xef\x4c\xa6\x79\xfe\x7c\xb3\xdf\x4b\x38\x48\x03\x81\x61\x32\xbd\x8b\xf8\xfd\x7a\xe1\xf9\x34\x39\xda\xc2\xe2\xe1\x15\xa7\xab\x23\x9f\x26\xd3\x8e\x47\xc1\xa2\xfb\xc9\x51\x1c\x2d\x8e\x42\xe2\x73\xca\x76\x5d\x50\xe0\xdf\xd3\xbe\x67\x47\x2b\xc2\x48\x32\x75\x5c\xc7\xe1\xbb\x15\xa0\xeb\x38\xf2\xe1\x6b\x9e\x7b\xd7\x9c\xad\x7d\xae\x24\x47\x37\xb7\x2f\x6b\x4b\x8e\x13\xae\x53\x1f\xe1\xac\x7d\x87\x8b\xae\x84\x62\x70\x98\x22\x01\x87\x13\xa4\xf9\xf4\x3e\xd0\x00\x62\x17\x01\x63\x94\x21\xf3\x37\x77\x26\x21\x65\xe8\xeb\x0c\x49\x25\x2a\xa5\x66\x62\x79\x12\x85\x02\x46\xac\x86\x29\xde\xb8\x6f\xe4\xb7\x67\x73\x94\x46\xb1\x7c\x3e\x61\xc0\xd7\x2c\x15\xcb\xce\x64\xb2\x77\xc4\x3f\xbd\x94\x46\xb1\x33\x92\xd1\x2b\xb2\xb5\x78\xad\x0b\xfb\x33\xb1\xfb\x0b\xa3\xeb\xd5\xe9\x0e\x2f\x61\x77\x16\x41\x1c\xa0\x8c\xb3\x28\xbd\x73\x51\x42\x56\x37\xea\xf3\x6d\xd3\x5c\x82\xb6\xe4\xaa\x17\x2a\xdf\x17\x82\x31\xba\xad\x8b\x16\x24\x64\x25\xd7\xe8\xd6\x3b\xc9\x3e\x90\x15\x76\x9d\xc9\x64\xb3\x84\x9d\x14\x37\xe1\xde\xf5\x8a\x45\x29\xc7\x02\xf0\xc6\xf0\x77\xeb\x2a\xad\x7c\x9d\x21\x09\xc7\x6e\xc4\x8e\xdb\x37\xe8\xd9\x4e\x2b\x44\x2d\xa0\x79\x8b\x97\x09\x86\x84\x86\x2c\x20\xb2\x5a\x41\x1a\x60\xbd\x20\x19\x75\x6d\x2d\xb2\x11\x3a\xbc\x80\xdd\x80\x06\xc7\xe8\xef\x87\x69\xaf\x14\x9e\xd1\xed\xa1\xb2\x9e\x64\x17\x5f\xea\xa2\xce\xd0\x86\xc4\x6b\xa8\x4a\x2f\x13\x81\x77\xcd\x29\x83\x42\x5a\x6b\xed\x07\x48\x27\x9f\x95\x9c\xdd\x1e\x2a\xea\x67\x46\xd2\x2c\xa4\x2c\xc1\x5c\x7e\x02\x96\xd9\xf6\x52\xc2\x7c\xd6\x8f\x5c\x74\x73\xdb\x26\x72\x42\x96\x80\x2b\x8f\x66\x31\xa4\x38\x73\x5d\x25\x7f\x14\x3c\xb4\x6a\x80\xdd\x44\xc1\x83\xb6\x91\x51\x81\xd7\xc2\x51\xd3\x59\x87\xc4\x3a\x63\x34\xf9\x7b\x94\x71\x1c\x10\x4e\x50\x94\x72\x60\x21\xf1\x21\xdf\xbb\x1d\xd9\x3a\x77\x26\x52\x8b\xd9\x0c\xd1\xa5\xe0\x53\x6c\xf4\x70\x33\xbc\x5c\x47\x44\xe6\x33\xba\x94\x12\x98\x94\x26\xb6\x96\xd2\x99\xbd\x15\xba\x2a\x70\x95\x12\x5e\xb4\xc5\xac\x78\xe8\x09\xc6\xaf\xe8\x16\x4b\x8c\x1e\xb6\x4c\x61\x23\x13\x3e\x30\xc9\xca\xc8\xce\x4c\x4c\xab\xc0\x57\x8a\xca\xa4\xd6\xaa\x50\x4a\x46\xcf\xf3\x5c\x67\xe2\x94\x80\xc6\x4f\x2e\x61\x5b\xe3\x0c\xfb\xfc\x01\x89\xa2\xe7\xbd\xa5\x29\x87\x07\xee\x36\x32\xbd\x90\x2c\xe9\x92\x2a\xf1\xae\x81\xeb\xad\x02\x97\x5b\x50\x4d\x90\x20\x7b\x74\x84\x1a\xe8\xcc\xf7\xb7\x34\x49\x20\xe5\xfb\xbd\x2a\xb3\x75\xb8\x4c\x7e\x11\xd4\x17\x24\x03\x84\x50\x51\x2f\x4f\x49\x06\xce\x84\x2e\xfe\x05\x3e\xcf\xda\x0a\x71\x5b\x13\xa2\x00\x4e\x38\x67\xd1\x62\xcd\x21\x53\x60\xcf\x37\xe8\x95\xfa\xa4\xba\x11\xc5\xf2\x2b\x24\x49\x0a\x9d\xf1\x88\xa6\xc6\x1d\x49\x4b\x15\x94\xee\x8c\x5d\xf4\xd2\x30\x27\x17\x88\xdc\x27\x03\x48\x69\x83\x78\x02\xa3\xa7\xa1\xcb\xc0\x6d\x43\xf9\x6b\x06\x2a\x36\x5a\x91\xba\xd5\xb6\x41\xd0\xd0\xc8\x8b\x7d\xa5\x11\x48\x3f\xa5\xaa\xed\x6a\x7e\xd0\x45\xa6\xcb\xe0\x03\xb4\xde\x6f\x20\xe5\x1f\x2f\x31\x4d\x91\xe7\x79\x0b\x4a\xe3\x6e\x12\x25\xac\x72\xe5\x43\x28\x9c\x9d\x61\x1a\x86\x63\x69\x28\xe8\x43\xa8\x18\xd9\xdd\x8a\xba\x9a\xa6\x2e\xe0\xc6\x98\x20\x3d\x7f\x87\x7d\xf9\x47\x24\xb3\x21\xdd\x97\xd0\x87\x58\x5a\x7c\x64\x38\x15\xff\x23\x05\x58\xeb\x3f\x4d\xd5\xeb\x21\x6e\xe1\x18\x4d\x5a\xed\x71\x55\x23\xd9\x4a\xb2\xa9\x3c\xbd\x67\x50\xa6\x4f\xa2\x24\x61\x59\x98\xca\x60\x91\x8b\xbd\x62\x58\xdb\x46\x8b\xa1\xf6\x24\x5b\x25\x47\xb0\xf0\xae\x20\x5b\xc7\xdc\x45\xc5\xc7\x19\x22\xec\x2e\x13\x9e\x57\x29\x0c\x55\xbe\x04\x23\x51\x68\xe4\x54\x48\x5d\x34\x2f\xbb\xe1\x42\x11\x97\xb0\xd5\x8f\x05\xcb\x1f\xa2\x20\x88\x61\x4b\x18\xe0\x64\x2b\x57\x4e\xd8\x5d\x86\x05\x45\xe5\xbd\xfb\xba\x0e\x0f\xd8\x6c\xb2\x9e\xbf\x66\x0c\x52\x3e\x2a\xf1\x5d\xc2\x16\x67\xc5\x4a\xd1\x45\x69\x2f\x56\x4a\x68\x31\x42\x14\x22\xd1\x3b\x68\xf7\x45\x7f\x41\xaf\x6d\xa9\x0d\xf8\x25\x6c\xe5\x0e\x8b\xc2\x4c\x6d\xb9\x79\x7d\xeb\xca\x4c\x57\xcd\xa8\x15\x05\xf4\x61\x29\xa3\x53\x44\x91\xdb\x8e\xab\xd7\x11\x3e\xaa\xba\x83\xdd\x96\xca\x53\x58\xd7\x14\xa7\xa6\x61\xc5\x48\x53\x31\x96\x06\xbd\x39\xbe\xed\xa7\xfb\xcf\x92\x70\x67\x8f\xa3\x91\xb6\x3e\xc7\xc4\x2b\x30\x0c\x88\x78\x09\xdb\x92\x98\xd1\xa6\x1c\x0a\x99\x45\xe5\x45\x2b\x99\x7c\xdf\x8f\xfb\x3c\x8d\x78\x89\xfc\x65\xbb\x0e\x2d\x05\x76\x8c\x40\x86\x87\x02\x72\x50\x22\x13\x6b\xcd\x78\x6c\xba\x8d\x82\x35\x0b\xef\x20\x24\xeb\x98\x9f\xa9\xaf\x32\x7e\xce\xd3\x00\x1e\x70\xc3\x99\xae\x81\x2b\x27\xaa\x79\x94\x4a\xdc\x71\x0c\x32\xac\x30\x91\x09\xee\xab\x7e\xa0\x7c\x94\x0c\x65\xbb\x7b\xca\xf8\x57\xdc\x92\x33\xa7\x79\xee\x7d\x26\x8b\x58\x9f\xc9\x4c\x07\xf0\xc8\x6f\x9d\x88\x6c\xe0\x01\x4c\x5a\x06\x0b\x4f\x99\xd8\x4c\xd2\x7f\xd6\xf0\xff\x7f\x44\xfc\xfe\x13\x83\x30\x2a\xd4\xa7\x61\x31\xa9\x46\xb1\x05\x58\xb4\x41\x46\x4a\xf6\x0b\x70\x4c\x3c\xa3\x13\xb5\xb7\xbf\x6c\x7f\x3a\x11\xbd\x37\xce\xe8\x9a\xf9\x50\x3f\x7a\x69\xa9\x15\x56\x9b\xa3\xf6\x94\x15\xdd\x15\xcf\x45\xde\xd0\x0f\xca\x1c\x44\xca\x22\xa9\x9f\x69\xe1\x46\x97\x19\x21\xd8\x23\x8a\x0c\x06\xc6\xd4\x49\x8c\x5b\x74\xcc\xc7\x73\x6d\x0d\x35\xd2\xd8\x7d\x8f\xd0\x23\x56\x33\x8b\xd8\x28\x00\x4d\x7d\x53\x04\x44\x59\x10\xb2\x5c\x81\xbf\xc1\xc4\xf5\x3e\xa6\x20\xc7\x57\x85\x04\xcd\x91\xc2\xab\x85\x92\x66\xfb\xf7\x1a\xd8\x4e\xc5\xd4\xf1\x20\x42\xc7\x9c\x0a\xcd\xd1\xbb\xd3\x73\xef\x2c\x62\x70\x05\x24\x88\xd2\x3b\x4c\x66\xa8\x44\xd5\x3c\x2d\xb2\x28\xaa\xfd\x25\xb0\xe1\xb2\xc6\xa4\xa1\x54\xe2\x68\x12\x86\xa0\x46\xd7\xf2\xc4\x7e\x83\xc9\x31\x94\x81\xbf\xb1\xc7\xd0\x19\xea\xb7\xe1\x8a\xdc\xc1\x0c\x65\xd1\x6f\x20\x76\x75\xd9\x54\x22\x70\x05\xc4\x9f\xff\x34\xb3\xac\x1b\x85\x48\x12\xac\x14\x17\xf1\x1d\x11\xaf\x92\x5e\xa5\x10\x3d\xb6\x2f\x6a\x50\xbb\xad\x3e\x91\x3b\xc0\x82\x55\xf9\xed\x3a\xfa\x0d\xb0\x60\xb9\xb4\xa3\xa0\xea\x7a\x52\x03\xee\x01\x3e\x30\x0e\xaf\x63\x1d\x1c\x3e\xca\x47\xc4\xd7\x99\x3a\x55\xdc\x3b\x13\x5f\xe8\x59\xa3\xb3\x5c\xc6\x30\xdf\x74\x92\x6c\x1b\x71\xff\x5e\x1f\x67\x82\xbf\xf1\xb0\x18\x53\x95\xe2\x7c\xe1\x5f\x2d\xb5\xeb\x58\x0c\xee\xc3\xde\x35\xeb\xa8\xd0\x2f\x37\x72\xf4\x97\xd8\x9f\x1c\xb9\x85\xbb\x5a\xd2\x47\xe3\xdd\xb8\xf5\xf3\x59\xa3\xd4\x81\x9c\xd6\x7e\x3e\x3b\x43\x51\xba\x5a\xf3\x2b\xba\x95\xbe\xdf\x72\x16\x33\x7c\x80\xbb\x21\x0c\x31\x81\xa0\x55\xe6\xa2\xdd\x2c\x08\x59\x1d\xa7\xd8\x35\xef\xd0\x55\x01\x2f\xda\x4d\x67\xb2\x47\x10\x67\x30\xbc\xad\xd2\x61\xd9\x67\x5a\x74\x9b\x79\x75\x2d\x0c\x14\xac\xd6\x03\xd9\xc3\x54\xf6\x3b\x57\x58\x55\x03\x03\xea\x1a\x79\xa6\x3b\x42\x81\xb5\x13\xd0\xdf\x91\xc2\x2a\x3a\xb0\x85\x1f\xd0\x9d\xc8\x81\xa7\xbb\x8f\x61\x98\xc1\xe1\xa5\x8c\xca\x6d\x3f\x7f\x31\xd3\xe2\x29\x76\x9f\xb8\xa0\x8d\xc7\xfd\x47\x51\xfb\x5f\x29\x6a\x27\x41\x80\x5d\x84\x57\xcb\x6a\xb0\x54\xfb\xf0\x3c\xf7\x4e\x21\xa4\x0c\xce\xd3\x0c\x18\xd7\xf9\xa2\xb7\x13\x37\xdc\xe2\xa9\xcf\x80\xf0\x28\xbd\x9b\xce\x10\x99\x09\x0b\xba\xe5\xcb\xd4\xe6\xeb\xd3\x42\x8a\xd5\x72\x86\xaa\x4d\xbd\xd8\x2a\x9d\x12\xd2\x40\x34\xf3\x8a\x19\xe1\x20\x79\xee\x9d\x84\x1c\x58\x85\x3d\xcb\x65\x5e\xbc\x38\x88\x59\x08\x6c\x5e\x47\x36\xd0\xef\x83\xe8\x29\x46\x9e\x42\xd5\xbf\xae\x02\xc2\x4d\x6a\x7e\x64\xb2\x30\x9a\x52\xb8\xca\xdc\x53\x97\x7a\x2d\x9e\x17\x26\xb2\xb1\xf4\xcd\x2d\x05\xa2\xb1\xe4\xfb\x90\x69\x49\x6a\x3c\x19\x4b\xd8\x98\x87\xcd\xf0\xf0\x28\x3b\x90\x30\x04\x9f\x43\x60\xe5\xf6\x1f\x63\x97\x87\xef\x60\x18\x23\x4c\x3d\x86\x06\x39\x19\x1e\x54\xc7\x98\x68\x74\xc4\x9c\xaa\x2a\x9f\x0d\x58\x2c\x94\x40\xe8\xe6\xd6\xb4\x3f\x3f\x36\x94\x14\x82\xd3\x9d\xe2\x5f\xa4\x5e\xc5\x50\x71\x64\x0d\x41\xc4\xdf\xd2\x78\x9d\xa4\x99\xf5\xa6\xd9\x30\x2b\x1a\x2b\xb5\xa1\x78\xd5\x9c\x06\xf0\xa0\xb1\x94\x2f\x64\xb5\x94\x32\x2f\x95\x08\x6f\x24\xf0\x2d\x9a\x23\x9f\x26\xde\x75\x4a\x96\xf0\x96\x64\xa0\x30\x76\x78\x8e\x8e\xb8\x9a\xff\x58\x48\x9f\x2a\xca\xfb\x34\x33\xde\x95\x2a\xec\x1a\x87\xea\xe4\x76\xbc\x77\x3d\x3c\xad\x7b\xfd\xa8\x0c\xa1\x83\xf1\xff\xd6\xdf\x46\x25\xaf\x5e\x25\xfd\x77\x5d\xef\x1a\xb8\x74\xbb\x31\x5e\x57\x9d\xf1\xaa\x4d\xd8\x98\x24\x57\xf8\x91\x21\x9a\x49\x35\xb5\xdf\xc8\x90\x77\x41\x04\xd0\xb1\x22\x37\x73\x26\xfb\xb1\x85\xd5\xc6\xdf\x27\xd5\x72\x93\x01\xef\xa0\x3f\x3a\x6f\x5f\x03\x57\x86\x09\x4e\xf8\x13\x94\x5a\xc9\x53\xad\x0d\x92\x93\xd0\x4b\xe2\x4c\x92\xe2\x36\x8b\x02\x53\xb3\xb2\x1d\x61\x26\xb2\x54\x2c\xf9\x72\xb5\x8c\x22\x25\x70\x2d\x88\xca\xeb\x2c\x15\x5f\x52\x7b\xc7\x07\xd1\x8b\xe4\xbb\x64\xed\x0e\xbd\x1c\xd0\x9f\x35\xc3\xa6\x97\xd5\x81\x9b\x22\x2b\xd9\xc8\x3f\xa6\x69\xeb\x9f\x5b\x9a\x33\x44\x77\xff\x23\x59\xd0\xd3\xbd\xbe\x0b\x8a\x5a\x52\x7a\x9f\x2b\x56\xde\x8d\xda\x77\x9c\xc6\x34\x74\x32\x14\xbb\xe8\x97\x83\xcd\x37\xd2\x6f\x1b\xc6\xf6\xdf\x34\x41\x45\x21\x5a\x2d\xed\xd9\xfc\x90\x36\xd1\x3e\x30\x1a\x33\x8b\xc9\xd9\x10\x15\xde\xd8\xef\x56\xef\x20\x06\x0e\x8f\x71\xab\xce\x4e\x52\xa1\xfc\x86\x8c\xa4\x79\xea\x6c\xf8\x03\xf1\xfc\x89\x27\x31\x43\xf3\xa0\xf1\x4b\x32\x72\xf8\xf8\xa5\x68\x7d\xd7\x01\xec\x89\x6c\xd0\x33\x75\x3d\xda\x08\xa3\x1a\x97\x82\xfc\x21\xa3\x56\xb7\x39\x46\x75\x24\x6f\xe9\x3a\x7d\x5c\x82\x6d\x1c\x74\xf6\x69\x56\x91\x19\x9a\xd0\x1f\xa2\x8c\x0f\x75\x11\xed\xcc\x2c\x28\x8d\xc7\xf2\xa2\xc9\x0c\x30\x73\x05\x19\x70\xdc\x7e\x5b\x34\xcf\x5f\xa1\xc6\xfd\x4b\xb9\x41\xde\xba\x24\x5e\x9e\x3f\xdf\x78\x17\xfb\x3d\x9a\x23\xf9\xf1\x4b\xf5\x12\xe6\xc8\x57\xe5\xea\x46\x31\x4d\x63\x3d\xab\x08\xb1\x0f\xb8\xb9\xad\x0f\xee\xcb\xfd\xf2\x1a\x96\x3a\xba\x6f\x95\x40\xde\x3e\x38\x49\x03\xc5\x85\xda\xb3\x57\x37\xf1\xa7\x4a\x8c\xfd\x7e\x2a\xef\xe3\x7b\xb6\x54\xa5\x58\xe5\x15\xe7\x49\x79\x73\xbc\x36\x5a\x58\xe2\x58\xe7\xb5\x0a\x48\x26\xfb\xc3\x58\x53\x47\xa3\x25\x7b\xc7\x68\x80\x59\x8b\xdb\x7d\xc7\x65\xf3\x36\x5b\x98\x4e\x90\xd1\x6d\x47\x0b\xeb\x9a\x9f\x88\x2c\x61\xd7\xb8\x51\x2d\xb6\x59\xe2\x2e\x61\xf7\xad\xc2\x5e\x48\x61\x8d\x70\xa5\xab\xfd\xcd\xf3\x69\xba\x01\xc6\xaf\x39\x11\xf5\x5a\x39\xc5\x49\xa6\x1f\x06\x84\x93\xcf\xbb\x95\x3c\x5a\x16\x2c\xba\xd5\x4d\xef\xd3\xa0\x43\x4f\x43\x23\x00\x16\x32\x55\x3a\x2e\xa5\x82\x7a\xa8\xe6\x4e\xa1\x04\x21\xec\x12\x76\x8d\x23\xfa\x76\xfd\xca\x03\x6f\xa9\xdf\xe5\x0c\x6d\xac\x1f\xe1\xa8\x9b\xec\x13\x75\x37\x05\xab\xa7\xf2\x82\xb9\xe0\x3d\x50\x57\x9b\xe4\x66\xd1\xbd\x63\x09\xba\x5c\x22\xd3\xb8\x8b\xf5\xca\xfb\x20\xb1\x24\xb7\x47\x21\x5a\xea\x1f\xb0\x48\x2e\x75\xe8\xbd\x41\xda\x76\x02\xcb\x1c\x2d\x25\x25\xab\x59\x51\xcb\xd6\xcf\x1f\x96\xb0\x2b\xd8\x31\x41\xa9\x74\x5f\xbc\x49\x93\x3c\xcc\x95\xc6\x6e\x5e\xdf\x16\xd0\x46\x53\x46\xc4\x03\xdd\xa5\x19\x1c\xdf\xe4\x2f\x9b\x6e\x67\xb1\xbc\x65\x84\xbb\x9c\x64\x22\x94\x7e\xa2\xc4\x76\xf1\x73\x27\xb6\x8b\x4a\x62\xeb\x60\xf6\x91\x89\xed\x94\x70\xff\xfe\x0b\x89\x23\x39\xb6\xf5\xcd\xe8\xd6\x2f\xe1\x44\x68\x48\x48\xab\xbb\xd7\x0b\x88\x78\xca\xbc\x6e\xb3\x7d\x94\x87\x30\x55\x82\xe5\x1d\x37\x7d\x40\x30\x50\x96\x8b\x8d\x03\x67\x24\x16\xb3\x4d\x16\x5a\xa9\x87\xd6\x4b\x65\xc1\xc4\x7f\x02\x00\x00\xff\xff\x13\x0e\x14\xbe\x6c\x3a\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 14956, mode: os.FileMode(420), modTime: time.Unix(1642589051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x51\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x1d\xa7\x69\xc2\x40\x6c\x2b\x01\x2c\x8c\x9b\x44\x88\xff\x7d\x02\x27\x9d\xe7\x34\xad\x7a\xc3\x8f\xc7\xfb\x7e\xdf\x67\x68\xb9\xd8\xf1\x4a\x41\x08\x6c\x33\x2c\x1f\xb9\x56\x31\x62\xdc\xe8\xd6\x3a\x0f\x04\xa3\x59\x08\xec\xa7\xa8\x95\xe6\xe7\x96\x0d\xf7\x75\x8c\x33\x8c\x66\x55\xe3\xeb\xbe\x64\xc2\xea\xe5\x41\x95\xc7\x8f\xde\xb6\x4b\x25\x6a\x7b\x6b\x4f\x96\xb7\x77\x96\xfb\xa6\x5c\x6e\xb9\xf0\xd6\x9d\x96\x2d\xaf\x1a\xc3\x7d\x63\xcd\x0c\xa3\x10\x1c\x37\x95\x82\xf9\xae\x80\xf9\x13\xac\xd6\xc0\xbe\x66\xba\x2e\xc6\x8c\x37\x7f\xca\x38\x21\x28\x23\x63\xc4\x14\x23\x84\x10\xde\xf6\x46\xc0\xa3\x3a\x24\x7c\xef\x7a\xe1\x07\x6b\x44\xf8\x23\x24\x48\xf6\x60\x8d\x57\x47\x4f\x61\x31\x69\x81\x80\x91\x53\xbe\x77\x06\xee\x26\x5b\x01\x23\x34\x29\xad\x60\x1a\xd0\x50\x67\x2f\x6b\xd3\x02\xa3\x88\x23\xc6\xfe\xd4\xe6\xe0\xff\x53\xee\xf2\x47\x02\x58\xdc\x98\x3a\x39\x91\x26\x65\xa7\x44\x5f\xf9\xa0\x20\x6a\x25\x76\x84\x82\x72\xce\xba\x91\x2d\xd3\xec\x5f\x3f\x78\x2f\x25\xa1\x40\xda\x1d\x34\xc6\x2b\xb7\xe5\x42\x85\x58\xa4\x39\xc3\x2c\x9a\x86\x35\xdb\x5c\x58\xad\x41\xb3\xb3\xd2\xa7\x5c\xf9\xb0\x4e\x0a\xa9\x65\x24\x98\x4f\x27\xef\x97\x9a\x9e\x7a\x61\x59\xf5\x75\xb0\x2f\xb2\xf1\x44\x1f\x20\x75\x10\x59\xb2\x1f\xaa\xeb\xf7\x9e\xc2\xf3\xb2\x00\xee\xaa\x0e\x18\x63\x23\xf2\x51\x02\xef\x80\x7e\x93\xf7\x0c\x33\x48\x32\xc6\xde\x60\xff\xd6\x74\x7e\xc3\x2b\x45\x84\x35\x12\x16\xb2\x64\x0f\x56\xb7\xb6\x37\xb2\x2b\xa0\x4b\x17\xfa\x0a\x9b\xfc\xfa\x3d\x9d\x53\x8c\xfe\x80\x53\x22\x3f\x88\xeb\xae\x10\x31\xfa\x53\x5c\xac\xfe\x7b\x4f\xe9\x56\x26\x0e\xe5\xc8\x95\x9f\x02\xee\xd2\xc0\x62\x08\xd7\xc1\x4b\xf1\x8e\xf3\x71\xec\xbb\x93\xca\x7d\x3e\x91\x0c\x9f\x03\x40\xb1\x80\x64\x8f\xdd\x1b\x49\x28\x65\x9b\xa4\x5c\x11\x7d\x79\x6d\x84\xd2\xe7\x40\x07\xb1\x94\x72\xc4\x7f\x03\x00\x00\xff\xff\xdb\xcb\xc7\xf8\x8a\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1162, mode: os.FileMode(420), modTime: time.Unix(1638179685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
