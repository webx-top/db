// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x6d\x6f\xdb\xb8\xf9\xb3\xf4\x2b\x58\xa3\x28\xa8\x42\x55\xfa\x61\xd8\x87\x14\x19\xe6\xb4\xcd\x2d\xc8\x9a\x16\x49\xaf\x1b\x10\x04\x05\x2d\x3d\x72\x34\x4b\xa2\x47\xd1\x76\x7c\x82\xfe\xfb\x40\x52\x94\x28\xeb\xd5\x69\x70\xe8\x0d\x07\x14\x8d\x45\x3d\xef\xef\xa4\x78\x72\x82\xfe\xbe\x84\x14\x18\xe1\x10\xa0\x0f\x14\xa5\x94\x23\x08\x22\x8e\xf8\x43\x94\xa1\x30\x8a\xc1\x45\xbb\x87\xc8\x7f\x40\x51\x86\xc8\x86\xd3\x84\xf0\xc8\x27\x71\xbc\x47\x35\xde\x62\x8f\xf8\x03\xe8\x05\xca\x3c\xdb\x5e\x13\x7f\x45\x96\x80\xf2\xdc\xfb\xa2\x7e\x5e\x93\x04\x8a\xc2\xb6\xa3\x64\x4d\x19\x47\xd8\xb6\x66\x61\xc2\x67\xb6\x95\xe7\x8c\xa4\x4b\x40\x2f\x57\x2e\x7a\xb9\x45\xa7\x67\xc8\xbb\x94\x30\x59\x51\xd8\xd6\x2c\xcf\x5f\x6e\x8b\x42\xc2\x41\x1a\x08\x0a\xd6\x6c\x19\xf1\x87\xcd\xc2\xf3\x69\x72\xb2\x83\xc5\xe3\x1b\x4e\xd7\x27\xc1\x62\xd6\xfb\xe6\x24\x8e\x16\x27\x21\xf1\x39\x65\xfb\x3e\x28\xf0\x1f\xe8\xd0\xbb\x93\x35\x61\x24\x99\xd9\x8e\x6d\xf3\xfd\x1a\xd0\x6d\x1c\xf9\xf0\x3d\xcf\xbd\x5b\xce\x36\x3e\x57\xea\xa1\xbb\xfb\xd7\x07\x4b\xb6\x1d\x6e\x52\x1f\xe1\xac\x1b\xc3\x41\x37\x42\x7b\x1c\xa6\x48\xc0\xe1\x04\x95\x72\x7a\x9f\x68\x00\xb1\x83\x80\x31\xca\x90\xfe\x9b\xdb\x56\x48\x19\xfa\xee\x22\x69\x29\x65\xb9\x4c\x2c\x5b\x51\x28\x60\xc4\x6a\x98\xe2\xad\xf3\x4e\x3e\xbd\x38\x43\x69\x14\xcb\xf7\x16\x03\xbe\x61\xa9\x58\xb6\x2d\xab\xb0\xc5\xbf\x72\x29\x8d\x62\x7b\xa2\xa0\x37\x64\x67\xc8\x7a\xa8\xec\xcf\x24\xee\x2f\x8c\x6e\xd6\xe7\x7b\xbc\x82\xfd\x45\x04\x71\x80\x32\xce\xa2\x74\xe9\xa0\x84\xac\xef\xd4\xef\xfb\xb6\xbb\x04\x6f\x29\xd5\x20\x54\x5e\x54\x8a\x31\xba\x3b\x54\x2d\x48\xc8\x5a\xae\xd1\x9d\x37\xcf\x3e\x91\x35\x76\x6c\xcb\xda\xae\x60\x2f\xd5\x4d\xb8\x77\xbb\x66\x51\xca\xb1\x00\xbc\xd3\xf2\xdd\x3b\xca\x2a\xdf\x5d\x24\xe1\xd8\x9d\xc0\xb8\x7f\x87\x5e\xec\x4b\x83\xa8\x05\x74\xd6\x11\x65\x42\x20\x61\x21\x03\x88\xac\xd7\x90\x06\xb8\x5c\x90\x82\x3a\xa6\x15\xd9\x04\x1b\x5e\xc1\x7e\xc4\x82\x53\xec\xf7\xbb\x59\xaf\x56\x9e\xd1\xdd\xb1\xba\xce\xb3\xab\x6f\x87\xaa\xba\x68\x4b\xe2\x0d\x34\xb5\x97\x85\xc0\xbb\xe5\x94\x41\xa5\xad\xb1\xf6\x3b\x68\x27\xdf\xd5\x92\xdd\x1f\xab\xea\x57\x46\xd2\x2c\xa4\x2c\xc1\x5c\xfe\x02\x96\x99\xfe\x52\xca\x7c\x2d\x5f\x39\xe8\xee\xbe\x4b\xe5\x84\xac\x00\x37\x5e\xb9\x31\xa4\x38\x73\x1c\xa5\x7f\x14\x3c\x76\x5a\x80\xdd\x45\xc1\x63\xe9\x23\x6d\x02\xaf\x43\xa2\x76\xb0\x8e\xa9\x75\xc1\x68\xf2\xcf\x28\xe3\x38\x20\x9c\xa0\x28\xe5\xc0\x42\xe2\x43\x5e\x38\x3d\xd5\x3a\xb7\x2d\x69\xc5\xcc\x45\x74\x25\xe4\x14\x88\x1e\x6e\xa7\x97\x63\x8b\xcc\x7c\x41\x57\x52\x03\x5d\xd2\x04\x6a\xad\x9d\xc6\x6d\xf0\x55\x89\xab\x8c\xf0\xaa\x2b\x67\xc5\x4b\x4f\x08\x7e\x43\x77\x58\x52\xf4\xb0\xe1\x0a\x93\x98\x88\x01\x2b\xab\x33\x3b\xd3\x39\xad\x12\x5f\x19\x2a\x93\x56\x6b\x42\x29\x1d\x3d\xcf\x73\x6c\xcb\xae\x01\x75\x9c\x5c\xc3\xee\x40\x32\xec\xf3\x47\x24\x9a\x9e\xf7\x9e\xa6\x1c\x1e\xb9\xd3\xaa\xf4\x42\xb3\xa4\x4f\xab\xc4\xbb\x05\x5e\xa2\x0a\x5a\x4e\xc5\x35\x41\x82\xed\xc9\x09\x6a\x91\xd3\xcf\xef\x69\x92\x40\xca\x8b\x42\xb5\xd9\x43\xb8\x4c\x3e\x08\xee\x0b\x92\x01\x42\xa8\xea\x97\xe7\x24\x03\xdb\xa2\x8b\xff\x80\xcf\xb3\xae\x46\xdc\x35\x69\x28\x80\x39\xe7\x2c\x5a\x6c\x38\x64\x0a\xec\xe5\x16\xbd\x51\xbf\xd4\xc8\xa1\x44\x7e\x83\x24\x4b\x61\x33\x1e\xd1\x54\x87\x23\xe9\xe8\x82\x32\x9c\xb1\x83\x5e\x6b\xe1\xe4\x02\x91\x78\x32\x81\x94\x35\x88\x27\x28\x7a\x25\x74\x9d\xb8\x5d\x24\x7f\xcd\x40\xe5\x46\x27\x51\xa7\x39\x36\x08\x1e\x25\xf1\x0a\xaf\x76\x02\x19\xe6\xd4\xf4\xdd\x41\x1c\xf4\xb1\xe9\x73\xf8\x08\xaf\x8f\x5b\x48\xf9\xe7\x6b\x4c\x53\xe4\x79\xde\x82\xd2\xb8\x9f\x45\x0d\xab\x42\xf9\x18\x0e\x17\x17\x98\x86\xe1\x54\x1e\x0a\xfa\x18\x2e\x5a\x77\xa7\x61\xae\xb6\xab\x2b\xb8\x29\x2e\x48\x2f\x3f\x60\x5f\xfe\x11\xc5\x6c\xcc\xf6\x35\xf4\x31\x9e\x16\x3f\x19\x4e\xc5\xff\x48\x01\x1e\xcc\x9f\xba\xeb\x0d\x30\x37\x68\x4c\x66\xad\x70\x1c\x35\x48\x76\xb2\x6c\x1b\xaf\xc4\x19\xd5\xe9\x8b\x68\x49\x58\x36\xa6\x3a\x59\xe4\xe2\xa0\x1a\x06\xda\x64\x35\x14\x4e\xb2\x53\x7a\x04\x0b\xef\x06\xb2\x4d\xcc\x1d\x54\xfd\x74\x11\x61\xcb\x4c\x44\x5e\xa3\x31\x34\xe5\x12\x82\x44\xa1\xd6\x53\x11\x75\xd0\x59\x3d\x0d\x57\x86\xb8\x86\x5d\xf9\x5a\x88\xfc\x29\x0a\x82\x18\x76\x84\x01\x4e\x76\x72\x65\xce\x96\x19\x16\x1c\x55\xf4\x16\x87\x36\x3c\x02\x59\x57\x3d\x7f\xc3\x18\xa4\x7c\x52\xe1\xbb\x86\x1d\xce\xaa\x95\x6a\x8a\x2a\xa3\x58\x19\xa1\xc3\x09\x51\x88\xc4\xec\x50\x86\x2f\xfa\x1b\x7a\x6b\x6a\xad\xc1\xaf\x61\x27\x31\x0c\x0e\xae\x42\xb9\x7b\x7b\xef\xc8\x4a\xd7\xac\xa8\x0d\x03\x0c\x51\xa9\xb3\x53\x64\x91\xd3\x4d\x6b\x30\x10\x3e\xab\xbe\x83\x9d\x8e\xce\x53\x79\x57\x37\xa7\xb6\x63\xc5\x96\xa6\xe1\xac\x12\xf4\xee\xf4\x7e\x98\xef\xbf\x6b\xc6\xbd\x33\x4e\x49\xb4\xf3\x3d\x26\x5e\x45\x61\x44\xc5\x6b\xd8\xd5\xcc\xb4\x35\xe5\xa6\x90\x19\x5c\x5e\x75\xb2\xc9\x8b\x61\xda\x97\x69\xc4\x6b\xe2\xaf\xbb\x6d\x68\x18\xb0\x67\x0b\xa4\x65\xa8\x20\x47\x35\xd2\xb9\xd6\xce\xc7\x76\xd8\x28\x58\xbd\xf0\x01\x42\xb2\x89\xf9\x85\x7a\x94\xf9\x73\x99\x06\xf0\x88\x5b\xc1\x74\x0b\x5c\x05\xd1\x41\x44\xa9\xc2\x1d\xc7\x20\xd3\x0a\x13\x59\xe0\xbe\x97\x2f\x54\x8c\x92\xb1\x6a\xf7\x40\x19\xff\x8e\x3b\x6a\xe6\x2c\xcf\xbd\xaf\x64\x11\x97\x07\x2f\xb3\x11\x3a\xf2\xa9\x97\x90\x09\x3c\x42\xa9\xd4\xc1\xa0\x53\x17\x36\x5d\xf4\x5f\xb4\xe2\xff\x5f\x11\x7f\xf8\xc2\x20\x8c\x2a\xf3\x95\xb0\x98\x34\xb3\xd8\x00\xac\xc6\x20\xad\x25\xfb\x05\x38\x26\x9e\xb6\x89\xc2\x1d\x6e\xdb\x5f\xe6\x62\xf6\xc6\x19\xdd\x30\x1f\x0e\x8f\x5e\x3a\x7a\x85\x31\xe6\x28\x9c\xba\xa3\x3b\xe2\xbd\xa8\x1b\xe5\x8b\xba\x06\x91\xba\x49\x96\xef\x4a\xe5\x26\xb7\x19\xa1\xd8\x13\x9a\x0c\x06\xc6\xd4\x49\x8c\x53\x4d\xcc\xa7\x67\xa5\x37\xd4\x96\xc6\x9c\x7b\x84\x1d\xb1\xda\xb3\x08\x44\x01\xa8\xfb\x9b\x62\x20\xda\x82\xd0\xe5\x06\xfc\x2d\x26\x8e\xf7\x39\x05\xb9\x7d\x55\x44\xd0\x19\x52\x74\x4b\xa5\xa4\xdb\xfe\xbb\x01\xb6\x57\x39\x75\x3a\x4a\xd0\xd6\xa7\x42\x67\xe8\xc3\xf9\xa5\x77\x11\x31\xb8\x01\x12\x44\xe9\x12\x13\x17\xd5\xa4\xda\xa7\x45\x06\x47\x85\x5f\x03\x6b\x29\x0f\x84\xd4\x9c\x6a\x1a\x6d\xc6\x10\x1c\xf0\x35\x22\x71\xd8\x61\x72\x1b\xca\xc0\xdf\x9a\xdb\x50\x17\x0d\xfb\x70\x4d\x96\xe0\xa2\x2c\xfa\x0d\x04\x56\x9f\x4f\x25\x01\x47\x40\xfc\xf5\x2f\xae\xe1\xdd\x28\x44\x92\x61\xa3\xb9\x88\x67\x44\xbc\x46\x79\x95\x4a\x0c\xf8\xbe\xea\x41\xdd\xbe\xfa\x42\x96\x80\x85\xa8\xf2\xe9\x36\xfa\x0d\xb0\x10\xb9\xf6\xa3\xe0\xea\x78\xd2\x02\xce\x11\x31\x30\x8d\xae\x6d\x1c\x1c\x3e\x29\x46\xc4\xa3\xab\x4e\x15\x0b\xdb\xf2\x85\x9d\x4b\x72\x46\xc8\x68\xe1\xdb\x41\x92\xed\x22\xee\x3f\x94\xc7\x99\xe0\x6f\x3d\x2c\xb6\xa9\xca\x70\xbe\x88\xaf\x8e\xde\x75\x2a\x36\xee\xe3\xd1\xe5\xf6\x74\xe8\xd7\x5b\xb9\xf5\x97\xd4\x9f\x9d\xb8\x41\xbb\xd9\xd2\x27\xd3\xdd\x3a\x87\xe7\xb3\xda\xa8\x23\x35\xad\xfb\x7c\xd6\x45\x51\xba\xde\xf0\x1b\xba\x93\xb1\xdf\x71\x16\x33\x7e\x80\xbb\x25\x0c\x31\x41\xa0\x53\xe7\x6a\xdc\xac\x18\x19\x13\xa7\xc0\x3a\xeb\xb1\x55\x05\x2f\xc6\x4d\xdb\x2a\x10\xc4\x19\x8c\xa3\x35\x26\x2c\xf3\x4c\x8b\xee\x32\xef\xd0\x0a\x23\x0d\xab\xf3\x40\xf6\x38\x93\xfd\xc1\x0d\xd6\xb4\xc0\x88\xb9\x26\x9e\xe9\x4e\x30\xe0\xc1\x09\xe8\x1f\xc8\x60\x0d\x1b\x98\xca\x8f\xd8\x4e\xd4\xc0\xf3\xfd\xe7\x30\xcc\xe0\xf8\x56\x46\x25\xda\xcf\xdf\xcc\x4a\xf5\x94\xb8\xcf\xdc\xd0\xa6\xd3\xfe\xb3\xa9\xfd\xbf\x34\xb5\x79\x10\x60\x07\xe1\xf5\xaa\x99\x2c\xcd\x39\x3c\xcf\xbd\x73\x08\x29\x83\xcb\x34\x03\xc6\xcb\x7a\x31\x38\x89\x6b\x69\xf1\xcc\x67\x40\x78\x94\x2e\x67\x2e\x22\xae\xf0\xa0\x53\x7f\x4c\x6d\x7f\x3e\xad\xb4\x58\xaf\x5c\xd4\x1c\xea\x05\xaa\x0c\x4a\x48\x03\x31\xcc\x2b\x61\x44\x80\xe4\xb9\x37\x0f\x39\xb0\x86\x78\x46\xc8\xbc\x7a\x75\x94\xb0\x10\x98\xb2\x4e\x1c\xa0\x3f\x06\xd1\x73\x6c\x79\x2a\x53\xff\xba\x0e\x08\xd7\xa5\xf9\x89\xc5\x42\x5b\x4a\xd1\xaa\x6b\xcf\xa1\xd6\x1b\xf1\xbe\x72\x91\x49\x65\x68\xdf\x52\x11\x9a\xca\x7e\x88\x58\xa9\xc9\x81\x4c\xda\x13\x26\xe5\xd1\xd3\x54\xd9\x2b\x46\x5c\x11\xb6\xfb\x6b\x33\x01\xa6\xf8\xaa\xb2\xbe\x66\x9a\x49\x13\x74\x7f\x0d\x93\xdf\xe1\x04\xd0\xa9\x62\xe7\xda\x56\x71\xac\x52\xd9\x88\x56\xab\x6d\x06\xbc\x87\xff\xe4\xf0\xbb\x05\xae\x1c\x16\xcc\xf9\x33\x84\x9f\x94\xe9\x20\x04\x65\x17\x7a\x4d\x6c\x2b\xa9\xbe\x24\x2a\x30\x35\xa7\x40\x10\xf1\xf7\x34\xde\x24\x69\x86\xee\xee\x95\x2a\xea\x13\xad\x2f\x57\xeb\x4f\x98\x4a\x61\x99\xc8\x06\x4e\xf5\x29\xd1\x58\x74\x4b\xdc\x9e\x1c\x28\xc5\x33\x33\xe1\x55\xe2\xa2\x06\x81\xe7\xcd\x8b\x03\xbb\x1c\x91\x1b\x0d\x59\x65\x86\x0c\x8a\x3a\xf2\x95\x6e\x2d\x8b\xe8\x53\x0a\xd7\x70\xcf\x68\xd7\xef\xfe\xf2\x20\x45\x28\x27\xab\xf2\x1e\x0e\xea\x28\x84\x43\xa1\xd8\x38\x97\x36\xbf\x2f\x4f\xa9\x72\x32\x15\xfb\xf8\xd7\x4d\xe5\x07\xf9\x77\x35\xc2\xe2\x87\xba\x57\x14\xa2\xf5\xca\x9c\x8b\x5a\xfd\xac\xbf\x8a\x5a\xe6\xb0\x3e\xa5\x0f\xca\xbe\x8c\xaa\x68\x1c\x0e\xab\x0f\x10\x03\x87\xa7\x84\x55\x6f\x43\x54\x24\x7f\xa0\x22\x95\x32\xf5\x76\xc1\x40\xbc\x7f\xe6\x2e\xa8\x79\x1e\xd5\xfa\xa4\x20\xc7\xb7\xbe\xf7\x74\x93\x3e\x2d\x93\x5b\xbb\x99\x21\x33\x2a\x36\x23\xb2\x7c\x7c\x8c\x32\x3e\xd6\xae\xba\x85\x59\x50\x1a\x4f\x95\xa5\x64\x33\x22\xcc\x0d\x88\x6d\x4d\xf7\x95\x90\x3c\x7f\x83\x5a\x97\x2c\x24\x82\xbc\x5a\x41\xbc\x3c\x7f\xb9\xf5\xae\x8a\x02\x9d\x21\xf9\xf3\x5b\xf3\xa6\xc5\xc4\xf3\x70\x75\x6d\x88\xa6\xb1\xda\xd5\x4a\xb5\x8f\xb8\x9e\x55\xee\xce\x6b\x7c\xf9\xad\x55\xed\xcf\x3b\x35\x90\x9f\x18\xe6\x69\xa0\xa4\x50\x38\x85\xba\x6e\x37\x53\x6a\x14\xc5\x4c\x5e\xba\xf3\x4c\xad\x6a\xb5\xea\x7b\x4c\x56\x7d\x3d\x4c\x4d\x4d\x55\xf7\x35\xd4\x31\x36\x65\x0a\x48\x56\x95\xe3\x44\x53\xfb\x9f\x5a\xbc\x53\x34\x22\xac\x21\x6d\xd1\x73\xa3\xac\xcb\x17\x7a\xe4\x60\x74\xd7\x33\x2b\x39\xfa\x1e\xe8\x0a\xf6\xad\x6b\x53\x02\xcd\x50\x77\x05\xfb\x1f\x55\xf6\x4a\x2a\xab\x95\xab\x43\xed\x1f\x9e\x4f\xd3\x2d\x30\x7e\xcb\x89\x68\x0c\x2a\x28\xe6\x59\xf9\x32\x20\x9c\x7c\xdd\xaf\xe5\xfe\x51\x88\xe8\x34\x91\x3e\xa6\x41\x8f\x9d\xc6\x66\x4d\x2c\x74\x6a\xb4\x76\x65\x82\xc3\x54\xcd\xed\xca\x08\x42\xd9\x15\xec\x5b\xfb\xf0\x6e\xfb\xca\x5d\xad\xb4\xef\xca\x45\x5b\xe3\xa6\xad\xba\xae\x66\xa9\x0f\x50\x58\xbd\x95\xb7\xc8\x84\xec\x81\xfa\x7e\x29\x91\xc5\x98\x88\x25\xe8\x6a\x85\xf4\x84\x28\xd6\x1b\x87\x3e\x62\x49\xa2\x47\x21\x5a\x95\xb7\x54\xa5\x94\x65\xea\xbd\x43\xa5\xef\x04\x95\x33\xb4\x92\x9c\x8c\xae\xa8\x96\x8d\x3b\x8e\x2b\xd8\x57\xe2\xe8\xa4\x54\xb6\xaf\x8e\xcb\xa4\x0c\x67\xca\x62\x77\x6f\xef\x2b\x68\x6d\x29\xad\xe2\x91\xe1\xd2\x4e\x8e\x1f\x8a\x97\x6d\x7f\xb0\x18\xd1\x32\x21\x5c\xe6\x99\x48\xa5\x9f\xa8\xb0\x5d\xfd\xdc\x85\xed\xaa\x51\xd8\x7a\x84\x7d\x62\x61\x3b\x27\xdc\x7f\xf8\x46\xe2\x48\xee\x0f\x86\x36\x83\xc6\x75\x77\x91\x1a\x12\xd2\x18\x23\xcb\x05\x44\x3c\xe5\x5e\xa7\x3d\xa7\x08\xe5\xbc\x26\xc3\xfa\x43\x76\xb9\x13\x1d\x69\xcb\x15\xe2\xc8\x66\xdc\x10\xb6\x2d\x42\x27\xf7\xd0\x38\x39\x16\x42\xfc\x2f\x00\x00\xff\xff\x24\xbf\xca\xc3\x36\x32\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 12854, mode: os.FileMode(420), modTime: time.Unix(1638177923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x51\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x1d\xa7\x69\xc2\x40\x6c\x2b\x01\x2c\x8c\x9b\x44\x88\xff\x7d\x02\x27\x9d\xe7\x34\xad\x7a\xc3\x8f\xc7\xfb\x7e\xdf\x67\x68\xb9\xd8\xf1\x4a\x41\x08\x6c\x33\x2c\x1f\xb9\x56\x31\x62\xdc\xe8\xd6\x3a\x0f\x04\xa3\x59\x08\xec\xa7\xa8\x95\xe6\xe7\x96\x0d\xf7\x75\x8c\x33\x8c\x66\x55\xe3\xeb\xbe\x64\xc2\xea\xe5\x41\x95\xc7\x8f\xde\xb6\x4b\x25\x6a\x7b\x6b\x4f\x96\xb7\x77\x96\xfb\xa6\x5c\x6e\xb9\xf0\xd6\x9d\x96\x2d\xaf\x1a\xc3\x7d\x63\xcd\x0c\xa3\x10\x1c\x37\x95\x82\xf9\xae\x80\xf9\x13\xac\xd6\xc0\xbe\x66\xba\x2e\xc6\x8c\x37\x7f\xca\x38\x21\x28\x23\x63\xc4\x14\x23\x84\x10\xde\xf6\x46\xc0\xa3\x3a\x24\x7c\xef\x7a\xe1\x07\x6b\x44\xf8\x23\x24\x48\xf6\x60\x8d\x57\x47\x4f\x61\x31\x69\x81\x80\x91\x53\xbe\x77\x06\xee\x26\x5b\x01\x23\x34\x29\xad\x60\x1a\xd0\x50\x67\x2f\x6b\xd3\x02\xa3\x88\x23\xc6\xfe\xd4\xe6\xe0\xff\x53\xee\xf2\x47\x02\x58\xdc\x98\x3a\x39\x91\x26\x65\xa7\x44\x5f\xf9\xa0\x20\x6a\x25\x76\x84\x82\x72\xce\xba\x91\x2d\xd3\xec\x5f\x3f\x78\x2f\x25\xa1\x40\xda\x1d\x34\xc6\x2b\xb7\xe5\x42\x85\x58\xa4\x39\xc3\x2c\x9a\x86\x35\xdb\x5c\x58\xad\x41\xb3\xb3\xd2\xa7\x5c\xf9\xb0\x4e\x0a\xa9\x65\x24\x98\x4f\x27\xef\x97\x9a\x9e\x7a\x61\x59\xf5\x75\xb0\x2f\xb2\xf1\x44\x1f\x20\x75\x10\x59\xb2\x1f\xaa\xeb\xf7\x9e\xc2\xf3\xb2\x00\xee\xaa\x0e\x18\x63\x23\xf2\x51\x02\xef\x80\x7e\x93\xf7\x0c\x33\x48\x32\xc6\xde\x60\xff\xd6\x74\x7e\xc3\x2b\x45\x84\x35\x12\x16\xb2\x64\x0f\x56\xb7\xb6\x37\xb2\x2b\xa0\x4b\x17\xfa\x0a\x9b\xfc\xfa\x3d\x9d\x53\x8c\xfe\x80\x53\x22\x3f\x88\xeb\xae\x10\x31\xfa\x53\x5c\xac\xfe\x7b\x4f\xe9\x56\x26\x0e\xe5\xc8\x95\x9f\x02\xee\xd2\xc0\x62\x08\xd7\xc1\x4b\xf1\x8e\xf3\x71\xec\xbb\x93\xca\x7d\x3e\x91\x0c\x9f\x03\x40\xb1\x80\x64\x8f\xdd\x1b\x49\x28\x65\x9b\xa4\x5c\x11\x7d\x79\x6d\x84\xd2\xe7\x40\x07\xb1\x94\x72\xc4\x7f\x03\x00\x00\xff\xff\xdb\xcb\xc7\xf8\x8a\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1162, mode: os.FileMode(420), modTime: time.Unix(1638179685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
