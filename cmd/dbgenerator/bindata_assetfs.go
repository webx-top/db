// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/dbschema.gotpl
// template/dbschema_init.gotpl
// template/model.gotpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _templateDbschemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1b\x6d\x6f\xdb\xb8\xf9\xb3\xf5\x2b\x58\xa3\x28\xa8\xc0\x55\xee\xc3\xb0\x0f\x39\x78\x58\xd2\x5e\x6e\x41\xd6\xb4\x48\x7a\xdd\x80\x20\x28\x68\xe9\x51\xa2\x59\x12\x3d\x8a\xb6\xe3\x33\xf4\xdf\x07\xbe\x49\xd4\xbb\x9c\xa4\x45\x6f\x1b\x70\xb8\xc6\xd4\xc3\xe7\xfd\x95\xa2\x8e\x8f\xd1\x5f\xef\x21\x05\x46\x38\x04\xe8\x3d\x45\x29\xe5\x08\x82\x88\x23\xfe\x10\x65\x28\x8c\x62\x98\xa1\xed\x43\xe4\x3f\xa0\x28\x43\x64\xcd\x69\x42\x78\xe4\x93\x38\xde\xa1\x72\xdf\x62\x87\xf8\x03\x98\x05\xca\x3c\xc7\x59\x11\x7f\x49\xee\x01\xed\xf7\xde\x27\xf5\xe7\x15\x49\x20\xcf\x1d\x27\x4a\x56\x94\x71\x84\x9d\xc9\x34\x4c\xf8\xd4\x99\xec\xf7\x8c\xa4\xf7\x80\x5e\x2f\x67\xe8\xf5\x06\x9d\xcc\x91\x77\x21\x61\xb2\x3c\x77\x26\xd3\xfd\xfe\xf5\x26\xcf\x25\x1c\xa4\x81\xc0\x30\x99\xde\x47\xfc\x61\xbd\xf0\x7c\x9a\x1c\x6f\x61\xf1\xf8\x96\xd3\xd5\xb1\x4f\x93\x69\xc7\xa3\x60\xd1\xfd\xe4\x38\x8e\x16\xc7\x21\xf1\x39\x65\xbb\x2e\x28\xf0\x1f\x68\xdf\xb3\xe3\x15\x61\x24\x99\x3a\xae\xe3\xf0\xdd\x0a\xd0\x4d\x1c\xf9\xf0\x75\xbf\xf7\x6e\x38\x5b\xfb\x5c\x49\x8e\x6e\xef\x8e\x6a\x4b\x8e\x13\xae\x53\x1f\xe1\xac\x7d\x87\x8b\xae\x85\x62\x70\x98\x22\x01\x87\x13\xa4\xf9\xf4\x3e\xd0\x00\x62\x17\x01\x63\x94\x21\xf3\xef\xde\x99\x84\x94\xa1\xaf\x33\x24\x95\xa8\x94\x9a\x89\xe5\x49\x14\x0a\x18\xb1\x1a\xa6\x78\xe3\xfe\x2c\x7f\xbd\x9a\xa3\x34\x8a\xe5\xf3\x09\x03\xbe\x66\xa9\x58\x76\x26\x93\xdc\x11\xff\xe9\xa5\x34\x8a\x9d\x91\x8c\x5e\x93\xad\xc5\x6b\x5d\xd8\x1f\x89\xdd\x5f\x19\x5d\xaf\xce\x76\x78\x09\xbb\xf3\x08\xe2\x00\x65\x9c\x45\xe9\xbd\x8b\x12\xb2\xba\x55\x7f\xdf\x35\xcd\x25\x68\x4b\xae\x7a\xa1\xf6\x79\x21\x18\xa3\xdb\xba\x68\x41\x42\x56\x72\x8d\x6e\xbd\xd3\xec\x03\x59\x61\xd7\x99\x4c\x36\x4b\xd8\x49\x71\x13\xee\xdd\xac\x58\x94\x72\x2c\x00\x6f\x0d\x7f\x77\xae\xd2\xca\xd7\x19\x92\x70\xec\x56\xec\xb8\xfb\x19\xbd\xda\x69\x85\xa8\x05\x34\x6f\xf1\x32\xc1\x90\xd0\x90\x05\x44\x56\x2b\x48\x03\xac\x17\x24\xa3\xae\xad\x45\x36\x42\x87\x97\xb0\x1b\xd0\xe0\x18\xfd\x7d\x37\xed\x95\xc2\x33\xba\x3d\x54\xd6\xd3\xec\xf2\x4b\x5d\xd4\x19\xda\x90\x78\x0d\x55\xe9\x65\x22\xf0\x6e\x38\x65\x50\x48\x6b\xad\x7d\x07\xe9\xe4\xb3\x92\xb3\xbb\x43\x45\xfd\xcc\x48\x9a\x85\x94\x25\x98\xcb\xbf\x80\x65\xb6\xbd\x94\x30\x9f\xf5\x23\x17\xdd\xde\xb5\x89\x9c\x90\x25\xe0\xca\xa3\x59\x0c\x29\xce\x5c\x57\xc9\x1f\x05\x8f\xad\x1a\x60\xb7\x51\xf0\xa8\x6d\x64\x54\xe0\xb5\x70\xd4\x74\xd6\x21\xb1\xce\x19\x4d\xfe\x1e\x65\x1c\x07\x84\x13\x14\xa5\x1c\x58\x48\x7c\xd8\xe7\x6e\x47\xb6\xde\x3b\x13\xa9\xc5\x6c\x86\xe8\x52\xf0\x29\x36\x7a\xb8\x19\x5e\xae\x23\x22\xf3\x15\x5d\x4a\x09\x4c\x4a\x13\x5b\x4b\xe9\xcc\xde\x0a\x5d\x15\xb8\x4a\x09\x6f\xda\x62\x56\x3c\xf4\x04\xe3\xd7\x74\x8b\x25\x46\x0f\x5b\xa6\xb0\x91\x09\x1f\x98\x64\x65\x64\x67\x26\xa6\x55\xe0\x2b\x45\x65\x52\x6b\x55\x28\x25\xa3\xe7\x79\xae\x33\x71\x4a\x40\xe3\x27\x57\xb0\xad\x71\x86\x7d\xfe\x88\x44\xd1\xf3\xde\xd1\x94\xc3\x23\x77\x1b\x99\x5e\x48\x96\x74\x49\x95\x78\x37\xc0\xf5\x56\x81\xcb\x2d\xa8\x26\x48\x90\x3d\x3e\x46\x0d\x74\xe6\xf7\x3b\x9a\x24\x90\xf2\x3c\x57\x65\xb6\x0e\x97\xc9\x1f\x82\xfa\x82\x64\x80\x10\x2a\xea\xe5\x19\xc9\xc0\x99\xd0\xc5\xbf\xc0\xe7\x59\x5b\x21\x6e\x6b\x42\x14\xc0\x29\xe7\x2c\x5a\xac\x39\x64\x0a\xec\xf5\x06\xbd\x55\x7f\xa9\x6e\x44\xb1\xfc\x16\x49\x92\x42\x67\x3c\xa2\xa9\x71\x47\xd2\x52\x05\xa5\x3b\x63\x17\x1d\x19\xe6\xe4\x02\x91\xfb\x64\x00\x29\x6d\x10\x4f\x60\xf4\x34\x74\x19\xb8\x6d\x28\x7f\xcb\x40\xc5\x46\x2b\x52\xb7\xda\x36\x08\x1a\x1a\x79\xb1\xaf\x34\x02\xe9\xa7\x54\xb5\x5d\xcd\x0f\xba\xc8\x74\x19\x7c\x80\xd6\x2f\x1b\x48\xf9\xc7\x2b\x4c\x53\xe4\x79\xde\x82\xd2\xb8\x9b\x44\x09\xab\x5c\xf9\x10\x0a\xe7\xe7\x98\x86\xe1\x58\x1a\x0a\xfa\x10\x2a\x46\x76\xb7\xa2\xae\xa6\xa9\x0b\xb8\x31\x26\x48\x2f\xde\x63\x5f\xfe\x23\x92\xd9\x90\xee\x4b\xe8\x43\x2c\x2d\xfe\x64\x38\x15\xff\x47\x0a\xb0\xd6\x7f\x9a\xaa\xd7\x43\xdc\xc2\x31\x9a\xb4\xda\xe3\xaa\x46\xb2\x95\x64\x53\x79\x7a\xcf\xa0\x4c\x9f\x44\x49\xc2\xb2\x30\x95\xc1\x22\x17\x7b\xc5\xb0\xb6\x8d\x16\x43\xed\x49\xb6\x4a\x8e\x60\xe1\x5d\x43\xb6\x8e\xb9\x8b\x8a\x3f\x67\x88\xb0\xfb\x4c\x78\x5e\xa5\x30\x54\xf9\x12\x8c\x44\xa1\x91\x53\x21\x75\xd1\xbc\xec\x86\x0b\x45\x5c\xc1\x56\x3f\x16\x2c\x7f\x88\x82\x20\x86\x2d\x61\x80\x93\xad\x5c\x39\x65\xf7\x19\x16\x14\x95\xf7\xe6\x75\x1d\x1e\xb0\xd9\x64\x3d\x7f\xcd\x18\xa4\x7c\x54\xe2\xbb\x82\x2d\xce\x8a\x95\xa2\x8b\xd2\x5e\xac\x94\xd0\x62\x84\x28\x44\xa2\x77\xd0\xee\x8b\xfe\x82\x7e\xb2\xa5\x36\xe0\x57\xb0\x95\x3b\x2c\x0a\x33\xb5\xe5\xf6\xa7\x3b\x57\x66\xba\x6a\x46\xad\x28\xa0\x0f\x4b\x19\x9d\x22\x8a\xdc\x76\x5c\xbd\x8e\xf0\x51\xd5\x1d\xec\xb6\x54\x9e\xc2\xba\xa6\x38\x35\x0d\x2b\x46\x9a\x8a\xb1\x34\xe8\xed\xc9\x5d\x3f\xdd\x7f\x96\x84\x3b\x7b\x1c\x8d\xb4\xf5\x39\x26\x5e\x81\x61\x40\xc4\x2b\xd8\x96\xc4\x8c\x36\xe5\x50\xc8\x2c\x2a\x6f\x5a\xc9\xec\xf3\x7e\xdc\x17\x69\xc4\x4b\xe4\x47\xed\x3a\xb4\x14\xd8\x31\x02\x19\x1e\x0a\xc8\x41\x89\x4c\xac\x35\xe3\xb1\xe9\x36\x0a\xd6\x2c\xbc\x87\x90\xac\x63\x7e\xae\x7e\xca\xf8\xb9\x48\x03\x78\xc4\x0d\x67\xba\x01\xae\x9c\xa8\xe6\x51\x2a\x71\xc7\x31\xc8\xb0\xc2\x44\x26\xb8\xaf\xfa\x81\xf2\x51\x32\x94\xed\x1e\x28\xe3\x5f\x71\x4b\xce\x9c\xee\xf7\xde\x67\xb2\x88\xf5\x99\xcc\x74\x00\x8f\xfc\xd5\x89\xc8\x06\x1e\xc0\xa4\x65\xb0\xf0\x94\x89\xcd\x24\xfd\x57\x0d\xff\xff\x47\xc4\x1f\x3e\x31\x08\xa3\x42\x7d\x1a\x16\x93\x6a\x14\x5b\x80\x45\x1b\x64\xa4\x64\xbf\x02\xc7\xc4\x33\x3a\x51\x7b\xfb\xcb\xf6\xa7\x53\xd1\x7b\xe3\x8c\xae\x99\x0f\xf5\xa3\x97\x96\x5a\x61\xb5\x39\x6a\x4f\x59\xd1\x5d\xf1\x5c\xe4\x0d\xfd\xa0\xcc\x41\xa4\x2c\x92\xfa\x99\x16\x6e\x74\x99\x11\x82\x3d\xa1\xc8\x60\x60\x4c\x9d\xc4\xb8\x45\xc7\x7c\x32\xd7\xd6\x50\x23\x8d\xdd\xf7\x08\x3d\x62\x35\xb3\x88\x8d\x02\xd0\xd4\x37\x45\x40\x94\x05\x21\xcb\x35\xf8\x1b\x4c\x5c\xef\x63\x0a\x72\x7c\x55\x48\xd0\x1c\x29\xbc\x5a\x28\x69\xb6\x7f\xaf\x81\xed\x54\x4c\x9d\x0c\x22\x74\xcc\xa9\xd0\x1c\xbd\x3f\xbb\xf0\xce\x23\x06\xd7\x40\x82\x28\xbd\xc7\x64\x86\x4a\x54\xcd\xd3\x22\x8b\xa2\xda\x5f\x02\x1b\x2e\x6b\x4c\x1a\x4a\x25\x8e\x26\x61\x08\x6a\x74\x2d\x4f\xec\x37\x98\x1c\x43\x19\xf8\x1b\x7b\x0c\x9d\xa1\x7e\x1b\xae\xc8\x3d\xcc\x50\x16\xfd\x0e\x62\x57\x97\x4d\x25\x02\x57\x40\xfc\xf9\x4f\x33\xcb\xba\x51\x88\x24\xc1\x4a\x71\x11\xbf\x11\xf1\x2a\xe9\x55\x0a\xd1\x63\xfb\xa2\x06\xb5\xdb\xea\x13\xb9\x07\x2c\x58\x95\xbf\x6e\xa2\xdf\x01\x0b\x96\x4b\x3b\x0a\xaa\xae\x27\x35\xe0\x1e\xe0\x03\xe3\xf0\x3a\xd6\xc1\xe1\x93\x7c\x44\xfc\x9c\xa9\x53\xc5\xdc\x99\xf8\x42\xcf\x1a\x9d\xe5\x32\x86\xf9\xa6\x93\x64\xdb\x88\xfb\x0f\xfa\x38\x13\xfc\x8d\x87\xc5\x98\xaa\x14\xe7\x0b\xff\x6a\xa9\x5d\x27\x62\x70\x1f\xf6\xae\x59\x47\x85\x3e\xda\xc8\xd1\x5f\x62\x7f\x71\xe4\x16\xee\x6a\x49\x1f\x8d\x77\xe3\xd6\xcf\x67\x8d\x52\x07\x72\x5a\xfb\xf9\xec\x0c\x45\xe9\x6a\xcd\xaf\xe9\x56\xfa\x7e\xcb\x59\xcc\xf0\x01\xee\x86\x30\xc4\x04\x82\x56\x99\x8b\x76\xb3\x20\x64\x75\x9c\x62\xd7\xbc\x43\x57\x05\xbc\x68\x37\x9d\x49\x8e\x20\xce\x60\x78\x5b\xa5\xc3\xb2\xcf\xb4\xe8\x36\xf3\xea\x5a\x18\x28\x58\xad\x07\xb2\x87\xa9\xec\x0f\xae\xb0\xaa\x06\x06\xd4\x35\xf2\x4c\x77\x84\x02\x6b\x27\xa0\x7f\x20\x85\x55\x74\x60\x0b\x3f\xa0\x3b\x91\x03\xcf\x76\x1f\xc3\x30\x83\xc3\x4b\x19\x95\xdb\x7e\xfc\x62\xa6\xc5\x53\xec\xbe\x70\x41\x1b\x8f\xfb\xff\x45\xed\xbf\xa5\xa8\x5d\xa4\x19\x30\x8e\x5d\x84\x57\xcb\x6a\xbc\x54\x5b\xf1\xfd\xde\x3b\x83\x90\x32\x50\x1b\x74\xca\xe8\x6d\xc6\x0d\xc3\x78\xea\x33\x20\x3c\x4a\xef\xa7\x33\x44\x66\xc2\x88\x6e\xf9\x3e\xb5\xf9\x06\xb5\x10\x64\xb5\x9c\xa1\x6a\x5f\x2f\xb6\x4a\xbf\x84\x34\x10\xfd\xbc\xe1\x5e\xf2\x77\x1a\x72\x60\x15\xf6\x2c\xaf\x79\xf3\xe6\x20\x66\x21\xb0\x79\x1d\xd9\x43\xff\xb6\x0a\x08\x87\x17\x98\x7b\x0a\x65\x2b\x8c\xf9\xb3\x32\x86\xd1\x95\xe6\xae\x48\x40\x75\xb9\xd7\xe2\x79\x61\x24\x1b\x4b\xdf\xf0\x52\x20\x1a\x4b\xbe\x0f\x99\x96\xa4\xc6\x93\xb1\x85\x8d\x79\x8c\x21\x1e\x9f\x64\x09\x12\x86\xe0\x73\x08\xac\x14\xff\x7d\x2c\xf3\xf8\x0d\x4c\x63\x84\xa9\xc7\xd1\x20\x27\xc3\xf3\xea\x18\x23\x1d\x10\x35\x67\xaa\xdc\x67\x03\x36\x0b\x25\x10\xba\xbd\x33\x7d\xd0\xf7\x0d\x27\xc3\xab\x92\x40\xe4\x60\xc5\x50\x71\x76\x0d\x41\xc4\xdf\xd1\x78\x9d\xa4\x99\xf5\xca\xd9\x30\x2b\x3a\x2c\xb5\xa1\x78\xe7\x9c\x06\xf0\xa8\xb1\x94\x6f\x66\xb5\x94\x32\x3b\x95\x08\x6f\x25\xf0\x1d\x9a\x23\x9f\x26\xde\x4d\x4a\x96\xf0\x8e\x64\xa0\x30\x76\xf8\x8e\x8e\xba\x9a\x07\x59\x48\x5f\x2a\xd2\xfb\x34\x33\xde\x99\x2a\xec\x1a\x97\xea\xe4\xf6\x10\xff\x7a\x7c\x59\x07\xfb\x5e\x59\xa2\x60\xfe\x7f\xd4\xe3\x46\x25\xb0\x5e\x25\xfd\x08\xce\x27\x3d\x6f\x8c\xe3\x55\x27\xbe\x6a\x3f\x36\x26\xd3\x15\xae\x64\xd1\xcd\xa4\xb2\xda\xaf\x68\xc8\xcb\x21\x02\xe8\x44\x51\x9c\x39\x93\xfc\xb0\x22\x3b\x2a\xa8\x96\x9b\x0c\x78\x07\x0b\xa3\x53\xf8\x0d\x70\x45\x32\x38\xe5\x2f\x50\x77\x25\x4f\xb5\xae\x48\x4e\x47\x47\xc4\x99\x24\xc5\x0d\x17\x05\xa6\xe6\x67\x3b\xd4\x4c\x88\xa9\xa0\xf2\xe5\x6a\x19\x4e\x4a\xe0\x5a\x34\x95\x57\x5c\x2a\x4e\xa5\xf6\x8e\x8f\xa6\x37\xc9\x37\x49\xe0\x1d\x7a\x39\xa0\x5d\x6b\xc6\x4f\x2f\xab\x63\xbc\xeb\x8b\xbc\x08\x34\xe4\x5d\xb0\xcb\x14\x20\x3a\x0a\x16\xde\x65\xf1\x73\x9c\x6b\x3d\xd7\x8f\x0a\x72\x23\x9c\xa9\x80\xf5\xe4\x2d\xb2\xb6\xf7\x07\x1d\x16\xb7\xb6\x0a\x01\xb1\xfb\xe2\x76\x6f\x91\xe3\xd9\xc6\x1f\xe0\x7a\xc8\x05\xe4\x70\xf7\x94\x26\xbe\x7f\x96\x6d\xce\x95\xdd\xfd\xb0\x64\x41\x1f\xfa\xe8\x2b\xc2\xa8\xa5\xbc\xf7\x79\x51\xe5\x95\xb9\x7d\xf5\x6d\x4c\x83\x2f\x13\x72\x17\xfd\x72\xd8\x7d\x26\xfd\xb6\x01\x3d\x7f\xd6\x54\x1d\x85\x68\xb5\xb4\x8f\x6c\x0e\x19\x1b\xec\x73\xc4\x31\xf3\xb9\x3c\x2f\x40\x85\x4f\xf6\xbb\xd5\x7b\x88\xe1\x69\x53\x7a\xe7\x5c\xa1\x50\x3e\xa3\x28\x69\x9e\x3a\x07\xc0\x40\x3c\x7f\xe1\xd9\xdc\xd0\x3c\x68\x20\x97\x8c\x1c\x3e\x90\x2b\x5a\xdf\x74\x20\x7f\x21\x1b\xf4\x4c\xe1\x4f\x36\xc2\xa8\x26\xb6\x20\x7f\xc8\xe8\xdd\x6d\x8e\x51\xdd\xe9\x3b\xba\x4e\x9f\x96\x60\x1b\xe7\xdf\x7d\x9a\x55\x64\x06\x5c\xe4\x97\xc7\x28\xe3\x43\xa5\xbe\x9d\x99\x05\xa5\xf1\x58\x5e\x34\x99\x01\x66\xae\x21\x03\x8e\xdb\x2f\x11\xef\xf7\x6f\x51\xe3\x5a\xae\xdc\x20\x2f\xe3\x12\x6f\xbf\x7f\xbd\xf1\x2e\xf3\x1c\xcd\x91\xfc\xf3\x4b\xf5\x6e\xee\xc8\x1b\x14\xea\xa2\x39\x4d\x63\x3d\xb7\x0a\xb1\x0f\xb8\xd0\xaf\xdf\xe7\x94\xfb\xe5\xed\x3c\xf5\x46\xa7\x55\x02\x79\x29\xe5\x34\x0d\x14\x17\x6a\x4f\xae\x3e\xd0\x98\x2a\x31\xf2\x7c\x2a\x3f\xd3\xf0\x6c\xa9\x4a\xb1\xca\x9b\xef\x93\xf2\x83\x82\xda\x98\x69\x89\x63\x1d\xe3\x2b\x20\x99\xec\x0f\x63\x4d\x9d\x98\x97\xec\x9d\xa0\x01\x66\x2d\x6e\xf3\x8e\x6f\x10\xda\x6c\x61\xfa\x37\x46\xb7\x1d\x53\x8c\x6b\xbe\x1c\x5a\xc2\xae\x71\xd1\x5e\x6c\xb3\xc4\x5d\xc2\xee\xb9\xc2\x5e\x4a\x61\x8d\x70\xa5\xab\xfd\xcd\xf3\x69\xba\x01\xc6\x6f\x38\x11\xf5\x5a\x39\xc5\x69\xa6\x1f\x06\x84\x93\xcf\xbb\x95\x7c\xe3\x20\x58\x74\xab\x9b\x7e\x49\x83\x0e\x3d\x0d\x5d\x60\x15\xdd\x63\xb5\xe3\x52\x2a\xa8\x87\xea\xde\x29\x94\x20\x84\x5d\xc2\xae\xf1\xe6\xa6\x5d\xbf\xf2\x3d\x88\xd4\xef\x72\x86\x36\xd6\xb7\x59\xea\x03\x87\x89\xba\xb2\x84\xd5\x53\xf9\xdd\x81\xe0\x3d\x50\x37\xde\xe4\x66\x31\xc0\x61\x09\xba\x5c\x22\x33\xbb\x89\xf5\xca\x6b\x42\xb1\x24\xb7\x47\x21\x5a\xea\xef\x9a\x24\x97\x3a\xf4\x7e\x46\xda\x76\x02\xcb\x1c\x2d\x25\x25\xab\x59\x51\xcb\xd6\x57\x31\x4b\xd8\x15\xec\x98\xa0\x54\xba\x2f\x5e\xb0\x4a\x1e\xe6\x4a\x63\xb7\x3f\xdd\x15\xd0\x46\x53\x46\xc4\x03\xdd\xa5\x19\x1c\xcf\xf2\x97\x4d\xb7\xb3\x58\xde\x32\xc2\x5d\x4e\x33\x11\x4a\x3f\x50\x62\xbb\xfc\xb1\x13\xdb\x65\x25\xb1\x75\x30\xfb\xc4\xc4\x76\x46\xb8\xff\xf0\x85\xc4\x91\x1c\xde\xfa\x8e\x69\xac\x0f\x24\x45\x68\x48\x48\xab\xbb\xd7\x0b\x88\x78\xca\xbc\x6e\xb3\x7d\x94\x07\x72\x55\x82\xe5\xd5\x47\x7d\x46\x34\x50\x96\x8b\x8d\x03\x87\x65\x16\xb3\x4d\x16\x5a\xa9\x87\xd6\x5d\x03\xc1\xc4\x7f\x02\x00\x00\xff\xff\xc8\x58\xe4\x42\x83\x3c\x00\x00")

func templateDbschemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschemaGotpl,
		"template/dbschema.gotpl",
	)
}

func templateDbschemaGotpl() (*asset, error) {
	bytes, err := templateDbschemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema.gotpl", size: 15491, mode: os.FileMode(420), modTime: time.Unix(1643016272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDbschema_initGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xcd\x8e\x9b\x30\x14\x85\xd7\xf1\x53\x1c\xb1\x02\x35\x85\x27\xa8\x54\x51\x36\xa8\x52\x14\x75\xd3\xb5\x81\x0b\x5c\x15\xec\xd4\x5c\x26\x41\x96\xdf\x7d\x64\x92\x49\x36\x33\x2b\xff\xe8\x3b\xf7\x3b\xb7\x28\xf0\x73\x20\x43\x4e\x0b\x75\xa8\x2c\x8c\x15\x50\xc7\x02\x8d\x9e\x27\x3a\xe2\x3a\x72\x3b\x82\x17\xe8\x55\xec\xac\x85\x5b\x3d\x4d\x1b\x5e\xa1\x66\x83\x8c\xf4\xf1\x61\x5d\xae\xd4\x45\xb7\xff\xf4\x40\xf0\x3e\x3f\xdf\xaf\x27\x3d\x53\x08\x4a\xf1\x7c\xb1\x4e\x90\xaa\x43\x32\xb0\x8c\x6b\x93\xb7\x76\x2e\xae\xd4\xdc\xbe\x8b\xbd\x14\x5d\x53\x4c\xdc\x14\xbd\x6e\xc5\xba\x2d\x51\x99\x52\x6f\xda\xe1\x2f\xcb\x78\x76\xd4\xf3\x0d\x3f\xd0\xaf\xa6\x4d\x45\x37\xd3\x3e\x14\x8b\x38\x36\x43\xf6\x38\xe1\xd5\xc1\x91\xac\xce\x20\x89\xf6\x3d\x14\x42\x82\x6f\x78\x46\x54\x50\xde\x73\x0f\xfa\x8f\xbc\x2a\x7f\xd3\x86\xbc\xa2\x5e\xaf\x93\xec\xaf\x10\x76\x67\x55\xd6\x51\x76\x6f\xf2\x02\x6a\xe5\x3d\x4d\x0b\x7d\x4a\x9d\xe8\x5a\x95\x75\x9a\x45\xc6\x74\x71\xdf\x58\x16\x6c\x58\xd2\xcc\x2b\x00\xd8\xcd\x86\xbe\x32\x47\xe4\xe9\x2c\xeb\x3f\x34\xf0\x22\xe4\xd2\xaa\xac\x8f\x71\xa1\x07\x97\x64\x8f\x61\x77\xcd\xc1\xfb\xbc\x36\x2c\xbf\x6c\x17\x8b\x05\xf5\x1e\x00\x00\xff\xff\x1e\xda\x5f\x0a\xd7\x01\x00\x00")

func templateDbschema_initGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbschema_initGotpl,
		"template/dbschema_init.gotpl",
	)
}

func templateDbschema_initGotpl() (*asset, error) {
	bytes, err := templateDbschema_initGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/dbschema_init.gotpl", size: 471, mode: os.FileMode(420), modTime: time.Unix(1613548584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateModelGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x6f\xdb\x20\x14\xc6\xcf\xf0\x57\xbc\x45\x55\x05\x91\x47\xee\x99\x72\xe8\xaa\x1d\x26\x4d\x5d\xb4\x69\xa7\x69\x9a\x30\x10\x07\x25\x80\x85\x71\x93\x08\xf1\xbf\x4f\xe0\xa6\xf3\x9c\xa6\xd5\x6e\xf8\xf1\x78\xdf\xef\xfb\x0c\x2d\x17\x3b\xde\x28\x88\x91\xad\x87\xe5\x03\x37\x2a\x25\x8c\xb5\x69\x9d\x0f\x40\x30\x9a\xc5\xc8\xbe\x8b\xad\x32\xfc\xa9\x65\xcd\xc3\x36\xa5\x19\x46\xb3\x46\x87\x6d\x5f\x33\xe1\xcc\xe2\xa0\xea\xe3\xfb\xe0\xda\x85\x12\x5b\x77\x6d\x4f\xd6\xd7\x77\x16\x7b\x5d\x2f\x36\x5c\x04\xe7\x4f\x8b\x96\x37\xda\xf2\xa0\x9d\x9d\x61\x14\xa3\xe7\xb6\x51\x70\xb3\xab\xe0\xe6\x11\x96\x2b\x60\x9f\x0b\x5d\x97\x52\xc1\xbb\x79\x2c\x38\x31\x2a\x2b\x53\xc2\x14\x23\x84\x10\xde\xf4\x56\xc0\x83\x3a\x64\xfc\xe0\x7b\x11\x06\x6b\x44\x84\x23\x64\x48\x76\xef\x6c\x50\xc7\x40\x61\x3e\x69\x81\x88\x91\x57\xa1\xf7\x16\x6e\x27\x5b\x11\x23\x34\x29\x2d\x61\x1a\xd0\x50\x67\x2f\x6b\xd3\x0a\xa3\x84\x13\xc6\xe1\xd4\x96\xe0\xff\x51\xee\xca\x47\x06\x98\x5f\x99\x3a\x39\x91\x27\x15\xa7\xc4\x5c\xf8\xa0\x20\xb6\x4a\xec\x08\x05\xe5\xbd\xf3\x23\x5b\x56\xef\x5f\x3f\x78\x27\x25\xa1\x40\xda\x1d\x68\x1b\x94\xdf\x70\xa1\x62\xaa\xf2\x9c\x61\x16\xcd\xc3\xf4\xa6\x14\x96\x2b\x30\xec\x49\xe9\x43\xa9\xbc\x5b\x65\x85\xdc\x32\x12\x2c\xa7\xb3\xf7\x73\xcd\x4c\xbd\xb0\xa2\xfa\x3a\xd8\x27\xa9\x03\x31\x07\xc8\x1d\x44\xd6\xec\x9b\xea\xfa\x7d\xa0\xf0\xbc\xac\x80\xfb\xa6\x03\xc6\xd8\x88\x7c\x94\xc0\x7f\x40\xbf\xc9\xfb\xa3\x95\x3c\x28\x62\x0e\x83\x28\x63\xec\x0d\xfa\x2f\xba\x0b\x6b\xde\x28\x22\x9c\x95\x30\x97\x35\xbb\x77\xa6\x75\xbd\x95\x5d\x05\x5d\xbe\xd2\x17\xe0\xe4\xe7\xaf\xe9\x9c\x6a\xf4\x0f\xbc\x12\xe5\x49\x5c\x76\xc5\x84\xd1\xef\xea\x6c\xf6\xef\x8b\xca\xf7\x32\x73\x28\x4f\x2e\x1c\x55\x70\x9b\x07\x56\x43\xbc\x1e\x5e\x0a\x78\x9c\x90\x67\x5f\xbd\x54\xfe\xe3\x89\x14\xf8\x12\x00\x4a\x15\x64\x7b\xec\xce\x4a\x42\x29\x5b\x67\xe5\x86\x98\xf3\x7b\x23\x94\x3e\x47\x3a\x88\xe5\x9c\x13\xfe\x13\x00\x00\xff\xff\xea\xb4\x9d\x55\x8c\x04\x00\x00")

func templateModelGotplBytes() ([]byte, error) {
	return bindataRead(
		_templateModelGotpl,
		"template/model.gotpl",
	)
}

func templateModelGotpl() (*asset, error) {
	bytes, err := templateModelGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/model.gotpl", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1643015743, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/dbschema.gotpl":      templateDbschemaGotpl,
	"template/dbschema_init.gotpl": templateDbschema_initGotpl,
	"template/model.gotpl":         templateModelGotpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"dbschema.gotpl":      &bintree{templateDbschemaGotpl, map[string]*bintree{}},
		"dbschema_init.gotpl": &bintree{templateDbschema_initGotpl, map[string]*bintree{}},
		"model.gotpl":         &bintree{templateModelGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
