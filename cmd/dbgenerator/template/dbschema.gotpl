// @generated Do not edit this file, which is automatically generated by the generator.

package {{.PackageName}}

import (
	"fmt"
	{{range $k, $v := .Imports}}
	"{{$v}}"
	{{end}}

	"github.com/webx-top/com"
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	"github.com/webx-top/db/lib/factory/pagination"
	"github.com/webx-top/echo"
	"github.com/webx-top/echo/param"
)

type Slice_{{.StructName}} []*{{.StructName}}

func (s Slice_{{.StructName}}) Range(fn func(m factory.Model) error ) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_{{.StructName}}) RangeRaw(fn func(m *{{.StructName}}) error ) error {
	for _, v := range s {
		if err := fn(v); err != nil {
			return err
		}
	}
	return nil
}

func (s Slice_{{.StructName}}) GroupBy(keyField string) map[string][]*{{.StructName}} {
	r := map[string][]*{{.StructName}}{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		if _, y := r[vkey]; !y {
			r[vkey] = []*{{.StructName}}{}
		}
		r[vkey] = append(r[vkey], row)
	}
	return r
}

func (s Slice_{{.StructName}}) KeyBy(keyField string) map[string]*{{.StructName}} {
	r := map[string]*{{.StructName}}{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = row
	}
	return r
}

func (s Slice_{{.StructName}}) AsKV(keyField string, valueField string) param.Store {
	r := param.Store{}
	for _, row := range s {
		dmap := row.AsMap()
		vkey := fmt.Sprint(dmap[keyField])
		r[vkey] = dmap[valueField]
	}
	return r
}

func (s Slice_{{.StructName}}) Transform(transfers map[string]param.Transfer) []param.Store {
	r := make([]param.Store,len(s))
	for idx, row := range s {
		r[idx] = row.AsMap().Transform(transfers)
	}
	return r
}


func (s Slice_{{.StructName}}) FromList(data interface{}) Slice_{{.StructName}} {
	values, ok := data.([]*{{.StructName}})
	if !ok {
		for _, value := range data.([]interface{}) {
			row := &{{.StructName}}{}
			row.FromRow(value.(map[string]interface{}))
			s = append(s, row)
		}
		return s
	}
	s = append(s, values...)
	
	return s
}

func New{{.StructName}}(ctx echo.Context) *{{.StructName}} {
	m := &{{.StructName}}{}
	m.SetContext(ctx)
	return m 
}

// {{.StructName}} {{.StructComment}}
type {{.StructName}} struct {
	base    factory.Base
	objects []*{{.StructName}}
	{{range $k, $v := .StructAttributes}}
	{{$v -}}
	{{end}}
}

// - base function

func (a *{{.StructName}}) Trans() factory.Transactioner {
	return a.base.Trans()
}

func (a *{{.StructName}}) Use(trans factory.Transactioner) factory.Model {
	a.base.Use(trans)
	return a
}

func (a *{{.StructName}}) SetContext(ctx echo.Context) factory.Model {
	a.base.SetContext(ctx)
	return a
}

func (a *{{.StructName}}) EventON(on ...bool) factory.Model {
	a.base.EventON(on...)
	return a
}

func (a *{{.StructName}}) EventOFF(off ...bool) factory.Model {
	a.base.EventOFF(off...)
	return a
}

func (a *{{.StructName}}) Context() echo.Context {
	return a.base.Context()
}

func (a *{{.StructName}}) SetConnID(connID int) factory.Model {
	a.base.SetConnID(connID)
	return a
}

func (a *{{.StructName}}) ConnID() int {
	return a.base.ConnID()
}

func (a *{{.StructName}}) SetNamer(namer func (factory.Model) string) factory.Model {
	a.base.SetNamer(namer)
	return a
}

func (a *{{.StructName}}) Namer() func(factory.Model) string {
	return a.base.Namer()
}

func (a *{{.StructName}}) SetParam(param *factory.Param) factory.Model {
	a.base.SetParam(param)
	return a
}

func (a *{{.StructName}}) Param(mw func(db.Result) db.Result, args ...interface{}) *factory.Param {
	if a.base.Param() == nil {
		return a.NewParam().SetMiddleware(mw).SetArgs(args...)
	}
	return a.base.Param().SetMiddleware(mw).SetArgs(args...)
}

// - current function

func (a *{{.StructName}}) New(structName string, connID ...int) factory.Model {
	if len(connID) > 0 {
		return factory.NewModel(structName,connID[0]).Use(a.base.Trans())
	}
	return factory.NewModel(structName,a.base.ConnID()).Use(a.base.Trans())
}

func (a *{{.StructName}}) Objects() []*{{.StructName}} {
	if a.objects == nil {
		return nil
	}
	return a.objects[:]
}

func (a *{{.StructName}}) XObjects() Slice_{{.StructName}} {
	return Slice_{{.StructName}}(a.Objects())
}

func (a *{{.StructName}}) NewObjects() factory.Ranger {
	return &Slice_{{.StructName}}{}
}

func (a *{{.StructName}}) InitObjects() *[]*{{.StructName}} {
	a.objects = []*{{.StructName}}{}
	return &a.objects
}

func (a *{{.StructName}}) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetIndex(a.base.ConnID()).SetTrans(a.base.Trans()).SetCollection(a.Name_()).SetModel(a)
}

func (a *{{.StructName}}) Short_() string {
	return "{{.TableName}}"
}

func (a *{{.StructName}}) Struct_() string {
	return "{{.StructName}}"
}

func (a *{{.StructName}}) Name_() string {
	if a.base.Namer() != nil {
		return WithPrefix(a.base.Namer()(a))
	}
	return WithPrefix(factory.TableNamerGet(a.Short_())(a))
}

func (a *{{.StructName}}) CPAFrom(source factory.Model) factory.Model {
	a.SetContext(source.Context())
	a.SetConnID(source.ConnID())
	a.SetNamer(source.Namer())
	return a
}

func (a *{{.StructName}}) Get(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	base := a.base
	if !a.base.Eventable() {
		err = a.Param(mw, args...).SetRecv(a).One()
		a.base = base
		return
	}
	queryParam := a.Param(mw, args...).SetRecv(a)
	if err = DBI.FireReading(a, queryParam); err != nil {
		return
	}
	err = queryParam.One()
	a.base = base
	if err == nil {
		err = DBI.FireReaded(a, queryParam)
	}
	return
}

func (a *{{.StructName}}) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetPage(page).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*{{.StructName}}:
			err = DBI.FireReaded(a, queryParam, Slice_{{.StructName}}(*v))
		case []*{{.StructName}}:
			err = DBI.FireReaded(a, queryParam, Slice_{{.StructName}}(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *{{.StructName}}) GroupBy(keyField string, inputRows ...[]*{{.StructName}}) map[string][]*{{.StructName}} {
	var rows Slice_{{.StructName}}
	if len(inputRows) > 0 {
		rows = Slice_{{.StructName}}(inputRows[0])
	} else {
		rows = Slice_{{.StructName}}(a.Objects())
	}
	return rows.GroupBy(keyField)
}

func (a *{{.StructName}}) KeyBy(keyField string, inputRows ...[]*{{.StructName}}) map[string]*{{.StructName}} {
	var rows Slice_{{.StructName}}
	if len(inputRows) > 0 {
		rows = Slice_{{.StructName}}(inputRows[0])
	} else {
		rows = Slice_{{.StructName}}(a.Objects())
	}
	return rows.KeyBy(keyField)
}

func (a *{{.StructName}}) AsKV(keyField string, valueField string, inputRows ...[]*{{.StructName}}) param.Store {
	var rows Slice_{{.StructName}}
	if len(inputRows) > 0 {
		rows = Slice_{{.StructName}}(inputRows[0])
	} else {
		rows = Slice_{{.StructName}}(a.Objects())
	}
	return rows.AsKV(keyField, valueField)
}

func (a *{{.StructName}}) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = a.InitObjects()
	}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv).List()
	}
	queryParam := a.Param(mw, args...).SetOffset(offset).SetSize(size).SetRecv(recv)
	if err := DBI.FireReading(a, queryParam); err != nil {
		return nil, err
	}
	cnt, err := queryParam.List()
	if err == nil {
		switch v := recv.(type) {
		case *[]*{{.StructName}}:
			err = DBI.FireReaded(a, queryParam, Slice_{{.StructName}}(*v))
		case []*{{.StructName}}:
			err = DBI.FireReaded(a, queryParam, Slice_{{.StructName}}(v))
		case factory.Ranger:
			err = DBI.FireReaded(a, queryParam, v)
		}
	}
	return cnt, err
}

func (a *{{.StructName}}) Insert() (pk interface{}, err error) {
	{{.BeforeInsert}}
	if a.base.Eventable() {
		err = DBI.Fire("creating", a, nil)
		if err != nil {
			return
		}
	}
	pk, err = a.Param(nil).SetSend(a).Insert()
	{{.AfterInsert}}
	if err == nil && a.base.Eventable() {
		err = DBI.Fire("created", a, nil)
	}
	return
}

func (a *{{.StructName}}) Update(mw func(db.Result) db.Result, args ...interface{}) (err error) {
	{{.BeforeUpdate}}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Update()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(a).Update(); err != nil {
		return
	}
	return DBI.Fire("updated", a, mw, args...)
}

func (a *{{.StructName}}) Updatex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {
	{{.BeforeUpdate}}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(a).Updatex()
	}
	if err = DBI.Fire("updating", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(a).Updatex(); err != nil {
		return
	}
	err = DBI.Fire("updated", a, mw, args...)
	return
}

func (a *{{.StructName}}) UpdateByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (err error) {
	{{.BeforeUpdate}}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdateByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).UpdateByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *{{.StructName}}) UpdatexByFields(mw func(db.Result) db.Result, fields []string, args ...interface{}) (affected int64, err error) {
	{{.BeforeUpdate}}
	if !a.base.Eventable() {
		return a.Param(mw, args...).UpdatexByStruct(a, fields...)
	}
	editColumns := make([]string, len(fields))
	for index, field := range fields {
		editColumns[index] = com.SnakeCase(field)
	}
	if err = DBI.FireUpdate("updating", a, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).UpdatexByStruct(a, fields...); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", a, editColumns, mw, args...)
	return
}

func (a *{{.StructName}}) UpdateField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (err error) {
	return a.UpdateFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *{{.StructName}}) UpdatexField(mw func(db.Result) db.Result, field string, value interface{}, args ...interface{}) (affected int64, err error) {
	return a.UpdatexFields(mw, map[string]interface{}{
		field: value,
	}, args...)
}

func (a *{{.StructName}}) UpdateFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (err error) {
	{{.SetUpdatedAt}}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Update()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(kvset).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, editColumns, mw, args...)
}

func (a *{{.StructName}}) UpdatexFields(mw func(db.Result) db.Result, kvset map[string]interface{}, args ...interface{}) (affected int64, err error) {
	{{.SetUpdatedAt}}
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(kvset).Updatex()
	}
	m := *a
	m.FromRow(kvset)
	var editColumns []string
	for column := range kvset {
		editColumns = append(editColumns, column)
	}
	if err = DBI.FireUpdate("updating", &m, editColumns, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).SetSend(kvset).Updatex(); err != nil {
		return
	}
	err = DBI.FireUpdate("updated", &m, editColumns, mw, args...)
	return 
}

func (a *{{.StructName}}) UpdateValues(mw func(db.Result) db.Result, keysValues *db.KeysValues, args ...interface{}) (err error) {
	if !a.base.Eventable() {
		return a.Param(mw, args...).SetSend(keysValues).Update()
	}
	m := *a
	m.FromRow(keysValues.Map())
	if err = DBI.FireUpdate("updating", &m, keysValues.Keys(), mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).SetSend(keysValues).Update(); err != nil {
		return
	}
	return DBI.FireUpdate("updated", &m, keysValues.Keys(), mw, args...)
}

func (a *{{.StructName}}) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = a.Param(mw, args...).SetSend(a).Upsert(func() error { {{.BeforeUpdate}}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("updating", a, mw, args...)
	}, func() error { {{.BeforeInsert}}
		if !a.base.Eventable() {
			return nil
		}
		return DBI.Fire("creating", a, nil)
	})
	{{.AfterInsert}}
	if err == nil && a.base.Eventable() {
		if pk == nil {
			err = DBI.Fire("updated", a, mw, args...)
		} else {
			err = DBI.Fire("created", a, nil)
		}
	} 
	return 
}

func (a *{{.StructName}}) Delete(mw func(db.Result) db.Result, args ...interface{})  (err error) {
	{{.BeforeDelete}}
	if !a.base.Eventable() {
		return a.Param(mw, args...).Delete()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if err = a.Param(mw, args...).Delete(); err != nil {
		return
	}
	return DBI.Fire("deleted", a, mw, args...)
}

func (a *{{.StructName}}) Deletex(mw func(db.Result) db.Result, args ...interface{}) (affected int64, err error) {
	{{.BeforeDelete}}
	if !a.base.Eventable() {
		return a.Param(mw, args...).Deletex()
	}
	if err = DBI.Fire("deleting", a, mw, args...); err != nil {
		return
	}
	if affected, err = a.Param(mw, args...).Deletex(); err != nil {
		return
	}
	err = DBI.Fire("deleted", a, mw, args...)
	return
}

func (a *{{.StructName}}) Count(mw func(db.Result) db.Result, args ...interface{}) (int64, error) {
	return a.Param(mw, args...).Count()
}

func (a *{{.StructName}}) Exists(mw func(db.Result) db.Result, args ...interface{}) (bool, error) {
	return a.Param(mw, args...).Exists()
}

func (a *{{.StructName}}) Reset() *{{.StructName}} {
	{{- range $k, $v := .Resets}}
	a.{{$v.K}} = {{$v.V -}}
	{{end}}
	return a
}

func (a *{{.StructName}}) AsMap(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		{{- range $k, $v := .TableAndStructFields}}
		r["{{$v.V}}"] = a.{{$v.V -}}
		{{end}}
		return r
	}
	for _, field := range onlyFields {
		switch field {
			{{- range $k, $v := .TableAndStructFields}}
			case "{{$v.V}}": r["{{$v.V}}"] = a.{{$v.V -}}
			{{end}}
		}
	}
	return r
}

func (a *{{.StructName}}) FromRow(row map[string]interface{}) {
	for key, value := range row {
		switch key {
			{{- range $k, $v := .TableAndStructFields}}
			case "{{$v.K}}": a.{{$v.V}} = {{$v.H.convertStart}}param.As{{$v.H.dataType}}(value){{$v.H.convertEnd -}}
			{{end}}
		}
	}
}

func (a *{{.StructName}}) Set(key interface{}, value ...interface{}) {
	switch k := key.(type) {
		case map[string]interface{}:
			for kk, vv := range k {
				a.Set(kk, vv)
			}
		default:
			var (
				kk string
				vv interface{}
			)
			if k, y := key.(string); y {
				kk = k
			} else {
				kk = fmt.Sprint(key)
			}
			if len(value) > 0 {
				vv = value[0]
			}
			switch kk {
				{{- range $k, $v := .TableAndStructFields}}
				case "{{$v.V}}": a.{{$v.V}} = {{$v.H.convertStart}}param.As{{$v.H.dataType}}(vv){{$v.H.convertEnd -}}
				{{end}}
			}
	}
}

func (a *{{.StructName}}) AsRow(onlyFields ...string) param.Store {
	r := param.Store{}
	if len(onlyFields) == 0 {
		{{- range $k, $v := .TableAndStructFields}}
		r["{{$v.K}}"] = a.{{$v.V -}}
		{{end}}
		return r
	}
	for _, field := range onlyFields {
		switch field {
			{{- range $k, $v := .TableAndStructFields}}
			case "{{$v.K}}": r["{{$v.K}}"] = a.{{$v.V -}}
			{{end}}
		}
	}
	return r
}

func (a *{{.StructName}}) ListPage(cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, nil, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *{{.StructName}}) ListPageAs(recv interface{}, cond *db.Compounds, sorts ...interface{}) error {
	_, err := pagination.NewLister(a, recv, func(r db.Result) db.Result {
		return r.OrderBy(sorts...)
	}, cond.And()).Paging(a.Context())
	return err
}

func (a *{{.StructName}}) BatchValidate(kvset map[string]interface{}) error {
	if kvset == nil {
		kvset = a.AsRow()
	}
	return DBI.Fields.BatchValidate(a.Short_(), kvset)
}

func (a *{{.StructName}}) Validate(field string, value interface{}) error {
	return DBI.Fields.Validate(a.Short_(), field, value)
}
